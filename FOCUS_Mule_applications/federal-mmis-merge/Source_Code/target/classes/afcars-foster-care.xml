<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
      xmlns:spring="http://www.springframework.org/schema/beans" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <!-- <file:connector name="File" autoDelete="true" streaming="true" validateConnections="true" doc:name="File"/> -->
	<configuration doc:name="Configuration">
    <expression-language>
     	<global-functions> def getLastDayofMonth(textDate) { java.time.LocalDate convertedDate = java.time.LocalDate.parse(textDate, java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"));
								convertedDate = convertedDate.withDayOfMonth(convertedDate.getMonth().length(convertedDate.isLeapYear()));
								return convertedDate.toString(); } 
						  def getFirstDayofMonth(textDate) { java.time.LocalDate convertedDate = java.time.LocalDate.parse(textDate, java.time.format.DateTimeFormatter.ofPattern("yyyy-MM-dd"));
								convertedDate = convertedDate.withDayOfMonth(1);
								return convertedDate.toString(); }								
     	</global-functions> 
    </expression-language>  
    </configuration>   
 <!--     <sub-flow name="backup_Sub_Flow">

        <foreach collection="#[flowVars]" doc:name="For Each">

  <logger message="#[flowVars.key]" level="INFO" doc:name="Logger"/>

                    <choice doc:name="Choice">

                <when expression="#[payload != null]">

                            <dw:transform-message doc:name="Transform Message">

                <dw:set-payload><![CDATA[%dw 1.0
%output application/json
-
payload]]></dw:set-payload>

            </dw:transform-message>
                    
<file:outbound-endpoint path="./src/main/resources/backup" outputPattern="#[flowVars.key]_#[dw(&quot;now as :string {format : 'yyyy-MM-dd-HH-mm'}&quot;)].dw" connector-ref="File" responseTimeout="10000" doc:name="File"/>

                

                </when>

                <otherwise>

                <logger message="#[flowVars.key] has Null Payload" level="INFO" doc:name="Logger"/>

                </otherwise>

                </choice>

        </foreach>

    </sub-flow>
       -->
    <flow name="afcars-fostercareFlow">
<!--         <dw:transform-message metadata:id="b7c42ae3-c2bc-4dd0-aa95-1a623024fa24" doc:name="Element24Calc">
            <dw:input-payload doc:sample="sample_data\json_1.json"/>
            <dw:set-payload><![CDATA[%dw 1.0
%input payload application/json
%output application/json

%var Hospitalization = {
	"5004-6017-7000" : "true",
	"5004-6402-7003" : "true",
	"5004-6531-7003" : "true",
	"5004-6030-7003" : "true",
	"5004-6282-7003" : "true",
	"5004-6029-7003" : "true",
	"5004-6489-7003" : "true",
	"5054-6536-" : "true",
	"5004-6430-" : "true",
	"5063-6537-" : "true",
	"5004-6030-7001" : "true",
	"5004-6458-7002" : "true",
	"5004-6458-7003" : "true",
	"5004-6030-7002" : "true"	
}
%function isRunaway(placement) (true when (placement.RunawayID != null) otherwise false)
%function isTrialReunification(placement) (true when ((placement.HomePlacement default "") == "Trial Reunification") otherwise false)
%function isHospitalizationService(placement) ((Hospitalization[( (placement.ServiceTaxanomyLevel1CodeSmall default "") ++ "-" ++ (placement.ServiceTaxanomyLevel2CodeSmall default "") ++ "-" ++ (placement.ServiceTaxanomyLevel3CodeSmall default "") )] default "false") == "true")

%var totalPR = sizeOf payload
%var indexAllExcludes = ((payload map ($$))) default [] filter (isRunaway(payload[$]) or isTrialReunification(payload[$]) or  isHospitalizationService(payload[$]) )
%var indexBackToBack = ((payload map ($$))[1..-2]) default [] filter (
( ((payload[$ - 1].ProviderLastName default "") != "") and  ((payload[$ - 1].ProviderLastName default "") == (payload[$ + 1].ProviderLastName default "") ) ) 
and 
(isRunaway(payload[$]) or isTrialReunification(payload[$]) or  isHospitalizationService(payload[$]) )
 and 
( ((payload[$].StartDate) == (payload[$ - 1].EndDate) )  and 
  (  
	( (payload[$ + 1].StartDate - |P15D|) <= (payload[$].EndDate) )
  ) 
) 
) map ([$,$-1,$+1])
-
{ 
	indexAllExcludes : indexAllExcludes,
	//indexBackToBack : indexBackToBack,
	Flatten : (flatten indexBackToBack),
	includesLength : (sizeOf indexBackToBack),
	diff : sizeOf ((indexAllExcludes default [] ++ (flatten (indexBackToBack default [[]]))) distinctBy $),
	total : totalPR + (sizeOf indexBackToBack) - (sizeOf ((indexAllExcludes default [] ++ (flatten (indexBackToBack default [[]]))) distinctBy $))
	
	
}]]></dw:set-payload>
        </dw:transform-message> -->
        <object-to-string-transformer mimeType="application/json" doc:name="Object to String : Consume Stream" doc:description="Consume Stream from the JSON extract request"/>


        <logger message="AFCARS FC JSON #[payload]" level="INFO" doc:name="Logger : Log Extract Request JSON"/>
        
            <enricher doc:name="Message Enricher">
                <flow-ref name="AFCARS_FOSTER_CallLOVflow" doc:name="AFCARS_FOSTER_CallLOVflow"/>
                <enrich source="#[flowVars.LOVReturned]" target="#[flowVars.LOVReturned]"/>
            </enricher>
		     

        <dw:transform-message doc:name="Transform Message : Get Report Criteria info" >
            <dw:input-payload mimeType="application/json" doc:sample="nytd_request.json"></dw:input-payload>
            <dw:set-variable variableName="extractInfo"><![CDATA[%dw 1.0
%output application/java
---
{
      "ParentId" : payload.Id,
      "DateRun" : now as :date as :string {format:"yyyyMMdd"},
      "FederalFiscalYear": payload.Federal_Fiscal_Year__c as :number default "",
      "ReportStartDate": ( ( payload.Service_Start_Date__c ) when (payload.Service_Start_Date__c != null) otherwise (payload.Report_Start__c ) ) ,
      "ReportEndDate":( ( payload.Service_End_Date__c ) when (payload.Service_End_Date__c != null) otherwise (payload.Report_End__c ) ) ,
      "ReportPeriod" : "A" when (payload.Reporting_Period__c == "Oct 1 - Mar 31") otherwise ("B" when (payload.Reporting_Period__c == "Apr 1 - Sep 30") otherwise ""),
      "TypeOfSubmission" : flowVars.LOVReturned[("TYPE_OF_FILE-" ++ (payload.Type_of_File__c default ""))][0] default "",
      "SubmissionDate" : (now >> "America/New_York") as :string {format : "yyMMdd"},
      "SubmissionTime" : (now >> "America/New_York") as :string {format : "HHmm"},
      "EncryptPID":payload.Encrypt_PID__c,
      "RunForPID":payload.Run_for_PID__c default "No"
}]]></dw:set-variable>
            <dw:set-variable variableName="Element59"><![CDATA[%dw 1.0
%output application/java
---
payload.clientIds[0] pluck $$ as :string default []]]></dw:set-variable>

        </dw:transform-message>
		 
        <enricher doc:name="Message Enricher">
            <flow-ref name="afcars-fostercare-Custody-report-records-Sub_Flow" doc:name="afcars-fostercare-Custody-report-records-Sub_Flow"/>
            <enrich source="#[payload]" target="#[flowVars.reportCustodyPersonIDList]"/>
            <enrich source="#[flowVars.GroupCustodyForEntry]" target="#[flowVars.GroupCustodyForEntry]"/>
        </enricher>
     	<enricher doc:name="Message Enricher">
            <flow-ref name="afcars-foster-care-filter-out-age-18-Sub_Flow" doc:name="afcars-foster-care-filter-out-age-18-Sub_Flow"/>
            <enrich source="#[flowVars.Age18]" target="#[flowVars.reportCustodyPersonIDList]"/>
        </enricher> 


        <enricher doc:name="Message Enricher">
            <flow-ref name="afcars-fostercare-Placementoverlap-report-records-Sub_Flow" doc:name="afcars-fostercare-Placementoverlap-report-records-Sub_Flow"/>
            <enrich source="#[payload]" target="#[flowVars.reportCustodyPersonIDList1]"/>
        </enricher>

        <enricher doc:name="Message Enricher">
            <flow-ref name="afcars-fostercare-Runawayoverlap-report-records-Sub_Flow" doc:name="afcars-fostercare-Runawayoverlap-report-records-Sub_Flow"/>
            <enrich source="#[payload]" target="#[flowVars.reportCustodyPersonIDList2]"/>
        </enricher>
        <dw:transform-message doc:name="Transform Message : Add Overlaps for Person ID List">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="reportCustodyPersonIDList"><![CDATA[%dw 1.0
%output application/java
---
(((flowVars.reportCustodyPersonIDList1 default []) ++ (flowVars.reportCustodyPersonIDList2 default [] )) distinctBy $)]]></dw:set-variable>
        </dw:transform-message>

		
                
        <enricher doc:name="Message Enricher">
            <flow-ref name="afcars-fostercare-Custody-records-Sub_Flow" doc:name="afcars-fostercare-Custody-records-Sub_Flow"/>
            <enrich source="#[flowVars.FinalCustody]" target="#[flowVars.FinalCustody]"/>
            <enrich source="#[flowVars.CustodyList]" target="#[flowVars.CustodyList]"/>
            <enrich source="#[flowVars.FirstEverCustody]" target="#[flowVars.FirstEverCustody]"/>
        </enricher>
        <enricher doc:name="Message Enricher" doc:description="Get Transitional Living Services Records in a flow variable">
            <flow-ref name="afcars-fostercare-get-AfcarsEpisodes-Sub_Flow" doc:name="afcars-fostercare-get-AfcarsEpisodes-Sub_Flow" doc:description="Invoke flow to get AFCARS Episodes for the reporting period"/>
            <enrich source="#[flowVars.EpisodeRecords]" target="#[flowVars.EpisodeRecords]"/>
            <enrich source="#[flowVars.RecordCount]" target="#[flowVars.RecordCount]"/>
        </enricher>
        
        <enricher doc:name="Message Enricher" doc:description="Get Grouped data for Trial ReUnification and Temporary Home Visits in a flow variable">
            <flow-ref name="afcars-fostercare-get-TRU-and-TMV-Sub_Flow" doc:name="afcars-fostercare-get-TRU-and-TMV-Sub_Flow"/>
            <enrich source="#[flowVars.GroupedTRUandTMVPlacements]" target="#[flowVars.GroupedTRUandTMVPlacements]"/>
            <enrich source="#[flowVars.GroupedTRUPlacements]" target="#[flowVars.GroupedTRUPlacements]"/>
            <enrich source="#[flowVars.GroupedTMVPlacements]" target="#[flowVars.GroupedTMVPlacements]"/>
        </enricher>        
        <choice doc:name="Choice : Check if any Valid Records is present" doc:description="Check if any Valid Records is present for the report">
            <when expression="#[(flowVars.EpisodeRecords == null) || (flowVars.EpisodeRecords.size() == 0) || (flowVars.reportCustodyPersonIDList.size() == 0)]">
                <dw:transform-message doc:name="Transform Message : Prepare Response">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
		Id:flowVars.extractInfo.ParentId,
		"Attachment_Generated__c":  (false as :boolean),
		"Failure_Reason__c": "No Records Extracted"

}]]]></dw:set-payload>
                </dw:transform-message>
                <logger message="Before Update :: #[payload]" level="INFO" doc:name="Log Update Data"/>
                <sfdc:update config-ref="Salesforce__Basic_Authentication" type="DEL_Extract__c" doc:name="Salesforce : Update extract record" doc:description="Update Extract record to notify user about the outcome">
                    <sfdc:objects ref="#[payload]"/>
                </sfdc:update>
                <message-properties-transformer scope="invocation" doc:name="MP: Deleting FV">
				<delete-message-property key="InterfaceID"/>
				<delete-message-property key="interfaceTransactionStatus"/>
				<delete-message-property key="TransactionID"/>
				<delete-message-property key="LOVReturned"/>
				<delete-message-property key="SubPayload"/>
				<delete-message-property key="Tname"/>
				<delete-message-property key="Time"/>
				<delete-message-property key="Element59"/>
				<delete-message-property key="reportCustodyPersonIDList"/>
				<delete-message-property key="DateOfDischarge"/>
				<delete-message-property key="FileData"/>
				<delete-message-property key="AFCARSMainFile"/>
				<delete-message-property key="Exceptions"/>
				<delete-message-property key="ExceptionsName"/>
				<delete-message-property key="AFCARSExceptionFile"/>
				<delete-message-property key="Client"/>
				<delete-message-property key="Clause"/>
				<delete-message-property key="PACRecord"/>
				<delete-message-property key="LOCRecord"/>
				<delete-message-property key="PACRecords"/>
				<delete-message-property key="LOCRecords"/>
				<delete-message-property key="AllEpisodeRRecords"/>
				<delete-message-property key="RecordCount"/>
				<delete-message-property key="GroupedTMVPlacements"/>
				<delete-message-property key="runawayOverLapData"/>
				<delete-message-property key="PersonIDEntryList"/>
				<delete-message-property key="StartDate"/>
				<delete-message-property key="EndDate"/>
				<delete-message-property key="GroupCustodyForEntry"/>
				<delete-message-property key="FirstEverCustody"/>
				<delete-message-property key="CourtOrder"/>	
				<delete-message-property key="scenarioForDischargeDate"/>
				<delete-message-property key="scenarioForDischargeDateArray"/>
				<delete-message-property key="PreviousCustodyLatestAfcars"/>	
				<delete-message-property key="LastAfcars"/>
				<delete-message-property key="PrevCustodyEpisodeList"/>
				<delete-message-property key="AfcarsList"/>
				<delete-message-property key="AfcarsEpisodeList"/>
				<delete-message-property key="FirstAfcarsCustody"/>
				<delete-message-property key="ClientIDList"/>		
				<delete-message-property key="LatestAfcars"/>
				<delete-message-property key="FirstAfcars"/>
				<delete-message-property key="GroupLatestAfcars"/>	
				<delete-message-property key="LastAfcarsPlacement"/>
				<delete-message-property key="LatestHomeRemoval"/>
				<delete-message-property key="Clausefor43"/>
				<delete-message-property key="CasePlan"/>
				<delete-message-property key="PlanCommittee"/>
				<delete-message-property key="FamilyPlan"/>
				<delete-message-property key="Element43"/>
				<delete-message-property key="Clausefor44"/>
				<delete-message-property key="PersonRelationship"/>
				<delete-message-property key="ChildrenCourtOrderIDGrouped"/>
				<delete-message-property key="TPRDetails"/>
				<delete-message-property key="LastAfcarsPlacement"/>
				<delete-message-property key="FormerAdoptiveParent1"/>
				<delete-message-property key="FormerAdoptiveParent2"/>
				<delete-message-property key="BioParent1"/>
				<delete-message-property key="BioParent2"/>
				<delete-message-property key="FosterFamily"/>
				<delete-message-property key="FosterCare"/>
				<delete-message-property key="FosterCarePerson"/>
				<delete-message-property key="Element60"/>
				<delete-message-property key="Element61"/>
				<delete-message-property key="Element62"/>
				<delete-message-property key="Element66"/>
				<delete-message-property key="Element66Month"/>
				<delete-message-property key="Element63"/>
				<delete-message-property key="AllEpisodeRecords"/>
				<delete-message-property key="BioParent1"/>
				<delete-message-property key="BioParent2"/>
				
			</message-properties-transformer>
                <logger message="After Update :: #[payload]" level="INFO" doc:name="Log update result"/>
            </when>
            <otherwise>
            	
                <enricher doc:name="Message Enricher">
                    <flow-ref name="afcars-foster-care-EpisodeList-Sub_Flow" doc:name="afcars-foster-care-EpisodeList-Sub_Flow"/>
                    <enrich source="#[flowVars.AfcarsEpisodeList]" target="#[flowVars.AfcarsEpisodeList]"/>
                    <enrich source="#[flowVars.LatestAfcars]" target="#[flowVars.LatestAfcars]"/>
                    <enrich source="#[flowVars.AfcarsList]" target="#[flowVars.AfcarsList]"/>
                    <enrich source="#[flowVars.ClientIDList]" target="#[flowVars.ClientIDList]"/>
                    <enrich source="#[flowVars.FirstAfcars]" target="#[flowVars.FirstAfcars]"/>
                    <enrich source="#[flowVars.LastAfcars]" target="#[flowVars.LastAfcars]"/>
                    <enrich source="#[flowVars.FirstAfcarsCustody]" target="#[flowVars.FirstAfcarsCustody]"/>
                    <enrich source="#[flowVars.AfcarsCustody]" target="#[flowVars.AfcarsCustody]"/>
                    <enrich source="#[flowVars.GroupLatestAfcars]" target="#[flowVars.GroupLatestAfcars]"/>
                    <enrich source="#[flowVars.GroupAfcarsCustody]" target="#[flowVars.GroupAfcarsCustody]"/>
                </enricher>
                <enricher doc:name="Message Enricher">
                    <flow-ref name="afcars-PlacementRunawayTrial--Sub_Flow" doc:name="afcars-PlacementRunawayTrial--Sub_Flow"/>
                    <enrich source="#[flowVars.FirstPlacementforE]" target="#[flowVars.FirstPlacementforE]"/>
                    <enrich source="#[flowVars.FirstRunaway]" target="#[flowVars.FirstRunaway]"/>
                    <enrich source="#[flowVars.LatestRunaway]" target="#[flowVars.LatestRunaway]"/>
                    <enrich source="#[flowVars.FirstPlacement]" target="#[flowVars.FirstPlacement]"/>
                    <enrich source="#[flowVars.LatestPlacement]" target="#[flowVars.LatestPlacement]"/>
                    <enrich source="#[flowVars.GroupFirstPlacementforE]" target="#[flowVars.GroupFirstPlacementforE]"/>
                    <enrich source="#[flowVars.GroupFirstDFSFosterCarePlacementforE]" target="#[flowVars.GroupFirstDFSFosterCarePlacementforE]"/>
                    <enrich source="#[flowVars.GroupFirstFosterCarePlacementforE]" target="#[flowVars.GroupFirstFosterCarePlacementforE]"/>                                        
                    <enrich source="#[flowVars.GroupFirstRunawayforE]" target="#[flowVars.GroupFirstRunawayforE]"/>
                    <enrich source="#[flowVars.FirstRunawayforE]" target="#[flowVars.FirstRunawayforE]"/>
                    <enrich source="#[flowVars.FirstPRforE]" target="#[flowVars.FirstPRforE]"/>
                    <enrich source="#[flowVars.LatestPlacementArray]" target="#[flowVars.LatestPlacementArray]"/>
                    <enrich source="#[flowVars.LatestPlacementfor23]" target="#[flowVars.LatestPlacementfor23]"/>
                    <enrich source="#[flowVars.LatestPlacementOrTRUfor23]" target="#[flowVars.LatestPlacementOrTRUfor23]"/>
                </enricher>

				        <flow-ref name="afcars-Element24-Sub_Flow" doc:name="afcars-Element24-Sub_Flow"/>
                <flow-ref name="afcars-CareGiverDetails-from-petition-Sub_Flow" doc:name="afcars-CareGiverDetails-from-petition-Sub_Flow"/>
                <flow-ref name="afcars-Element58-Sub_Flow" doc:name="afcars-Element58-Sub_Flow"/>
                <flow-ref name="afcars-Element62-records-Sub_Flow" doc:name="afcars-Element62-records-Sub_Flow"/>
                <flow-ref name="afcars-Element66-records-Sub_Flow" doc:name="afcars-Element66-records-Sub_Flow"/>
                <flow-ref name="afcars-casecounty-Sub_Flow" doc:name="afcars-casecounty-Sub_Flow"/>
                <flow-ref name="afcars-fostercare-LOC-PAC-Sub_Flow" doc:name="afcars-fostercare-LOC-PAC-Sub_Flow"/>
                <flow-ref name="afcars-fostercare-adoption-person-involved-records-Sub_Flow" doc:name="afcars-fostercare-adoption-person-involved-records-Sub_Flow"/>
                <flow-ref name="afcars-fostercare-get-firstPlacement-Sub_Flow" doc:name="afcars-fostercare-get-firstPlacement-Sub_Flow"/>
                <flow-ref name="afcars-foster-care-LatestHomeRemoval" doc:name="afcars-foster-care-LatestHomeRemoval"/>
                <flow-ref name="afcars-fostercare-casePlan-records-Sub_Flow" doc:name="afcars-fostercare-casePlan-records-Sub_Flow"/>
                <flow-ref name="afcars-fostercare-TPR-records-Sub_Flow" doc:name="afcars-fostercare-TPR-records-Sub_Flow"/>
                <flow-ref name="afcars-DYRS-records-Sub_Flow" doc:name="afcars-DYRS-records-Sub_Flow"/>
                <flow-ref name="afcars-FosterSub_Flow" doc:name="afcars-FosterSub_Flow"/>
                <flow-ref name="afcars-VI-E-Eligibility-Sub_Flow" doc:name="afcars-VI-E-Eligibility-Sub_Flow"/>
				
                <flow-ref name="afcars-Element60-records-Sub_Flow" doc:name="afcars-Element60-records-Sub_Flow"/>
                <flow-ref name="afcars-Element61-records-Sub_Flow" doc:name="afcars-Element61-records-Sub_Flow"/>
                
                <flow-ref name="afcars-Element63-records-Sub_Flow" doc:name="afcars-Element63-records-Sub_Flow" doc:description="Invoke flow to get Element 63 Details Medicaid Eligibility for the clients"/>
                <flow-ref name="afcars-fostercare-get-CourtOrder-Sub_Flow" doc:name="afcars-fostercare-get-CourtOrder-Sub_Flow" doc:description="Invoke flow to get Court Orders details"/>
                <flow-ref name="afcars-fostercare-get-ALLAfcarsEpisodes-Sub_Flow" doc:name="afcars-fostercare-get-ALLAfcarsEpisodes-Sub_Flow" doc:description="Invoke Flow to get All AFCARS Episodes details irrespective of the reporting period but before Report end"/>
                <flow-ref name="afcars-foster-care-ALLEpisodeList-Sub_Flow" doc:name="afcars-foster-care-ALLEpisodeList-Sub_Flow" doc:description="Invoke flow to calculate Element 19 and 20"/>
                
                <choice doc:name="Choice : Check if any Valid Records is present" doc:description="Check if any Valid Records is present for the report">
                    <when expression="#[(flowVars.ClientIDList == null) || (flowVars.ClientIDList.size() &lt;= 0) ]">
                        <dw:transform-message doc:name="Transform Message : Prepare Response">
                            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
		Id:flowVars.extractInfo.ParentId,
		"Attachment_Generated__c":  (false as :boolean),
		"Failure_Reason__c": "No Records Extracted"

}]]]></dw:set-payload>
                        </dw:transform-message>
                        <logger message="Before Update :: #[payload]" level="INFO" doc:name="Log Update data"/>
                         <sfdc:update config-ref="Salesforce__Basic_Authentication" type="DEL_Extract__c" doc:name="Salesforce : Update Extract Record" doc:description="Update extract user to notify user about the outcome">
                            <sfdc:objects ref="#[payload]"/>
                        </sfdc:update>
                        <logger message="After Update :: #[payload]" level="INFO" doc:name="Log update result"/>

                    </when>
                    <otherwise>
                        <message-properties-transformer scope="invocation" doc:name="Message Properties : Set Filename and record Count" doc:description="Set AFCARS attachment Filename and record Count">
                            <add-message-property key="RecordCount" value="#[flowVars.ClientIDList.size()]"/>
                            <add-message-property key="filename_afcars_foster" value="#['AFCARSFOSTER_' + server.dateTime.format(&quot;yyyyMMddHHmmss&quot;)]"/>
                        </message-properties-transformer>
<!-- <flow-ref name="backup_Sub_Flow" doc:name="backup_Sub_Flow"/> -->    
                        <dw:transform-message doc:name="Transform Message Elements">
                            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var passwordMap = {
      "0" : "Z",
    "1" : "V",
      "2" : "T",
      "3" : "P",
      "4" : "M",
      "5" : "K",
      "6" : "J",
      "7" : "H",
      "8" : "E",
      "9" : "A"
}

%var CustodianMap = {
	"Age of Majority" : "4",
	"Child Deceased" : "8",
	"Non-Relative" : "5",
	"Other Relative" : "2",
	"Parent" : "1",
	"Adoptive Parents" : "3",
	"Guardian" : "5",
	"Court Rescission Order - No Hearing" : ""	
}
%var Medicaid = { ( (flowVars.Element59 default [[]]) map {   
      ($ as :string) :"1" default "0"
}   )  }

%var MentalRetardationList = ["Downs Syndrome","Hydrocephalus","Mild to moderate developmental delay","Mild to moderate mentally handicapped / retarded - IQ 50-70","Moderate to severe mentally handicapped / retarded - IQ under 50"]

%var VisuallyHearingImpairedList = ["Blindness","Cataracts (infantile, juvenile, presenile)","Congenital anomaly of the eye","Deaf","Hearing impaired","Visually impaired"]

%var PhysicallyDisabledList = ["Cerebral Palsy","Deformed Extremity","Huntington’s Chorea","Missing Extremity","Multiple Sclerosis","Muscular Dystrophy","Myasthenia Gravis","Non-ambulatory","Paraplegic/Quadriplegic","Physically disabled","Poliomyelitis","Rheumatoid Arthritis","Spina  Bifida","Tic disorder"]

%var EmotionallyDisturbedList = ["Adjustment Disorder", "Anorexic/bulimic or other eating disorder", "Anxiety Disorder", "Attention Deficit/Hyperactive Disorder", "Dissociative disorder", "Impulse Control Disorder- Mild to Moderate", "Impulse Control Disorder- Moderate to Severe", "Impulsive behavior-Moderate", "Impulsive behavior-Severe", "Mood Disorder (e.g. Depression, bi-polar)", "Mood Disorder (e.g. Depression, bi-polar)- With suicidal ideation", "Oppositional Defiant Disorder/Conduct Disorder- Mild to Moderate", "Oppositional Defiant Disorder/Conduct Disorder- Moderate to Severe", "Other diagnosed emotional problem", "Personality Disorder (Paranoid/borderline)", "Somatoform Disorder (Hypochondria, etc.)", "Schizophrenia and other Psychotic Disorder"]

%var OtherMedicallyDiagnosesList = ["Asperges", "Autism", "Blood disorder that requires medical attention", "Cancer", "Cleft palate/facial deformity", "Congenital cystic lung", "Congenital heart anomaly", "Crohn's Disease", "Cushing's syndrome", "Cystic Fibrosis", "Diabetes", "Epilepsy/seizure disorders", "Fetal Alcohol Syndrome/Affect", "Heart Disease/Heart murmur (vigorous activity curtailed)", "Hemophilia", "HIV+", "Immunodeficiency", "Kidney disease", "Klinefelter’s syndrome", "Leukemia", "Liver disease", "Lupus", "Migraine", "Prenatal drug exposure/addiction", "Shaken Baby", "Sickle Cell Anemia", "Terminal illness"]

%var PhysicalAbuseList =  ["Abuse or Physical Abuse","Physical Abuse: Alleged or substantiated physical abuse, injury or maltreatment of the child by a person responsible for the child's welfare."]

%var SexualAbuseList = ["Sex trafficking: The child is a victim of sex trafficking at the time of removal","Sexual Abuse: Alleged or substantiated sexual abuse or exploitation of the child by a person who is responsible for the child's welfare."]
	
%var NeglectList = ["Alleged or substantiated failure of parent/caregiver to enroll a child of mandatory school age/provide appropriate home schooling /or special educational training, thus allowing the child or youth to engage in chronic truancy.", "Domestic violence", "Inadequate access to medical services: The child and/or child's family has inadequate resources to access the necessary medical services outside of the child's out-of-home care placement.", "Medical neglect", "Neglect: Alleged or substantiated negligent treatment or maltreatment of the child, including failure to provide adequate food, clothing, shelter, supervision or care by a person who is responsible for the child's welfare.","Dependency","Psychological or emotional abuse","Unavailable mental health services: The child and/or child's family has inadequate resources to access the necessary mental health services outside of the child's out-of-home care placement."]
%var AlcoholAbuseParentList = ["Caretaker's alcohol use: A parent, legal guardian or other caretaker responsible for the child uses alcohol compulsively that is not of a temporary nature."]
%var DrugAbuseParentList = ["Caretaker's drug use: A parent, legal guardian or other caretaker responsible for the child uses drugs compulsively that is not of a temporary nature."] 
%var AlcoholAbuseChildList = ["Child alcohol use"]
%var DrugAbuseChildList = ["Child drug use","Prenatal drug exposure"] 
%var ChildDisabilityList = ["Diagnosed Child Mental Illness - Dependency", "Prenatal alcohol exposure: The child has been identified as prenatally exposed to alcohol, resulting in fetal alcohol spectrum disorders such as fetal alcohol exposure, fetal alcohol effect or fetal alcohol syndrome.","Clinical diagnosis by a qualified professional of a health, behavioral or mental health condition, such as: Intellectual disability, emotional disturbance, learning disability, hearing/speech/sight impairment, physical disability.","Conflict regarding sexual orientation or gender identity/expression: Includes expressed identity or being perceived as lesbian, gay, bisexual, transgender, questioning or queer as well as conflict regarding physical appearance."]
%var ChildBehaviorProblemList = ["Behavior in school and/or community adversely affects socialization, learning, growth and/or moral development. Includes all behavior problems, adjudicated and non-adjudicated status or delinquency offenses and convictions.", "Runaway", "Whereabouts Unknown: The child’s whereabouts are unknown and the title IV-E agency does not consider the child to have run away", "Child is in placement and care responsibility of another public agency upon agreement with DSCYF pursuant to section 472(a)(2)(B) of the Act and on whose behalf title IV-E foster care maintenance payments are made.", "Pre-FACTS Conversion", "Child is in placement and care responsibility of an Indian tribe, tribal organization or consortium with which DSCYF has an agreement and on whose behalf title IV-E foster care maintenance payments are made."]
%var DeathOfParentList = ["Death of caretaker: Existing family stress in caring for the child or an inability to care for the child due to the death of a parent, legal guardian or other caretaker.", "Death of Parent"]
%var IncarcerationofParentList = ["Dependency - Incarceration of Parent", "Incarceration of caretaker: The child's parent, legal guardian or caretaker is temporarily or permanently placed in jail or prison which adversely affects his or her ability to care for the child.", "Parental immigration detainment or deportation: The parent is or was detained or deported by immigration officials."]
%var CaretakersInabilityList = ["Caretakers significant impairment-physical/emotional: A physical or emotional illness or disabling condition of the child's parent, legal guardian or caretaker that adversely limits his or her ability to care for the child.", "Parent/legal guardian/caretaker has cognitive limitations impacting ability to function,which adversely affects ability to care for child.Can have a significantly below-average score on a test of mental ability or intelligence.","Child requested placement"]
%var AbandonmentList = ["Child left alone or with others and parent/legal guardian's identity is unknown. This includes a child left at a “safe haven.” Category does not apply when the identity of the parent(s) or legal guardian(s) is known."]
%var RelinquishmentList = ["Voluntary relinquishment for adoption: The child's parent has voluntarily relinquished the child by assigning the physical and legal custody of the child to the title IV-E agency, in writing, for the purpose of having the child adopted."]
%var InadequateHousingList = ["Homelessness: The child or his or her family has no regular or adequate place to live. This includes living in a car, or on the street, or staying in a homeless or other temporary shelter.", "Inadequate housing: The child's or his or her family's housing is substandard, overcrowded, unsafe or otherwise inadequate which results in it being inappropriate for the child to reside."]

%var ChildBehaviorProblemPlcReasonList = ["Administrative Hold – 24 Hours", "Administrative Hold – 48 Hours", "Administrative Hold – 72 Hours", "Aftercare – Intensive", "Alternative Residential Treatment", "Aftercare – Supervised", "Committed – 7 – 30 Days", "Court Ordered – Committed", "Committed – Indefinite", "Committed – Mandatory", "Committed – Specified", "Committed – Superior Court", "Detained – Family Court", "Detained – Pending Jurisdiction", "Detained – Magistrate Court", "Detained – Non-Secure", "Detained – Other Court", "Detained – Superior Court", "Interstate Compact", "Pre–FACTS Conversion", "Probation – Intensive", "Probation- Supervised", "Aftercare Revocation – Step 1", "Aftercare Revocation – Step 2", "Aftercare Revocation – Step 3", "Transfer within Detention Care", "Transition from Residential Care", "Transfer within Residential Care"]

%function pad(char, times) (char ++ pad(char, times - 1)) when times > 0 otherwise ""
---
flowVars.ClientIDList filter ( flowVars.Client[$][0].PID != null ) map {
      PID:flowVars.Client[$][0].PID ,
      State:p('state.afcarsfoster'),
      ReportEndingDate:flowVars.extractInfo.ReportEndDate as :date as :string {format:"yyyyMM"},

	  LocalFIPSCode: ( flowVars.LOVReturned[("AFCARS_FOSTER_COUNTY-" ++ (flowVars.CaseCountyDetails[$][0].County default ""))][0] default "" ),

      RecordNumber:( ( pad("0",( 12 - ( sizeOf (( 999999999999 - (flowVars.Client[$][0].PID as :number)) as :string ) ))) ++ (999999999999 - (flowVars.Client[$][0].PID as :number)) ) splitBy "") reduce ((val,acc = "") -> acc ++ passwordMap[val]) when ( (flowVars.extractInfo.EncryptPID == true)  and (flowVars.Client[$][0].PID !=null) ) otherwise ( flowVars.Client[$][0].PID as :number as :string {format:"000000000000"}),
      MostRecentPeriodicReview:flowVars.CourtOrder[$][0].StartDate as :date as :string {format:"yyyyMMdd"} default "",
      DOB:flowVars.Client[$][0].DOB as :date as :string {format:"yyyyMMdd"} default "",
      Sex:"1" when flowVars.Client[$][0].Gender == 'Male' otherwise "2" when flowVars.Client[$][0].Gender == 'Female' otherwise "",
      Race_American:"1" when ((flowVars.Client[$][0].RacePrimary default "" contains "American Indian or Alaskan Native") or (flowVars.Client[$][0].RaceSecondary default "" contains "American Indian or Alaskan Native")) otherwise "0",
      Race_Asian:"1" when ((flowVars.Client[$][0].RacePrimary default "" contains "Asian") or (flowVars.Client[$][0].RaceSecondary default "" contains "Asian")) otherwise "0",
      Race_Black:"1" when ((flowVars.Client[$][0].RacePrimary default "" contains "Black or African American") or (flowVars.Client[$][0].RaceSecondary default "" contains "Black or African American")) otherwise "0",
      Race_Native:"1" when ((flowVars.Client[$][0].RacePrimary default "" contains "Native Hawaiian or Other Pacific Islander") or (flowVars.Client[$][0].RaceSecondary default "" contains "Native Hawaiian or Other Pacific Islander")) otherwise "0",
      Race_White:"1" when ((flowVars.Client[$][0].RacePrimary default "" contains "White") or (flowVars.Client[$][0].RaceSecondary default "" contains "White")) otherwise "0",
      Race_Unable:"1" when ((["Unable to Determine","Abandoned","Declined"] contains flowVars.Client[$][0].RacePrimary default "") or (["Unable to Determine","Abandoned","Declined"] contains flowVars.Client[$][0].RaceSecondary default "")) otherwise "0",
      Hispanic:flowVars.LOVReturned[("AFCARS_FOSTER_ETHNICITY-" ++ (flowVars.Client[$][0].Ethnicity default ""))][0] default "",
	  DOB18:flowVars.Client[$][0].DOB as :date + |P18Y| as :string {format:"yyyyMMdd"} default "",
		
      Disability: (flowVars.LOCRecords[$][0].Diagnosed) when (flowVars.LOCRecords[$][0].ID != null) otherwise ( (flowVars.PACRecords[$][0].Diagnosed) when (flowVars.PACRecords[$][0].ID != null) otherwise "" ),
      
	  MentalRetardation : ("1" when ( ( ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].Condition default "") splitBy ";" ) filter (MentalRetardationList contains $)  ) ) > 0 ) or ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].BehaviorEmotional default "") splitBy ";" ) filter (MentalRetardationList contains $)  ) ) > 0 )    ) or ( ( (flowVars.PACRecords[$].Condition default [""])  ) contains "Mental Retardation" ) ) otherwise "0" ) when ((flowVars.LOCRecords[$][0].ID != null) or (flowVars.PACRecords[$][0].ID != null) ) otherwise "",
	  
	  Visually_HearingImpaired : ("1" when ( ( ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].Condition default "") splitBy ";" ) filter (VisuallyHearingImpairedList contains $)  ) ) > 0 ) or ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].BehaviorEmotional default "") splitBy ";" ) filter (VisuallyHearingImpairedList contains $)  ) ) > 0 ) ) or ( ( (flowVars.PACRecords[$].Condition default [""])  ) contains "Visual/Hearing Impairment" ) ) otherwise "0" ) when ((flowVars.LOCRecords[$][0].ID != null) or (flowVars.PACRecords[$][0].ID != null) ) otherwise "",
	  
	  PhysicallyDisabled : ("1" when ( ( ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].Condition default "") splitBy ";" ) filter (PhysicallyDisabledList contains $)  ) ) > 0 ) or ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].BehaviorEmotional default "") splitBy ";" ) filter (PhysicallyDisabledList contains $)  ) ) > 0 ) ) or ( ( (flowVars.PACRecords[$].Condition default [""])  ) contains "Physical Disability" ) ) otherwise "0" ) when ((flowVars.LOCRecords[$][0].ID != null) or (flowVars.PACRecords[$][0].ID != null) ) otherwise "",	  
	  
	  EmotionallyDisturbed : ("1" when ( ( ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].Condition default "") splitBy ";" ) filter (EmotionallyDisturbedList contains $)  ) ) > 0 ) or ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].BehaviorEmotional default "") splitBy ";" ) filter (EmotionallyDisturbedList contains $)  ) ) > 0 ) ) or ( ( (flowVars.PACRecords[$].Condition default [""]) ) contains "Emotional Disturbance" ) ) otherwise "0" ) when ((flowVars.LOCRecords[$][0].ID != null) or (flowVars.PACRecords[$][0].ID != null) ) otherwise "",
	  
	  OtherMedicallyDiagnoses : ("1" when ( ( ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].Condition default "") splitBy ";" ) filter (OtherMedicallyDiagnosesList contains $)  ) ) > 0 ) or ( ( sizeOf ( ( (flowVars.LOCRecords[$][0].BehaviorEmotional default "") splitBy ";" ) filter (OtherMedicallyDiagnosesList contains $)  ) ) > 0 ) ) or ( ( (flowVars.PACRecords[$].Condition default [""])  ) contains "Medically Diagnosed Condition Requiring Special Care" ) ) otherwise "0" ) when ((flowVars.LOCRecords[$][0].ID != null) or (flowVars.PACRecords[$][0].ID != null) ) otherwise "",
	        
      ChildEverAdopted: (flowVars.LOCRecords[$][0].YouthAdopted ) when (flowVars.LOCRecords[$][0].ID != null) otherwise ( (flowVars.PACRecords[$][0].YouthAdopted ) when (flowVars.PACRecords[$][0].ID != null) otherwise "" ),

      AgeofAdoption: (flowVars.LOCRecords[$][0].AdoptionAge default "") when (flowVars.LOCRecords[$][0].ID != null) otherwise ( (flowVars.PACRecords[$][0].AdoptionAge default "") when (flowVars.PACRecords[$][0].ID != null) otherwise "" ),


      FirstRemoval:( ((flowVars.FirstEverPR[$][0].StartDate when ( ( (flowVars.FirstEverPR[$][0].StartDate != null) and (flowVars.FirstEverCustody[$][0].CustodyStartDate == null)  ) or ( (flowVars.FirstEverPR[$][0].StartDate != null) and (flowVars.FirstEverCustody[$][0].CustodyStartDate != null) and  (flowVars.FirstEverPR[$][0].StartDate > flowVars.FirstEverCustody[$][0].CustodyStartDate)) ) otherwise flowVars.FirstEverCustody[$][0].CustodyStartDate ) as :date as :string {format:"yyyyMMdd"} default "" ) ),
      TotalNumberRemovalsfromHome: "1" when ($ == "003t000000DywJBAAZ" or $ == "003t000000DywJCAAZ") otherwise  (flowVars.Element19[$][0].Size when (flowVars.Element19[$][0].Size != null) otherwise "0"),
      
      
      LastDischarged: (flowVars.PrevCustodyEndDate[$][-1].CustodyEndDate as :date as :string {format:"yyyyMMdd"} default "") when ((flowVars.PrevCustodyEndDate[$][-1].CustodyEndDate != "") and (flowVars.PrevCustodyEndDate[$][-1].CustodyEndDate != null) and ((flowVars.Element19[$][0].Size ) != null ) and ( not (flowVars.Element19[$][0].Size == 1 )) and ( not flowVars.Element19[$][0].Size == 0 ) ) otherwise "",//flowVars.LastAfcarsPlacement[$][-1].EndDate 
      
      
      LatestRemoval:flowVars.LatestHomeRemoval[$][0].LatestHomeRemoval default "",
      

    RemovalTransactionDate: (((flowVars.FirstPRforE[$][0].CompletedDate when ((flowVars.FirstPRforE[$][0].StartDate != null) and (flowVars.FirstPRforE[$][0].StartDate >= flowVars.GroupAfcarsCustody[$][-1].CustodyStart)) otherwise flowVars.GroupAfcarsCustody[$][-1].InitialCompletionDate ) as :date as :string {format:"yyyyMMdd"} ) default ""),
	  RemovalTransactionDate2 : (flowVars.GroupAfcarsCustody[$][-1].InitialCompletionDate ) as :date as :string {format:"yyyyMMdd"} default "",

	  PlacementCurrentFosterCare:((( flowVars.LatestPlacementOrTRUfor23[$][0].StartDate ) when ((flowVars.GroupAfcarsCustody[$][-1].CustodyStart as :date) <= (flowVars.LatestPlacementOrTRUfor23[$][0].StartDate as :date)) otherwise (flowVars.GroupAfcarsCustody[$][-1].CustodyStart )) as :date as :string {format:"yyyyMMdd"}) default "",
	  
      PreviousPlacementRemovalEpisode:flowVars.Element24[$][0].Total,
      RemovalforCurrentPlacementEpisode:"2",
      
      
      Placement_Physical_Abuse : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason   default "") splitBy ";") filter ( PhysicalAbuseList contains $ )  ) ) > 0 ) ) otherwise "0",
      
      Placement_Sexual_Abuse : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason   default "") splitBy ";") filter ( SexualAbuseList contains $ )  ) ) > 0 ) ) otherwise "0",
      
Placement_Neglect : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( NeglectList contains $ )  ) ) > 0 ) ) otherwise "0",
Placement_Alcohol_Abuse : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( AlcoholAbuseParentList contains $ )  ) ) > 0 ) ) otherwise "0",
Placement_Drug_Abuse : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( DrugAbuseParentList contains $ )  ) ) > 0 ) ) otherwise "0",
Placement_Alcohol_AbuseC : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( AlcoholAbuseChildList contains $ )  ) ) > 0 ) ) otherwise "0",
Placement_Drug_AbuseC : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( DrugAbuseChildList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_ChildDisability : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( ChildDisabilityList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_ChildBehaviorProblem : "1" when ( ( ( flowVars.GroupFirstFosterCarePlacementforE[$][0].Division == "DFS" ) and ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( ChildBehaviorProblemList contains $ )  ) ) > 0 ) ) or ( ( flowVars.GroupFirstFosterCarePlacementforE[$][0].Division == "DYRS" ) or ( flowVars.GroupFirstFosterCarePlacementforE[$][0].Division == "DPBHS" ) ) ) otherwise "0",

Placement_DeathofParent : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( DeathOfParentList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_IncarcerationofParent : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( IncarcerationofParentList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_CaretakersInability : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( CaretakersInabilityList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_Abandonment : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( AbandonmentList contains $ )  ) ) > 0 ) ) otherwise "0",

Placement_Relinquishment : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( RelinquishmentList contains $ )  ) ) > 0 ) ) otherwise "0",	 
 
Placement_InadequateHousing : "1" when ( ( (sizeOf ( ((flowVars.GroupFirstFosterCarePlacementforE[$][0].InitialPlacementReason default "") splitBy ";") filter ( InadequateHousingList contains $ )  ) ) > 0 ) ) otherwise "0",
                  
	  CurrentPlacementSetting: "7" when ( (flowVars.LatestPlacementOrTRUfor23[$][0].RunawayID != null) or ( (flowVars.LatestPlacementfor23[$][0].EndDate != "") and (flowVars.LatestRunaway[$][0].EndDate == "" ) ) ) 
            otherwise ( "8" when ((flowVars.LatestPlacementOrTRUfor23[$][0].HomePlacement == "Temporary Home Visit" or flowVars.LatestPlacementOrTRUfor23[$][0].HomePlacement == "Trial Reunification")) otherwise ( (flowVars.LatestPlacementfor23[$][0].CurrentPlacementSettingfor41FocusCode) when (flowVars.LatestPlacementfor23[$][0].CurrentPlacementSettingfor41FocusCode != null) otherwise 
			(
				(flowVars.LatestPlacementfor23[$][0].CurrentPlacementSetting41WithFacilityTypeCheckOnly default "" ) when ((flowVars.LatestPlacementfor23[$][0].CurrentPlacementSetting41WithFacilityTypeCheckOnly default "NA") != "NA" ) otherwise (flowVars.LatestPlacementfor23[$][0].CurrentPlacementSettingfor41 default "") 
			)
		)  ),
      
      CurrentPlacementOutofState: "1" when ((flowVars.LatestPlacementfor23[$][0].OutofState == "true") and (flowVars.LatestPlacementfor23[$][0].Division != "DPBHS")) otherwise ( "1" when ( (flowVars.LatestPlacementfor23[$][0].Division == "DPBHS") and ( (flowVars.YRS[$][0].State default "") != "DELAWARE") ) otherwise "2" ) default "",	 	
      
      
      CasePlanGoal:( ( flowVars.LOVReturned[("AFCARS_FOSTER_CASEPLAN-" ++ ( lower (flowVars.Element43[$][0].PrimaryGoal default "")) )][0] default "" ) when (flowVars.LOVReturned[("AFCARS_FOSTER_CASEPLAN-" ++ ( lower (flowVars.Element43[$][0].PrimaryGoal default "")))][0] != null) otherwise ("7" when ( (flowVars.LatestHomeRemoval[$][0].LatestHomeRemoval != null) and ((( ( (flowVars.LatestHomeRemoval[$][0].LatestHomeRemoval as :date {format : "yyyyMMdd"} ) + |P60D| ) ) >= (flowVars.extractInfo.ReportEndDate as :date)) when ((flowVars.extractInfo.ReportEndDate as :date) >= (flowVars.LatestHomeRemoval[$][0].LatestHomeRemoval as :date {format : "yyyyMMdd"} )) otherwise (( ( (flowVars.extractInfo.ReportEndDate as :date) + |P60D| ) ) >= (flowVars.LatestHomeRemoval[$][0].LatestHomeRemoval as :date {format : "yyyyMMdd"} ))) ) otherwise "")),      
      
      PrincipalCaretakerFamilyStructure : ( flowVars.LOVReturned[("AFCARS_FOSTER_FAMILYSTRUCTURE-" ++ (flowVars.GroupFirstDFSFosterCarePlacementforE[$][0].FamilyStructure default ""))][0] default "" ),
      PrincipalCaretaker1:flowVars.GroupFirstDFSFosterCarePlacementforE[$][0].Caregiver1Birthdate as :date as :string {format:"yyyy"} default "",
      PrincipalCaretaker2:flowVars.GroupFirstDFSFosterCarePlacementforE[$][0].Caregiver2Birthdate as :date as :string {format:"yyyy"} default "",
      
      PetitionPrincipalCaretakerFamilyStructure : (flowVars.CareGiverDetails[$][-1].FamilyStructure default ""),	  
	  PetitionPrincipalCaretaker1: (flowVars.CareGiverDetails[$][-1].BirthDate1 default ""),	  
	  PetitionPrincipalCaretaker2: (flowVars.CareGiverDetails[$][-1].BirthDate2 default ""),       
      
      MotherTPR:( flowVars.FormerAdoptiveParent1[$][0].TPR when (flowVars.FormerAdoptiveParent1[$][0].Gender == "Female") 
                                    otherwise ( flowVars.BioParent1[$][0].TPR when (flowVars.BioParent1[$][0].Gender == "Female") 
                                          otherwise (flowVars.FormerAdoptiveParent2[$][0].TPR when (flowVars.FormerAdoptiveParent2[$][0].Gender == "Female") 
                                                otherwise ( flowVars.BioParent2[$][0].TPR when (flowVars.BioParent2[$][0].Gender == "Female" ) 
                                                      otherwise (flowVars.FormerAdoptiveParent1[$][0].TPR when (flowVars.FormerAdoptiveParent1[$][0].TPR != null ) 
                                                            otherwise (flowVars.BioParent1[$][0].TPR when ( flowVars.BioParent1[$][0].TPR != null ) otherwise null)
                                                                              )
                                                                        )
                                                                  )
                                                            )
                                                      ) as :date as :string {format:"yyyyMMdd"}  default "",													  
													  													  
      FathersTPR:( flowVars.FormerAdoptiveParent1[$][0].TPR when (flowVars.FormerAdoptiveParent1[$][0].Gender == "Male") 
                                    otherwise ( flowVars.BioParent1[$][0].TPR when (flowVars.BioParent1[$][0].Gender == "Male") 
                                          otherwise (flowVars.FormerAdoptiveParent2[$][0].TPR when (flowVars.FormerAdoptiveParent2[$][0].Gender == "Male") 
                                                otherwise ( flowVars.BioParent2[$][0].TPR when (flowVars.BioParent2[$][0].Gender == "Male" ) 
                                                      otherwise (flowVars.FormerAdoptiveParent2[$][0].TPR when (flowVars.FormerAdoptiveParent2[$][0].TPR != null ) 
                                                            otherwise (flowVars.BioParent2[$][0].TPR when ( flowVars.BioParent2[$][0].TPR != null ) otherwise null)
                                                                              )
                                                                        )
                                                                  )
                                                            )
                                                      ) as :date as :string {format:"yyyyMMdd"} default "",
                                                      
      FosterFamilyStructure: ( ( (flowVars.FosterFamily[$]) default [] )[0].FamilyStructure default ""),
      
      Priority: ( ( (flowVars.FosterFamily[$]) default [] )[0].Priority default ""),
	  	
      YOBFosterCaretaker1: ( ((flowVars.FosterCarePerson[$]) default [])[0].BirthDate default ""),
	  
      YOBFosterCaretaker2: (((flowVars.FosterCarePerson[$]) default [])[1].BirthDate default ""),
	  		  
      RaceFosterCaretaker1: ((flowVars.FosterCarePerson[$]) default [])[0].Race default "",
				  
      HispanicOriginFosterCaretaker1: ((flowVars.FosterCarePerson[$]) default [])[0].Ethnicity default 0,

      RaceFosterCaretaker2: ((flowVars.FosterCarePerson[$]) default [])[1].Race default 0,
				   
      HispanicOriginFosterCaretaker2 : ((flowVars.FosterCarePerson[$]) default [])[1].Ethnicity default 0,

      DateDischargeFosterCare: (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd as :date as :string {format:"yyyyMMdd"} ) when ( (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != null) and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != "") and ((flowVars.GroupAfcarsCustody[$][-1].CustodyEnd) < (flowVars.extractInfo.ReportEndDate as :date {format : "yyyy-MM-dd"}) ) ) otherwise "",
      
      
      DischargeTransactionDate:((flowVars.Custodian[$][0].CourtOrderCompletedDate as :date as :string {format:"yyyyMMdd"}) when ((flowVars.Custodian[$][0].CourtOrderCompletedDate != null) and (flowVars.Custodian[$][0].CourtOrderCompletedDate != "") and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != null) and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != "") and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != flowVars.GroupLatestAfcars[$][0].EpisodeEndDate) and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd == flowVars.Custodian[$][0].EndDate)) otherwise ""),
      
      //ReasonDischarge: ( flowVars.LOVReturned[("AFCARS_FOSTER_DISCHARGE-" ++ (flowVars.GroupLatestAfcars[$][0].RemovalReason default "") ) ][0] default "" ) when ((flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != null) and (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd != "") and (flowVars.GroupLatestAfcars[$][0].EpisodeEndDate != null) and (flowVars.GroupLatestAfcars[$][0].EpisodeEndDate != "") and ((flowVars.GroupLatestAfcars[$][0].EpisodeEndDate as :date) < (flowVars.extractInfo.ReportEndDate as :date {format : "yyyy-MM-dd"}) ) ) otherwise "",
	  ReasonDischarge : ("3" when (flowVars.Custodian[$][0].OrderType == "Final Order of Adoption") otherwise ("5" when (flowVars.Custodian[$][0].OrderType == "Guardianship") otherwise (CustodianMap[flowVars.Custodian[$][0].Custodian] when (flowVars.GroupAfcarsCustody[$][-1].CustodyEnd == flowVars.Custodian[$][0].EndDate) otherwise "") ) ),
      scenario : (flowVars.scenarioForDischargeDate[$][0].scenario default ""),
      
      TitleIV_EFoster:Medicaid[$] default "0",
      TitleIV_EAdoption: "0",
      IV_A:"1" when (flowVars.Element61[$][0].ID != null) otherwise "0",
      
      TitleIV_D : "1" when ( (sizeOf ( (flowVars.Element62[$] default []) filter ( ($.TransactionType == "Income") and ($.TrustAccount == "CSS")) ) ) > 0 ) otherwise "0",
      
      TitleXIX:"1" when (flowVars.Element63[$][0].ID != null) otherwise "0",
      
      SSI : "1" when ( (sizeOf ( (flowVars.Element62[$] default []) filter ( ($.TransactionType == "Income") and ( ($.TrustAccount == "SSI") or ($.TrustAccount == "SSID") or ($.TrustAccount == "SSA") ) ) ) ) > 0 ) otherwise "0",
      
      NoneoftheAbove: "1" when ( (sizeOf ( (flowVars.Element62[$] default []) filter ( ($.TransactionType == "Income") and  ( ($.TrustAccount != "SSI") or ($.TrustAccount != "SSID") or ($.TrustAccount != "SSA") ) ) ) ) > 0 ) otherwise "0",
      Amount: flowVars.Element66[$] when (flowVars.Element66[$] != null) otherwise "00000"

}]]></dw:set-payload>
                        </dw:transform-message>
                         <dw:transform-message doc:name="Transform Message : Prepare Header and Exceptions" >
                            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Header"><![CDATA[%dw 1.0
%output text/plain schemaPath = "HeaderFFD.ffd"
---
[{
      RecordCount:flowVars.RecordCount as :number as :string {format:"00000000"},
      ReportingEndDate:flowVars.extractInfo.ReportEndDate as :date as :string {format:"YYYYMM"},
      LessOne:flowVars.LessOne as :number as :string {format:"00000000"} default "00000000",
      AgeOne:flowVars.AgeOne as :number as :string {format:"00000000"} default "00000000",
      AgeTwo:flowVars.AgeTwo as :number as :string {format:"00000000"} default "00000000",
      AgeThree:flowVars.AgeThree as :number as :string {format:"00000000"} default "00000000",
      AgeFour:flowVars.AgeFour as :number as :string {format:"00000000"} default "00000000",
      AgeFive:flowVars.AgeFive as :number as :string {format:"00000000"} default "00000000",
      AgeSix:flowVars.AgeSix as :number as :string {format:"00000000"} default "00000000",
      AgeSeven:flowVars.AgeSeven as :number as :string {format:"00000000"} default "00000000",
      AgeEight:flowVars.AgeEight as :number as :string {format:"00000000"} default "00000000",
      AgeNine:flowVars.AgeNine as :number as :string {format:"00000000"} default "00000000",
      AgeTen:flowVars.AgeTen as :number as :string {format:"00000000"} default "00000000",
      AgeEleven:flowVars.AgeEleven as :number as :string {format:"00000000"} default "00000000",
      AgeTwelve:flowVars.AgeTwelve as :number as :string {format:"00000000"} default "00000000",
      AgeThirteen:flowVars.AgeThirteen as :number as :string {format:"00000000"} default "00000000",
      AgeFourteen:flowVars.AgeFourteen as :number as :string {format:"00000000"} default "00000000",
      AgeFifteen:flowVars.AgeFifteen as :number as :string {format:"00000000"} default "00000000",
      AgeSixteen:flowVars.AgeSixteen as :number as :string {format:"00000000"} default "00000000",
      AgeSeventeen:flowVars.AgeSeventeen as :number as :string {format:"00000000"} default "00000000",
      AgeEighteen:flowVars.AgeEighteen as :number as :string {format:"00000000"} default "00000000",
      AgeAbove:flowVars.AgeAbove as :number as :string {format:"00000000"} default "00000000"          
}]]]></dw:set-variable>
                            <dw:set-variable variableName="Exceptions"><![CDATA[%dw 1.0
%output application/csv header= false , escape="<", separator="!"
---
payload map {
      ( Error_AmericanIndianorAlaskaNative:( $.PID ++ "," ++ "" ++ ",Element #8-Child's Race - Unable to Determine:  Race cannot also be Unable to Determine" ++ "\n") ) when ( ($.Race_American == "1") and ($.Race_Unable == "1")) ,
      ( Error_Asian:( $.PID ++ "," ++ "" ++ ",Element #8-Child's Race - Unable to Determine: Race cannot also be Unable to Determine" ++ "\n") ) when ( ($.Race_Asian == "1") and ($.Race_Unable == "1")) ,
      ( Error_BlackOrAfricanAmerican:($.PID ++ "," ++ ""  ++ ",Element #8-Child's Race - Unable to Determine:Race cannot also be Unable to Determine" ++ "\n")) when ( ($.Race_Black == "1") and ($.Race_Unable == "1")) ,
      ( Error_NativeHawaiianOrOtherPacificIslander:($.PID ++ "," ++  "" ++ ",Element #8-Child's Race - Unable to Determine: Race cannot also be Unable to Determine" ++ "\n"))  when ( ($.Race_Native == "1") and ($.Race_Unable == "1")) ,
      ( Error_White:($.PID ++ "," ++ "" ++ ",Element #8-Child's Race - Unable to Determine: Race cannot also be Unable to Determine" ++ "\n")) when ( ($.Race_White == "1") and ($.Race_Unable == "1")) ,
      ( Error_Unable:($.PID ++ "," ++ "" ++ ",Element #8-Child's Race - Unable to Determine: No valid race found" ++ "\n")) when ( ($.Race_White == "0") and ($.Race_Unable == "1")  and ($.Race_Native == "1") and ($.Race_Black == "1") and ($.Race_Asian == "1") and ($.Race_American == "1") ) ,
      ( Error_SpecialNeedsDetermined:($.PID ++ "," ++ "" ++ ",Element 10 - Has this child been clinically diagnosed as having a disability? : No valid disability found" ++ "\n") ) when ( ($.Disability == "1") and ($.MentalRetardation == "0") and ($.Visually_HearingImpaired == "0") and ($.PhysicallyDisabled == "0") and ($.EmotionallyDisturbed == "0") and ($.OtherMedicallyDiagnoses == "0")) ,
      ( Error_FamilyStructure:($.PID ++ "," ++ "" ++ ",Element # 44 - Principal Caretaker Family Structure: Family Structure is null or 5, and Relatives/Participants found" ++ "\n") ) when ( (($.PrincipalCaretakerFamilyStructure == "") or ($.PrincipalCaretakerFamilyStructure == "5")) and (flowVars.PersonRelationship[$][0].ID != null)) ,
      ( Error_FosterFamilyStructure:($.PID ++ "," ++ "" ++ ",Element # 49 - Foster Family Structure(Current DFS Placement in the current episode) - Provider module: Family Structure is null or 5, and Relatives/Participants found" ++ "\n") ) when ( (($.FosterFamilyStructure == "") or ($.FosterFamilyStructure == "5")) and ($.CurrentPlacementSetting == "1" or $.CurrentPlacementSetting == "2" or $.CurrentPlacementSetting == "3")) ,
      ( Error_FosterFamilyStructure:($.PID ++ "," ++ "" ++ ",Element # 49 - Foster Family Structure(Current DFS Placement in the current episode) - Provider module: Family Structure is Single Father/Single Mother, and Relatives/Participants found" ++ "\n") ) when ( (($.FosterFamilyStructure == "3") or ($.FosterFamilyStructure == "4")) and ($.CurrentPlacementSetting == "1" or $.CurrentPlacementSetting == "2" or $.CurrentPlacementSetting == "3")) ,
      ( Error_FosteCaretaker2:($.PID ++ "," ++ "" ++ ",Elements # 51 54 and 55 - Foster Family Structure (Current DFS Placement in the current episode) - Provider module: Family Structure is Single Father/Single Mother and Foster Caretaker#2 found" ++ "\n") ) when ( ((($.FosterFamilyStructure == "3") or ($.FosterFamilyStructure == "4")) and ($.CurrentPlacementSetting == "1" or $.CurrentPlacementSetting == "2" or $.CurrentPlacementSetting == "3") and (($.YOBFosterCaretaker2 != "") or ($.RaceFosterCaretaker2 != "") or (not ($.HispanicOriginFosterCaretaker2 == 0)) ))) ,
      ( Error_FosteCaretaker2:($.PID ++ "," ++ "" ++ ",Elements # 51 54 and 55 - Foster Family Structure (Current DFS Placement in the current episode) - Provider module: Family Structure is Married Couple/Unmarried Couple and Foster Caretaker#2 not found" ++ "\n") ) when ( ((($.FosterFamilyStructure == "1") or ($.FosterFamilyStructure == "2")) and ($.CurrentPlacementSetting == "1" or $.CurrentPlacementSetting == "2" or $.CurrentPlacementSetting == "3") and (($.YOBFosterCaretaker2 == "") or ($.RaceFosterCaretaker2 == "") or ($.HispanicOriginFosterCaretaker2 == ""))))
}]]></dw:set-variable>
                        </dw:transform-message>
                        <enricher   doc:name="Message Enricher">
                            <flow-ref name="afcars-foster-care-exeption-Sub_Flow" doc:name="afcars-foster-care-exeption-Sub_Flow"/>
                            <enrich source="#[payload]" target="#[flowVars.ExceptionsResult]"/>
                            <enrich source="#[flowVars.AFCARSExceptionFile]" target="#[flowVars.ExceptionFile]"/>
                        </enricher>
                        <enricher   doc:name="Message Enricher">
                            <flow-ref name="afcars-fostercare-createFile-Sub_Flow" doc:name="afcars-fostercare-createFile-Sub_Flow"/>
                            <enrich source="#[payload]" target="#[flowVars.csvAttachmentResult]"/>
                            <enrich source="#[flowVars.AFCARSMainFile]" target="#[flowVars.MainFile]"/>
                        </enricher>
                        
                        <dw:transform-message doc:name="Transform Message : Prepare Response">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[{
		Id:flowVars.extractInfo.ParentId,
		"Attachment_Generated__c": (true as :boolean ) when ( flowVars.MainFile[0].Success == true or flowVars.ExceptionFile[0].Success == true) otherwise (false as :boolean),
		"Failure_Reason__c": flowVars.MainFile[0].Failure ++ ( ("\n" ++ flowVars.ExceptionFile[0].Failure) when (flowVars.ExceptionFile[0].Failure != "") otherwise "") default ""

}]]]></dw:set-payload>
                </dw:transform-message>
                        <logger message="Before Update :: #[payload]" level="INFO" doc:name="Log Update Data"/>
                    <sfdc:update config-ref="Salesforce__Basic_Authentication" type="DEL_Extract__c" doc:name="Salesforce : Update Extract Record">
                        <sfdc:objects ref="#[payload]"/>
                    </sfdc:update>
                    <logger message="After Update :: #[payload]" level="INFO" doc:name="Log Update result"/>         
                
                        
                    </otherwise>
                </choice>
            </otherwise>
        </choice>
        <exception-strategy ref="Federal-Exception-Strategy" doc:name="Reference Exception Strategy"/>



    </flow>

    <sub-flow name="afcars-fostercare-createFile-Sub_Flow" doc:description="Flow to create Fixed width AFCARS Foster Care file
">
       <!--  <logger message="#[payload]" level="INFO" doc:name="Logger"/> -->
           <dw:transform-message  doc:name="Transform Message : Generate File" >
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map ((payload01 , indexOfPayload01) -> {
      State: payload01.State,
      ReportEndingDate: payload01.ReportEndingDate,
      LocalFIPSCode: payload01.LocalFIPSCode,
      RecordNumber: payload01.RecordNumber,
      MostRecentPeriodicReview: payload01.MostRecentPeriodicReview,
      DOB: payload01.DOB,
      Sex: payload01.Sex,
      Race_American: payload01.Race_American,
      Race_Asian: payload01.Race_Asian,
      Race_Black: payload01.Race_Black,
      Race_Native: payload01.Race_Native,
      Race_White: payload01.Race_White,
      Race_Unable: payload01.Race_Unable,
      Hispanic: payload01.Hispanic,
      Disability: "2" when ( (payload01.MentalRetardation == "0") and (payload01.Visually_HearingImpaired == "0") and (payload01.PhysicallyDisabled == "0") and (payload01.EmotionallyDisturbed == "0") and (payload01.OtherMedicallyDiagnoses == "0") ) otherwise payload01.Disability,
      MentalRetardation: payload01.MentalRetardation,
      Visually_HearingImpaired: payload01.Visually_HearingImpaired,
      PhysicallyDisabled: payload01.PhysicallyDisabled,
      EmotionallyDisturbed: payload01.EmotionallyDisturbed,
      OtherMedicallyDiagnoses: payload01.OtherMedicallyDiagnoses,
      ChildEverAdopted: payload01.ChildEverAdopted,
      AgeofAdoption: 0 when (payload01.ChildEverAdopted == "2") otherwise ("5" when (payload01.ChildEverAdopted == "3") otherwise (" " when (((payload01.AgeofAdoption == "5") or (payload01.AgeofAdoption == "0")) and (payload01.ChildEverAdopted == "1")) otherwise payload01.AgeofAdoption)),
      FirstRemoval: payload01.FirstRemoval,
      TotalNumberRemovalsfromHome: payload01.TotalNumberRemovalsfromHome,
      LastDischarged: payload01.LastDischarged,
      LatestRemoval: (payload01.FirstRemoval) when (payload01.TotalNumberRemovalsfromHome == 1) otherwise (payload01.LatestRemoval),
      RemovalTransactionDate: (payload01.RemovalTransactionDate2) when (payload01.TotalNumberRemovalsfromHome == 1) otherwise (payload01.RemovalTransactionDate),
      PlacementCurrentFosterCare: payload01.PlacementCurrentFosterCare,
      PreviousPlacementRemovalEpisode: payload01.PreviousPlacementRemovalEpisode,
      RemovalforCurrentPlacementEpisode: payload01.RemovalforCurrentPlacementEpisode,
      Placement_Physical_Abuse: payload01.Placement_Physical_Abuse,
      Placement_Sexual_Abuse: payload01.Placement_Sexual_Abuse,
      Placement_Neglect: payload01.Placement_Neglect,
      Placement_Alcohol_Abuse: payload01.Placement_Alcohol_Abuse,
      Placement_Drug_Abuse: payload01.Placement_Drug_Abuse,
      Placement_Alcohol_AbuseC: payload01.Placement_Alcohol_AbuseC,
      Placement_Drug_AbuseC: payload01.Placement_Drug_AbuseC,
      Placement_ChildDisability: payload01.Placement_ChildDisability,
      Placement_ChildBehaviorProblem: payload01.Placement_ChildBehaviorProblem,
      Placement_DeathofParent: payload01.Placement_DeathofParent,
      Placement_IncarcerationofParent: payload01.Placement_IncarcerationofParent,
      Placement_CaretakersInability: payload01.Placement_CaretakersInability,
      Placement_Abandonment: payload01.Placement_Abandonment,
      Placement_Relinquishment: payload01.Placement_Relinquishment,
      Placement_InadequateHousing: payload01.Placement_InadequateHousing,
      CurrentPlacementSetting: payload01.CurrentPlacementSetting,
      CurrentPlacementOutofState: payload01.CurrentPlacementOutofState,
      CasePlanGoal: payload01.CasePlanGoal,
      PrincipalCaretakerFamilyStructure: payload01.PrincipalCaretakerFamilyStructure,
      PrincipalCaretaker1: payload01.PrincipalCaretaker1,
      PrincipalCaretaker2: payload01.PrincipalCaretaker2,
      PetitionPrincipalCaretakerFamilyStructure: payload01.PetitionPrincipalCaretakerFamilyStructure,
      PetitionPrincipalCaretaker1: payload01.PetitionPrincipalCaretaker1,
      PetitionPrincipalCaretaker2: payload01.PetitionPrincipalCaretaker2,
      MotherTPR: payload01.MotherTPR,
      FathersTPR: payload01.FathersTPR,
      Priority: payload01.Priority,      
      FosterFamilyStructure: payload01.FosterFamilyStructure when (payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or 	payload01.CurrentPlacementSetting == "3" ) otherwise "0",
	  YOBFosterCaretaker1: payload01.YOBFosterCaretaker1 when (payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3" or payload01.CurrentPlacementSetting == "6") otherwise "",
	  YOBFosterCaretaker2: (payload01.YOBFosterCaretaker2 when ((payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3") and (payload01.FosterFamilyStructure != "3" and payload01.FosterFamilyStructure != "4") ) otherwise "") ,
	  RaceFosterCaretaker1: payload01.RaceFosterCaretaker1 when (payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3" or payload01.CurrentPlacementSetting == "6") otherwise "",
	  HispanicOriginFosterCaretaker1: payload01.HispanicOriginFosterCaretaker1 when (payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3" ) otherwise "0",
	  RaceFosterCaretaker2: (payload01.RaceFosterCaretaker2 when ((payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3") and (payload01.FosterFamilyStructure != "3" and payload01.FosterFamilyStructure != "4") ) otherwise 0),
	  HispanicOriginFosterCaretaker2: (payload01.HispanicOriginFosterCaretaker2 when ((payload01.CurrentPlacementSetting == "1" or payload01.CurrentPlacementSetting == "2" or payload01.CurrentPlacementSetting == "3") and (payload01.FosterFamilyStructure != "3" and payload01.FosterFamilyStructure != "4"))  otherwise "0"),
      DateDischargeFosterCare: payload01.DateDischargeFosterCare when (payload01.scenario == "1" or payload01.scenario == "2" or payload01.scenario == "3") otherwise (payload01.DOB18 as :date as :string {format: "yyyyMMdd"} )  when (payload01.scenario == "4") otherwise "",
      DischargeTransactionDate: payload01.DischargeTransactionDate when (payload01.scenario == "1" or payload01.scenario == "2" or payload01.scenario == "3") otherwise (payload01.DOB18 as :date as :string {format: "yyyyMMdd"} ) when (payload01.scenario == "4") otherwise "",
      ReasonDischarge: ("4" when (payload01.scenario == "4") otherwise (payload01.ReasonDischarge)  ),
      TitleIV_EFoster: payload01.TitleIV_EFoster,
      TitleIV_EAdoption: payload01.TitleIV_EAdoption,
      IV_A: payload01.IV_A,
      TitleIV_D: payload01.TitleIV_D,
      TitleXIX: payload01.TitleXIX,
      SSI: payload01.SSI,
      NoneoftheAbove: "0" when ((payload01.TitleIV_EFoster == "1") or (payload01.TitleIV_EAdoption == "1") or (payload01.IV_A == "1") or (payload01.TitleIV_D == "1") or (payload01.SSI == "1")) otherwise "1",
      Amount: payload01.Amount
})]]></dw:set-payload>
                </dw:transform-message>
				
<dw:transform-message  doc:name="Transform Message : Generate Final File" >
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output text/plain schemaPath="afcarsFosterFFD.ffd"
---
payload map ((payload01 , indexOfPayload01) -> {
      State: payload01.State,
      ReportEndingDate: payload01.ReportEndingDate,
      LocalFIPSCode: payload01.LocalFIPSCode,
      RecordNumber: payload01.RecordNumber,
      MostRecentPeriodicReview: payload01.MostRecentPeriodicReview,
      DOB: payload01.DOB,
      Sex: payload01.Sex,
      Race_American: payload01.Race_American,
      Race_Asian: payload01.Race_Asian,
      Race_Black: payload01.Race_Black,
      Race_Native: payload01.Race_Native,
      Race_White: payload01.Race_White,
      Race_Unable: payload01.Race_Unable,
      Hispanic: payload01.Hispanic,
      Disability: payload01.Disability,
      MentalRetardation: payload01.MentalRetardation,
      Visually_HearingImpaired: payload01.Visually_HearingImpaired,
      PhysicallyDisabled: payload01.PhysicallyDisabled,
      EmotionallyDisturbed: payload01.EmotionallyDisturbed,
      OtherMedicallyDiagnoses: payload01.OtherMedicallyDiagnoses,
      ChildEverAdopted: payload01.ChildEverAdopted,
      AgeofAdoption: payload01.AgeofAdoption,
      FirstRemoval: payload01.FirstRemoval,
      TotalNumberRemovalsfromHome: payload01.TotalNumberRemovalsfromHome,
      LastDischarged: payload01.LastDischarged,
      LatestRemoval: payload01.LatestRemoval,
      RemovalTransactionDate: payload01.RemovalTransactionDate,
      PlacementCurrentFosterCare: payload01.PlacementCurrentFosterCare,
      PreviousPlacementRemovalEpisode: payload01.PreviousPlacementRemovalEpisode,
      RemovalforCurrentPlacementEpisode: payload01.RemovalforCurrentPlacementEpisode,
      Placement_Physical_Abuse: payload01.Placement_Physical_Abuse,
      Placement_Sexual_Abuse: payload01.Placement_Sexual_Abuse,
      Placement_Neglect: payload01.Placement_Neglect,
      Placement_Alcohol_Abuse: payload01.Placement_Alcohol_Abuse,
      Placement_Drug_Abuse: payload01.Placement_Drug_Abuse,
      Placement_Alcohol_AbuseC: payload01.Placement_Alcohol_AbuseC,
      Placement_Drug_AbuseC: payload01.Placement_Drug_AbuseC,
      Placement_ChildDisability: payload01.Placement_ChildDisability,
      Placement_ChildBehaviorProblem: payload01.Placement_ChildBehaviorProblem,
      Placement_DeathofParent: payload01.Placement_DeathofParent,
      Placement_IncarcerationofParent: payload01.Placement_IncarcerationofParent,
      Placement_CaretakersInability: payload01.Placement_CaretakersInability,
      Placement_Abandonment: payload01.Placement_Abandonment,
      Placement_Relinquishment: payload01.Placement_Relinquishment,
      Placement_InadequateHousing: payload01.Placement_InadequateHousing,
      CurrentPlacementSetting: payload01.CurrentPlacementSetting,
      CurrentPlacementOutofState: payload01.CurrentPlacementOutofState,
      CasePlanGoal: payload01.CasePlanGoal,
      PrincipalCaretakerFamilyStructure: payload01.PrincipalCaretakerFamilyStructure when ( payload01.PrincipalCaretakerFamilyStructure != "") otherwise payload01.PetitionPrincipalCaretakerFamilyStructure,
      PrincipalCaretaker1: payload01.PrincipalCaretaker1 when ( payload01.PrincipalCaretaker1 != "") otherwise payload01.PetitionPrincipalCaretaker1,
      PrincipalCaretaker2: payload01.PrincipalCaretaker2 when ( payload01.PrincipalCaretaker2 != "") otherwise payload01.PetitionPrincipalCaretaker2,
      MotherTPR: payload01.MotherTPR,
      FathersTPR: payload01.FathersTPR,      
      FosterFamilyStructure: payload01.FosterFamilyStructure,
      YOBFosterCaretaker1: payload01.YOBFosterCaretaker1,
      YOBFosterCaretaker2: payload01.YOBFosterCaretaker2,
      RaceFosterCaretaker1: payload01.RaceFosterCaretaker1,
      HispanicOriginFosterCaretaker1: 0 when (payload01.FosterFamilyStructure == "0") otherwise payload01.HispanicOriginFosterCaretaker1,
      RaceFosterCaretaker2: payload01.RaceFosterCaretaker2,
      HispanicOriginFosterCaretaker2: 0 when (payload01.FosterFamilyStructure == "0") otherwise payload01.HispanicOriginFosterCaretaker2,
      DateDischargeFosterCare: payload01.DateDischargeFosterCare,
      DischargeTransactionDate: payload01.DischargeTransactionDate when (payload01.DateDischargeFosterCare != "" and payload01.DateDischargeFosterCare != null) otherwise "",
      ReasonDischarge: payload01.ReasonDischarge when (payload01.DateDischargeFosterCare != "" and payload01.DateDischargeFosterCare != null) otherwise 0,
      TitleIV_EFoster: payload01.TitleIV_EFoster,
      TitleIV_EAdoption: payload01.TitleIV_EAdoption,
      IV_A: payload01.IV_A,
      TitleIV_D: payload01.TitleIV_D,
      TitleXIX: payload01.TitleXIX,
      SSI: payload01.SSI,
      NoneoftheAbove: payload01.NoneoftheAbove,
      Amount: payload01.Amount
})]]></dw:set-payload>
                </dw:transform-message> 
                   
        <object-to-string-transformer mimeType="text/plain" doc:name="Object to String: Consume Stream"/>
        <enricher source="#[payload]" target="#[flowVars.Header]" doc:name="Message Enricher">
            <flow-ref name="afcars-foster-careSub_Flow" doc:name="afcars-foster-careSub_Flow"/>
        </enricher>
        <set-payload value="#[('@' +'\n' + flowVars.Header +  '\n' + payload)]" doc:name="Set Payload with Header and Report Data"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.extractInfo.RunForPID != 'No' and  flowVars.extractInfo.RunForPID != '']">
                <logger level="INFO" doc:name="Logger" message="#[payload]"/>
            </when>
            <otherwise>
                <set-payload value="#[payload.split(&quot;\n&quot;)]" doc:name="Split Payload into Lines"/>
                <dw:transform-message doc:name="Transform Message : Filter Blank Lines">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload filter (((sizeOf $) as :string ) > "0")) joinBy "\n"]]></dw:set-payload>
                </dw:transform-message>
            </otherwise>
        </choice>

                <string-to-byte-array-transformer doc:name="String to Byte Array"/>
        <message-properties-transformer doc:name="Message Properties : Store File data" overwrite="true" scope="invocation">
            <add-message-property key="FileData" value="#[payload]"/>
        </message-properties-transformer>

                <!--<dw:transform-message doc:name="Transform Message : Create Attachment Data">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

[{
      ParentId: flowVars.extractInfo.ParentId, 
      Name: "AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".txt" ,
      Description: 'Afcars Extract',
      Body: flowVars.FileData
      }
] ]]></dw:set-payload>
                </dw:transform-message>
         <sfdc:create config-ref="Salesforce__Basic_Authentication_dev" type="Attachment" doc:name="Salesforce Attach FFD" doc:description="Attach Fixed width report file to the extract record">
              <sfdc:objects ref="#[payload]"/>
         </sfdc:create>-->
		 <logger message="Uploading the attachment" level="INFO" doc:name="Logger"/>
<dw:transform-message doc:name="Transform Message : Prepare Attachment payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[
       {
             ContentLocation: "S", 
             Origin : "C",
             OwnerId : "",
             PathOnClient : "AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".txt"  ,
             Title : "AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".txt",
             VersionData : flowVars.FileData
       }
] ]]></dw:set-payload>
        </dw:transform-message>
        <sfdc:create config-ref="Salesforce__Basic_Authentication" type="ContentVersion" doc:name="Salesforce : Create Standard Attachment" doc:description="Create Standard Attachment">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
             <logger message="#[payload]" level="INFO" doc:name="Logger"/>
             <sfdc:query config-ref="Salesforce__Basic_Authentication" query="SELECT Id,ContentDocumentId,VersionData FROM ContentVersion WHERE Id = '#[payload[0].Id]'" doc:name="Salesforce"/>
             <dw:transform-message doc:name="Transform Message">
                    <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
             </dw:transform-message>
             <dw:transform-message doc:name="Transform Message : Prepare Attachment payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[
       {
             ShareType: "V", 
             Visibility : "InternalUsers",
             ContentDocumentId : payload[0].ContentDocumentId,
             LinkedEntityId : flowVars.extractInfo.ParentId
       }
] ]]></dw:set-payload>
        </dw:transform-message>
        <sfdc:create config-ref="Salesforce__Basic_Authentication" type="ContentDocumentLink" doc:name="Salesforce : Create Standard Attachment" doc:description="Create Standard Attachment">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>

        <logger message="After Attachment FFS : #[payload]" level="INFO" doc:name="Log Attachment Response "/>
        <dw:transform-message doc:name="Transform Message : Prepare Payload for Custom Attachment">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AFCARSMainFile"><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Success:$.success,
	Failure:"Federal Report File could not be attached." when $.success == false otherwise ""
}]]></dw:set-variable>

        </dw:transform-message>
            
    </sub-flow>
    <sub-flow name="afcars-foster-careSub_Flow">
        <set-payload value="#[flowVars.Header]" doc:name="Set Payload"/>
        <object-to-string-transformer mimeType="text/plain" doc:name="Object to String"/>
    </sub-flow>
    <sub-flow name="afcars-foster-care-exeption-Sub_Flow" doc:description="Flow to create Exception CSV File for the corresponding AFCARS Foster Care file
">
        
        <set-variable variableName="Exceptions" value="#[&quot;Client PID,Permanency Case ID,Error Message\n&quot; + flowVars.Exceptions]" doc:name="Variable : Set Exception details"/>
        <!-- <set-variable variableName="Exceptions" value="#[&quot;Pre-Adoptive Client PID,Permanency Case ID,Error Message\n&quot; + flowVars.Exceptions]" doc:name="Variable"/> -->
        <set-variable variableName="Exceptions" value="#[flowVars.Exceptions.split(&quot;!&quot;)]" doc:name="Variable Split Exception details"/>
        <dw:transform-message doc:name="Transform Message : Filter blank lines out of Exception details" >
            <dw:input-payload mimeType="application/java"/>
            <dw:set-variable variableName="Exceptions"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Exceptions filter (((sizeOf $) as :string ) > "0")) joinBy ""]]></dw:set-variable>
        </dw:transform-message>
        <set-payload value="#[flowVars.Exceptions.split(&quot;\n&quot;)]" doc:name="Set Payload with splitted Exceptin details"/>
        <dw:transform-message doc:name="Transform Message : Remove unwanted lines from payload ">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload filter (((sizeOf $) as :string ) > "1")) joinBy "\n"]]></dw:set-payload>
        </dw:transform-message>
        <set-payload value="#[payload.replaceAll(&quot;&lt;&quot;,&quot;&quot;)]" doc:name="Set Payload : Remove unwanted charcters"/>
        <string-to-byte-array-transformer doc:name="String to Byte Array"/>
        <message-properties-transformer scope="invocation" doc:name="Message Properties : Set Filename">
            <add-message-property key="ExceptionsName" value="#['ExceptionLog_AFCARSFOSTER_' + server.dateTime.format(&quot;yyyyMMddHHmmss&quot;)]"/>
            <add-message-property key="Exceptions" value="#[payload]"/>
        </message-properties-transformer>
        
        <!--<dw:transform-message doc:name="Transform Message : Create Attachment Data">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

[{
      ParentId: flowVars.extractInfo.ParentId, 
      Name: "ExceptionLog_AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".csv" ,
      Description: 'Afcars Extract',
      Body: flowVars.Exceptions
      }
] ]]></dw:set-payload>
        </dw:transform-message>
        <sfdc:create config-ref="Salesforce__Basic_Authentication_dev" type="Attachment" doc:name="Salesforce Attach CSV" doc:description="Attach CSV report to the extract record">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>-->
		<logger message="Uploading the attachment" level="INFO" doc:name="Logger"/>
		<dw:transform-message doc:name="Transform Message : Prepare Attachment payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[
	{
		ContentLocation: "S", 
		Origin : "C",
		OwnerId : "",
		PathOnClient : "ExceptionLog_AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".csv" ,
		Title : "ExceptionLog_AFCARSFOSTER_" ++ (now >> "America/New_York") as :string {format:"yyyyMMddHHmmss"} ++ ".csv",
		VersionData : flowVars.Exceptions
	}
] ]]></dw:set-payload>
        </dw:transform-message>
        <sfdc:create config-ref="Salesforce__Basic_Authentication" type="ContentVersion" doc:name="Salesforce : Create Standard Attachment" doc:description="Create Standard Attachment">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
		<logger message="#[payload]" level="INFO" doc:name="Logger"/>
		<sfdc:query config-ref="Salesforce__Basic_Authentication" query="SELECT Id,ContentDocumentId,VersionData FROM ContentVersion WHERE Id = '#[payload[0].Id]'" doc:name="Salesforce"/>
		<dw:transform-message doc:name="Transform Message : Prepare Attachment payload">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
[
	{
		ShareType: "V", 
		Visibility : "InternalUsers",
		ContentDocumentId : payload[0].ContentDocumentId,
		LinkedEntityId : flowVars.extractInfo.ParentId
	}
] ]]></dw:set-payload>
        </dw:transform-message>
        <sfdc:create config-ref="Salesforce__Basic_Authentication" type="ContentDocumentLink" doc:name="Salesforce : Create Standard Attachment" doc:description="Create Standard Attachment">
            <sfdc:objects ref="#[payload]"/>
        </sfdc:create>
        <logger message="After Attachment CSV : #[payload]" level="INFO" doc:name="Log Exception Attachment response"/>
        <dw:transform-message doc:name="Transform Message : Prepare Payload for Custom Attachment">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AFCARSExceptionFile"><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Success:$.success,
	Failure:"Exception Report File could not be generated." when $.success == false otherwise ""
}]]></dw:set-variable>

        </dw:transform-message>

    </sub-flow>
    
    <sub-flow name="afcars-fostercare-adoption-person-involved-records-Sub_Flow" doc:description="Flow to get Adoption person involved details">
        <logger message="Get adoption person involved details" level="INFO" doc:name="Logger : Adoption person involved details"/>
        <foreach collection="#[flowVars.ClientIDList]" doc:name="For Each : Iterate over 150 records at a time" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>

            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Birthdate,DEL_Gender__c,DEL_PID__c,DEL_Race_Primary__c,DEL_Race_Secondary__c,DEL_Ethnicity__c from Contact where Id in (#[payload])" doc:name="Salesforce : Query Person Details"/>
            <dw:transform-message doc:name="Transform Person Details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      PersonID:$.Id,
      PID:$.DEL_PID__c default '',
      Gender:$.DEL_Gender__c,
      RacePrimary:$.DEL_Race_Primary__c,
      RaceSecondary:$.DEL_Race_Secondary__c,
      Ethnicity:$.DEL_Ethnicity__c,
      DOB:$.Birthdate,
      Age: abs ( ((flowVars.extractInfo.ReportEndDate as :date) - $.Birthdate).years ) default "0"
      } filter ($.PID != '')]]></dw:set-payload>

            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message : Add Person Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Client"><![CDATA[%dw 1.0
%output application/java

---
(flowVars.Client default {}) ++ ((payload groupBy $.PersonID) default {})]]></dw:set-variable>
            </dw:transform-message>
            <!-- <logger level="INFO" doc:name="Logger" message="Client Query Done #[payload.size()] "/> -->
            <!-- <logger message="Client ID::#[flowVars.ClientIDList.size()]" level="INFO" doc:name="Logger"/> -->
            <foreach collection="#[payload]" doc:name="For Each Person">
                <message-properties-transformer scope="invocation" doc:name="Message Properties : Get Age details for person">
                    <add-message-property key="LessOne" value="#[payload.Age == 0 ? (flowVars.LessOne != null ?flowVars.LessOne + 1:1) :flowVars.LessOne]"/>
                    <add-message-property key="AgeOne" value="#[payload.Age == 1 ? (flowVars.AgeOne != null ?flowVars.AgeOne + 1:1) :flowVars.AgeOne]"/>
                    <add-message-property key="AgeTwo" value="#[payload.Age == 2 ? (flowVars.AgeTwo != null ?flowVars.AgeTwo + 1:1) :flowVars.AgeTwo]"/>
                    <add-message-property key="AgeThree" value="#[payload.Age == 3 ? (flowVars.AgeThree != null ?flowVars.AgeThree + 1:1) :flowVars.AgeThree]"/>
                    <add-message-property key="AgeFour" value="#[payload.Age == 4 ? (flowVars.AgeFour != null ?flowVars.AgeFour + 1:1) :flowVars.AgeFour]"/>
                    <add-message-property key="AgeFive" value="#[payload.Age == 5 ? (flowVars.AgeFive != null ?flowVars.AgeFive + 1:1) :flowVars.AgeFive]"/>
                    <add-message-property key="AgeSix" value="#[payload.Age == 6 ? (flowVars.AgeSix != null ?flowVars.AgeSix + 1:1) :flowVars.AgeSix]"/>
                    <add-message-property key="AgeSeven" value="#[payload.Age == 7 ? (flowVars.AgeSeven != null ?flowVars.AgeSeven + 1:1) :flowVars.AgeSeven]"/>
                    <add-message-property key="AgeEight" value="#[payload.Age == 8 ? (flowVars.AgeEight != null ?flowVars.AgeEight + 1:1) :flowVars.AgeEight]"/>
                    <add-message-property key="AgeNine" value="#[payload.Age == 9 ? (flowVars.AgeNine != null ?flowVars.AgeNine + 1:1) :flowVars.AgeNine]"/>
                    <add-message-property key="AgeTen" value="#[payload.Age == 10 ? (flowVars.AgeTen != null ?flowVars.AgeTen + 1:1) :flowVars.AgeTen]"/>
                    <add-message-property key="AgeEleven" value="#[payload.Age == 11 ? (flowVars.AgeEleven != null ?flowVars.AgeEleven + 1:1) :flowVars.AgeEleven]"/>
                    <add-message-property key="AgeTwelve" value="#[payload.Age == 12 ? (flowVars.AgeTwelve != null ?flowVars.AgeTwelve + 1:1) :flowVars.AgeTwelve]"/>
                    <add-message-property key="AgeThirteen" value="#[payload.Age == 13 ? (flowVars.AgeThirteen != null ?flowVars.AgeThirteen + 1:1) :flowVars.AgeThirteen]"/>
                    <add-message-property key="AgeFourteen" value="#[payload.Age == 14 ? (flowVars.AgeFourteen != null ?flowVars.AgeFourteen + 1:1) :flowVars.AgeFourteen]"/>
                    <add-message-property key="AgeFifteen" value="#[payload.Age == 15 ? (flowVars.AgeFifteen != null ?flowVars.AgeFifteen + 1:1) :flowVars.AgeFifteen]"/>
                    <add-message-property key="AgeSixteen" value="#[payload.Age == 16 ? (flowVars.AgeSixteen != null ?flowVars.AgeSixteen + 1:1) :flowVars.AgeSixteen]"/>
                    <add-message-property key="AgeSeventeen" value="#[payload.Age == 17 ? (flowVars.AgeSeventeen != null ?flowVars.AgeSeventeen + 1:1) :flowVars.AgeSeventeen]"/>
                    <add-message-property key="AgeEighteen" value="#[payload.Age == 18 ? (flowVars.AgeEighteen != null ?flowVars.AgeEighteen+ 1:1) :flowVars.AgeEighteen]"/>
                    <add-message-property key="AgeAbove" value="#[payload.Age &gt; 18 ? (flowVars.AgeAbove != null ?flowVars.AgeAbove + 1:1) :flowVars.AgeAbove]"/>
                </message-properties-transformer>
            </foreach>

           
        </foreach>

    </sub-flow>
    <sub-flow name="afcars-fostercare-LOC-PAC-Sub_Flow" doc:description="Flow to get LOC and PAC related information for elements 10-17">
        <logger message="Get LOC and PAC details for elements 10 to 17" level="INFO" doc:name="Logger : LOC and PAC details"/>
        <foreach collection="#[flowVars.ClientIDList]" doc:name="For Each : Iterate over 150 records at a time" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Clause"><![CDATA[%dw 1.0
%output application/java
---
( payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-variable>

            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Has_the_child_been_diagnosed__c, Condition_Category__c, PAC_ID__r.Youth_s_age_when_adoption_was_legalized__c, PAC_ID__r.Has_youth_ever_been_adopted__c, PAC_ID__r.Person__c, PAC_ID__r.Completed_Date__c  from DEL_Clinically_Diagnosed_Condition__c where PAC_ID__r.Status__c = 'Completed' AND PAC_ID__r.Completed_Date__c !=null AND PAC_ID__r.Completed_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] AND PAC_ID__r.Person__c in (#[flowVars.Clause]) Order By PAC_ID__r.Completed_Date__c desc" doc:name="Salesforce : Get PAC Records before Report End Date"/>
            <dw:transform-message doc:name="Transform Message : PAC data">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="PACRecord"><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id,
      PersonID:$.PAC_ID__r.Person__c,
      Diagnosed:( flowVars.LOVReturned[("AFCARS_FOSTER_PAC-" ++ ($.Has_the_child_been_diagnosed__c default ""))][0] default "" ),
      Condition:$.Condition_Category__c,
      AdoptionAge:( flowVars.LOVReturned[("AFCARS_FOSTER_AGE_ADOPTED_PAC-" ++ ($.PAC_ID__r.Youth_s_age_when_adoption_was_legalized__c default ""))][0] default "" ),
      //YouthAdopted:"3" when (($.PAC_ID__r.Has_youth_ever_been_adopted__c default "" == "Parents refused to give information") or ($.PAC_ID__r.Has_youth_ever_been_adopted__c default "" == "Cannot Determine") or ($.PAC_ID__r.Has_youth_ever_been_adopted__c default "" == "Child was abandoned")) otherwise ( flowVars.LOVReturned[("AFCARS_FOSTER_ADOPTED_PAC-" ++ ($.PAC_ID__r.Has_youth_ever_been_adopted__c default ""))][0] default "" ),
      YouthAdopted: (flowVars.LOVReturned[("AFCARS_FOSTER_ADOPTED_PAC-" ++ ($.PAC_ID__r.Has_youth_ever_been_adopted__c default ""))][0] default "" ),
      LastModified:$.PAC_ID__r.Completed_Date__c,
      Priority : 2,
      DateNeededStart : |1971-01-01|,        
      Type : "PAC"  
} filter ($.PersonID != null)]]></dw:set-variable>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="SELECT Id,Does_Child_have_a_Diagnosed_Condition__c,Physical_Medical_Detail__c,Behavioral_Emotional_Detail__c, Has_the_child_ever_been_adopted__c,How_old_was_the_child_when_adoption_was__c,Person__c, Completion_Date__c, Date_Needed_Start__c FROM DEL_Level_Of_Care__c where Level_of_Care_Status__c = 'Completed' and Completion_Date__c!=null and Person__c in (#[flowVars.Clause]) and Completion_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] Order By Completion_Date__c desc, Date_Needed_Start__c desc" doc:name="Salesforce Get LOC before Report End Date"/>
            <dw:transform-message doc:name="Transform Message : Level of Care Data">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LOCRecord"><![CDATA[%dw 1.0
%output application/java


---
payload map {
      ID:$.Id,
      PersonID:$.Person__c,
      Diagnosed:( flowVars.LOVReturned[("AFCARS_FOSTER_LOC-" ++ ($.Does_Child_have_a_Diagnosed_Condition__c default ""))][0] default "" ),
      Condition:$.Physical_Medical_Detail__c default "",
      BehaviorEmotional : $.Behavioral_Emotional_Detail__c,
      //YouthAdopted:"3" when (($.Has_the_child_ever_been_adopted__c default "" == "Parents refused to give information") or ($.Has_the_child_ever_been_adopted__c default "" == "Cannot Determine") or ($.Has_the_child_ever_been_adopted__c default "" == "Child was abandoned")) otherwise (flowVars.LOVReturned[("AFCARS_FOSTER_ADOPTED_LOC-" ++ ($.Has_the_child_ever_been_adopted__c default ""))][0] default "" ),
      YouthAdopted: (flowVars.LOVReturned[("AFCARS_FOSTER_ADOPTED_LOC-" ++ ($.Has_the_child_ever_been_adopted__c default ""))][0] default "" ),
      AdoptionAge:( flowVars.LOVReturned[("AFCARS_FOSTER_AGE_ADOPTED_LOC-" ++ ($.How_old_was_the_child_when_adoption_was__c default ""))][0] default "" ),
      LastModified:$.Completion_Date__c,
      Priority : 1,
      DateNeededStart : $.Date_Needed_Start__c,
      Type : "LOC" 
} filter ($.PersonID != null)]]></dw:set-variable>
            </dw:transform-message>

             <dw:transform-message doc:name="TM : Add Grouped LOC and PAC Records seperately">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LOCRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LOCRecords default {}) ++ ( (flowVars.LOCRecord default [] ) groupBy $.PersonID )]]></dw:set-variable>
                <dw:set-variable variableName="PACRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PACRecords default {}) ++ ( (flowVars.PACRecord default [] ) groupBy $.PersonID )]]></dw:set-variable>
            </dw:transform-message>          
        </foreach>
             <dw:transform-message doc:name="TM : Find Latest LOC and PAC Records by Person separately">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LOCRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LOCRecords default {}) mapObject {
	($$ as :string) : using ( recs = $) ( (recs filter ($.LastModified == ( ((recs orderBy $.LastModified)[-1..0])[0].LastModified) ) ) orderBy ($.DateNeededStart default |1971-01-01|))[-1..0]
}]]></dw:set-variable>
                <dw:set-variable variableName="PACRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PACRecords default {}) mapObject {
	($$ as :string) :  using ( recs = $) (recs filter ($.LastModified == ( ((recs orderBy $.LastModified)[-1..0])[0].LastModified) ) )
}]]></dw:set-variable>
            </dw:transform-message>
    </sub-flow>
    <sub-flow name="afcars-fostercare-get-AfcarsEpisodes-Sub_Flow" doc:description="Flow to get AFCARS Episodes for the reporting period">
        <logger message="Get AFCARS Episodes details" level="INFO" doc:name="Logger : AFCARS Episodes details"/>
        <foreach collection="#[flowVars.CustodyList]" batchSize="150" doc:name="For Each">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
((payload map ("'" ++ $.PersonID ++ "'")) distinctBy $) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <!-- <logger message="Select Id,Client__c,Client__r.DEL_PID__c,Removal_Reason__c,Episode_Start_Date__c ,Episode_End_Date__c, (  Select Id,Contact__c,Placement_Start_Date__c, Relative_Non_relative_Placement__c,Placement_End_date__c,Placement_Discharge_Date__c,Placement_End_Date_Division_Wide__c,Placement_Reasons__c,Case_Number__c,Case_Number__r.County__c,Service_taxanomy__c,Service_taxanomy__r.Level_One__c,Service_taxanomy__r.Level_Two_Services__c,Service_taxanomy__r.Level_Three_Subservices__c,Last_Name_Organization_Name__c,Initial_Placement_Reason_s__c,Family_Structure__c, Case_Number__r.Division__c,Caregiver1_Name__c,Caregiver1_Name__r.DEL_Race_Primary__c,Caregiver1_Name__r.DEL_Race_Secondary__c,Caregiver1_Name__r.DEL_Ethnicity__c,Caregiver1_Name__r.Birthdate,Caregiver2_Name__c,Caregiver2_Name__r.Birthdate,Caregiver2_Name__r.DEL_Race_Primary__c,Caregiver2_Name__r.DEL_Race_Secondary__c,Caregiver2_Name__r.DEL_Ethnicity__c,End_Reason__c,Runaway_Status__c,Home_Placement_Type__c,Out_of_State__c,Foster_Care_Setting_Type__c,LastModifiedDate  from Placements__r where (Latest_Version_Placement__c = true) and Case_Number__r.Expungement_Flag__c = false and (Placement_Status__c in ('Admitted','Discharged')) and (Placement_Start_Date__c != null) order by Placement_Start_date__c), ( Select Id,Client_Name__c,Runaway_End_Date_Time__c, Runaway_Start_Date_Time__c from Runaway__r where Runaway_Status__c !='' and Runaway_Start_Date_Time__c != null order by LastModifiedDate) from DEL_Placement_Episode__c where Client__c In (#[payload]) and ((Episode_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Episode_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] ) or (Episode_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Episode_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Episode_Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Episode_End_Date__c  = null) )" level="INFO" doc:name="Logger"/> -->
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Client__c,Client__r.DEL_PID__c,Removal_Reason__c,Episode_Start_Date__c ,Episode_End_Date__c, (  Select Id,Contact__c,Placement_Start_Date__c, Relative_Non_relative_Placement__c,Placement_End_date__c,Placement_Discharge_Date__c,Placement_End_Date_Division_Wide__c,Placement_End_Completed_Date__c,Placement_Reasons__c,Case_Number__c,Case_Number__r.County__c,Service_taxanomy__c,Service_taxanomy__r.Level_One__c, Service_taxanomy__r.Level_One_Code__c, Service_taxanomy__r.Level_Two_Code__c, Service_taxanomy__r.Level_Three_Code__c, Service_taxanomy__r.FACTS_I_Service_Desc__c,Service_taxanomy__r.Foster_Care_Setting_Type__c, Last_Name_Organization_Name__c,Initial_Placement_Reason_s__c,Family_Structure__c, Case_Number__r.Division__c, Caregiver1_Name__c,Caregiver1_Name__r.DEL_Race_Primary__c, Caregiver1_Name__r.DEL_Race_Secondary__c, Caregiver1_Name__r.DEL_Ethnicity__c, Caregiver1_Name__r.Birthdate,Caregiver2_Name__c, Caregiver2_Name__r.Birthdate,Caregiver2_Name__r.DEL_Race_Primary__c, Caregiver2_Name__r.DEL_Race_Secondary__c, Caregiver2_Name__r.DEL_Ethnicity__c, End_Reason__c,Runaway_Status__c, Home_Placement_Type__c,Out_of_State__c, Foster_Care_Setting_Type__c, Completed_Date__c, Facility_Type_Formula__c, Case_Type__c, Is_this_Placement_less_than_24_hours__c  from Placements__r where (Latest_Version_Placement__c = true) and Case_Number__r.Expungement_Flag__c = false and (Placement_Status__c in ('Admitted','Discharged')) and (Placement_Start_Date__c != null) and Service_taxanomy__r.Foster_Care_Setting_Type__c = 'Foster Care' and ( not (Service_taxanomy__r.Level_One__c = 'Foster Care' and Service_taxanomy__r.Level_Two_Services__c = 'Foster Care - DFS Supervision' )) and Placement_Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] order by Placement_Start_date__c), ( Select Id,Client_Name__c,Runaway_End_Date_Time__c, Runaway_Start_Date_Time__c, Completed_Date__c from Runaway__r where Runaway_Status__c !='' and Runaway_Start_Date_Time__c != null and Runaway_Start_Date_Time__c &lt;= #[flowVars.extractInfo.ReportEndDate]T00:00:00Z order by Runaway_Start_Date_Time__c) from DEL_Placement_Episode__c where Client__c In (#[payload]) and ((Episode_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Episode_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Episode_Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Episode_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Episode_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Episode_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Episode_Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Episode_End_Date__c  = null) or  ( Episode_End_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] ) )" doc:name="Salesforce : Get Records" doc:description="Get Episodes before Report Period and associated Placement and Runaway before Report Period"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Get Records">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

%var RelativeYList = ["Foster Care - Emergency", "Foster Care - Hispanic", "Foster Care - Specialized Foster Home", "Foster Care", "Foster Care- ISB", "Foster Care Treatment Family - Plus 1", "Foster Care Treatment Family - Plus 2"]
%var ConsiderFacilityTypeList = ["ICT - Residential", "Individualized Residential Treatment", "Residential - Administrative Detention", "Residential - Nonsecure Detention", "Shelter Services", "Treatment Foster Home", "Foster Care - Preadoptive"]
%var FocusOnlyPlacementSettingMap = {
	"5049-6281" : "5",
	"5004-6017" : "5",
	"5051-6139" : "3",
	"5004-6029" : "5",
	"5025-6475" : "1",
	"5025-6134" : "2",
	"5004-6002" : "5",
	"5079-6501" : "3",
	"5004-6259" : "5",
	"5008-6050" : "5",
	"5051-6039" : "3",
	"5051-6083" : "2",
	"5025-6065" : "1",
	"5025-6128" : "3",
	"5025-6129" : "3",
	"5027-6306" : "4",
	"5027-6325" : "4",
	"5051-6039" : "3",
	"5051-6083" : "2",
	"5036-6050" : "5",
	"5051-6353" : "3",
	"5051-6317" : "3",
	"5051-6312" : "3",
	"5051-6311" : "3",
	"5063-6537" : "5",
	"5025-6038" : "3",
	"5025-6486" : "3",
	"5025-6485" : "3",
	"5025-6484" : "3",
	"5025-6483" : "3",
	"5025-6482" : "3",
	"5025-6481" : "1",
	"5025-6480" : "1",
	"5025-6479" : "1",
	"5025-6478" : "1",
	"5025-6477" : "1",
	"5025-6476" : "1",
	"5025-6323" : "3",
	"5025-6313" : "3",
	"5025-6140" : "3",
	"5025-6136" : "2",
	"5025-6135" : "2",
	"5025-6133" : "2",
	"5025-6130" : "3",
	"5025-6129" : "3",
	"5025-6128" : "3",
	"5025-6124" : "3",
	"5025-6121" : "3",
	"5029-6155" : "5",
	"5029-6154" : "5",
	"5029-6138" : "3",
	"5025-6281" : "3",
	"5051-6318" : "3"
  }	
---
payload map {
      IDEpisode:$.Id,
      PersonID:$.Client__c ,
      PID:$.Client__r.DEL_PID__c,
      EpisodeStartDate:$.Episode_Start_Date__c as :date default '',
      EpisodeEndDate:$.Episode_End_Date__c as :date default '',
      RemovalReason:$.Removal_Reason__c,
      ( Placement:$.Placements__r map {
            PlacementID:$.Id default "",
            PersonID:$.Contact__c default "",
          StartDate:$.Placement_Start_Date__c as :date default '',
           FacilityType : $.Facility_Type_Formula__c default "",
           
           CaseType : $.Case_Type__c default "",
           FosterCareSettingType : $.Foster_Care_Setting_Type__c default "",
		   ServiceFosterCareSettingType : $.Service_taxanomy__r.Foster_Care_Setting_Type__c default "",
           IsFosterCareSettingM : ( ( ($.Foster_Care_Setting_Type__c default "") == "Medical Hospital" ) and ( ( ($.Placement_End_date__c as :date) - |P14D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_End_date__c != null) otherwise (
			( ( ($.Foster_Care_Setting_Type__c default "") == "Medical Hospital" ) and ( ( ($.Placement_Discharge_Date__c as :date) - |P14D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_Discharge_Date__c != null) otherwise false
		   ) ,		   
			
		   IsFosterCareSettingP : ( ( ($.Foster_Care_Setting_Type__c default "") == "Psychiatric Hospital" ) and ( ( ($.Placement_End_date__c as :date) - |P14D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_End_date__c != null) otherwise (
			( ( ($.Foster_Care_Setting_Type__c default "") == "Psychiatric Hospital" ) and ( ( ($.Placement_Discharge_Date__c as :date) - |P14D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_Discharge_Date__c != null) otherwise false
		   ) ,
		   	
           IsFosterCareSettingJ : ( ( ($.Foster_Care_Setting_Type__c default "") == "Juvenile Justice" ) and ( ( ($.Placement_End_date__c as :date) - |P1D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_End_date__c != null) otherwise (
			( ( ($.Foster_Care_Setting_Type__c default "") == "Juvenile Justice" ) and ( ( ($.Placement_Discharge_Date__c as :date) - |P1D| ) <= ($.Placement_Start_Date__c as :date) ) ) when ($.Placement_Discharge_Date__c != null) otherwise false
		   ) ,

           EndDate : ($.Placement_End_date__c as :date) when ( ($.Placement_End_date__c != null) and (($.Placement_End_date__c as :date) <= (flowVars.extractInfo.ReportEndDate as :date) ) ) otherwise ( ($.Placement_End_Completed_Date__c as :date) when ( ($.Placement_End_Completed_Date__c != null) and (($.Placement_End_Completed_Date__c as :date) <= (flowVars.extractInfo.ReportEndDate as :date) ) ) otherwise "" ),
           EndDate2 : ($.Placement_End_Date_Division_Wide__c as :date) when ( ($.Placement_End_Date_Division_Wide__c != null) and (($.Placement_End_Date_Division_Wide__c as :date) <= (flowVars.extractInfo.ReportEndDate as :date) ) ) otherwise ( ($.Placement_End_Completed_Date__c as :date) when ( ($.Placement_End_Completed_Date__c != null) and (($.Placement_End_Completed_Date__c as :date) <= (flowVars.extractInfo.ReportEndDate as :date) ) ) otherwise |2999-01-01| ),	
		   
		   CompletedDate : ($.Completed_Date__c as :date) when ($.Completed_Date__c != null) otherwise null,
		   EndCompletedDate : ($.Placement_End_Completed_Date__c as :date) when ($.Placement_End_Completed_Date__c != null) otherwise null,
            Case:$.Case_Number__c default "",
            CaseCounty:( flowVars.LOVReturned[("AFCARS_FOSTER_COUNTY-" ++ ($.Case_Number__r.County__c default ""))][0] default "" ),
            ServiceTaxanomy:$.Service_taxanomy__c default "",
            ServiceTaxanomyLevel1Code:( "RelativeY" when ( ( "(\"Foster Care - Emergency\",\"Foster Care - Hispanic\",\"Foster Care - Specialized Foster Home\",\"Foster Care\",\"Foster Care- ISB\",\"Foster Care Treatment Family - Plus 1\",\"Foster Care Treatment Family - Plus 2\")" contains $.Service_taxanomy__r.Level_One__c ) and ( $.Relative_Non_relative_Placement__c == 'Yes' ) ) otherwise $.Service_taxanomy__r.Level_One__c  ) default "",
            ServiceTaxanomyLevel1CodeFacts : $.Service_taxanomy__r.FACTS_I_Service_Desc__c default "",
            
			ServiceTaxanomyLevel1CodeFactsFor41 : "RelativeY" when ( (RelativeYList contains ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")) and ( $.Relative_Non_relative_Placement__c == "Yes" ) ) otherwise ("NotRelativeY" when ( (RelativeYList contains ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")) and ( $.Relative_Non_relative_Placement__c == "No" ) ) otherwise ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")  ),	            
            
            CurrentPlacementSettingfor41FocusCode : FocusOnlyPlacementSettingMap[(($.Service_taxanomy__r.Level_One_Code__c default "") ++ "-" ++ ($.Service_taxanomy__r.Level_Two_Code__c default ""))],
			
			CurrentPlacementSettingfor41 : "2" when ( (RelativeYList contains ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")) and ( $.Relative_Non_relative_Placement__c == "Yes" ) ) otherwise ("3" when ( (RelativeYList contains ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")) and ( $.Relative_Non_relative_Placement__c == "No" ) ) otherwise ( flowVars.LOVReturned[("AFCARS_FOSTER_SERVICE-" ++ ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default ""))][0] default "" )  ),
			CurrentPlacementSetting41WithFacilityTypeCheckOnly  : ( ( flowVars.LOVReturned[("AFCARS_FOSTER_SERVICE-" ++ ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "") ++ "-" ++ ($.Facility_Type_Formula__c default "") )][0] default "NA" ) ) when ( ConsiderFacilityTypeList contains ($.Service_taxanomy__r.FACTS_I_Service_Desc__c default "")) otherwise "NA",          
            
            ServiceTaxanomyLevel2Code: $.Service_taxanomy__r.Level_Two_Services__c default "",
            ServiceTaxanomyLevel3Code: $.Service_taxanomy__r.Level_Three_Subservices__c default "",
            
            ServiceTaxanomyLevel1CodeSmall : $.Service_taxanomy__r.Level_One_Code__c,
            ServiceTaxanomyLevel2CodeSmall : $.Service_taxanomy__r.Level_Two_Code__c,
            ServiceTaxanomyLevel3CodeSmall : $.Service_taxanomy__r.Level_Three_Code__c,
            
            ProviderLastName:$.Last_Name_Organization_Name__c default "",
            InitialPlacementReason: $.Initial_Placement_Reason_s__c when ($.Initial_Placement_Reason_s__c != null) otherwise "",
            PlacementReason : $.Placement_Reasons__c when ($.Placement_Reasons__c != null) otherwise "",
            FamilyStructure:$.Family_Structure__c default "",
            Caregiver1Name:$.Caregiver1_Name__c default "",
            Caregiver1PrimaryRace:$.Caregiver1_Name__r.DEL_Race_Primary__c default "",
            Caregiver1SecondaryRace:$.Caregiver1_Name__r.DEL_Race_Secondary__c default "",
            Caregiver1Ethnicity:$.Caregiver1_Name__r.DEL_Ethnicity__c default "",
            Caregiver1Birthdate:$.Caregiver1_Name__r.Birthdate default "",
            Caregiver2Name:$.Caregiver2_Name__c default "",
            Caregiver2Birthdate:$.Caregiver2_Name__r.Birthdate default "",
            Caregiver2PrimaryRace:$.Caregiver2_Name__r.DEL_Race_Primary__c default "",
            Caregiver2SecondaryRace:$.Caregiver2_Name__r.DEL_Race_Secondary__c default "",
            Caregiver2Ethnicity:$.Caregiver2_Name__r.DEL_Ethnicity__c default "",
            EndReason:( flowVars.LOVReturned[("AFCARS_FOSTER_DISCHARGE-" ++ ($.End_Reason__c default ""))][0] default "" ),
            RunawayStatus:$.Runaway_Status__c default "",
            HomePlacement:$.Home_Placement_Type__c default "",
            OutofState:$.Out_of_State__c  default "",
            PlacementLessThan24Hours:$.Is_this_Placement_less_than_24_hours__c,
            Division:$.Case_Number__r.Division__c default "",
            Relative:"1" when ($.Relative_Non_relative_Placement__c == 'Yes') otherwise "0"
      } ) when ($.Placements__r != null) ,
      ( Runaway: $.Runaway__r map {
            RunawayID:$.Id default "",
            PersonID:$.Client_Name__c default "",
            ProviderLastName:$.Placement__r.Last_Name_Organization_Name__c default "",
            EndDate : ((($.Runaway_End_Date_Time__c as :datetime) >> "US/Eastern") as :date) when (($.Runaway_End_Date_Time__c != null) and ( ((($.Runaway_End_Date_Time__c as :datetime) >> "US/Eastern") as :date) <= (flowVars.extractInfo.ReportEndDate as :date) )) otherwise "",
						
			EndDate2 : ((($.Runaway_End_Date_Time__c as :datetime) >> "US/Eastern") as :date) when (($.Runaway_End_Date_Time__c != null) and ( ((($.Runaway_End_Date_Time__c as :datetime) >> "US/Eastern") as :date) <= (flowVars.extractInfo.ReportEndDate as :date) )) otherwise |2999-01-01|,
			
			
			CompletedDate : ($.Completed_Date__c as :date) when ($.Completed_Date__c != null) otherwise null,			
            StartDate :  ((($.Runaway_Start_Date_Time__c as :datetime) >> "US/Eastern") as :date) when ($.Runaway_Start_Date_Time__c != null ) otherwise ""
      } ) when ($.Runaway__r != null) 
      }  orderBy $.EpisodeStartDate]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Filter Episodes having atleast one Foster Care Placement and Runaway">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter ( (  ( $.Placement != null ) and ( ( sizeOf ( ($.Placement default []) filter (($.ServiceFosterCareSettingType default "") == "Foster Care") ) ) > 0 ) ) or ($.Runaway != null ) ) ]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : EpisodeRecords">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="EpisodeRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.EpisodeRecords default {}) ++ ((payload ) default {})]]></dw:set-variable>
			<dw:set-variable variableName="AllEpisodeRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AllEpisodeRecords default {}) ++ ((payload ) default {})]]></dw:set-variable>
            </dw:transform-message>
            <!-- <logger message="Extracted Payload Episode:: #[payload]" level="INFO" doc:name="Logger"/> -->
            <message-properties-transformer scope="invocation" doc:name="Message Properties">
                <add-message-property key="RecordCount" value="#[payload.size()]"/>
            </message-properties-transformer>
           
        </foreach>

    </sub-flow>

    <sub-flow name="afcars-fostercare-get-TRU-and-TMV-Sub_Flow" doc:description="Flow to get TRU and TMV related information">
        <logger message="Get TRU and TMV Details" level="INFO" doc:name="Logger : TRU and TMV Details"/>
       <foreach collection="#[flowVars.CustodyList]" batchSize="150" doc:name="For Each Item">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
((payload map ("'" ++ $.PersonID ++ "'")) distinctBy $) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Contact__c,Placement_Start_Date_Division_Wide__c ,Placement_End_Date_Division_Wide__c,Placement_End_Completed_Date__c, Case_Number__c,Case_Number__r.Division__c, Home_Placement_Type__c  from DEL_Placement__c where (Latest_Version_Placement__c = true) and Placement_Status__c in ('Admitted','Discharged') and (Placement_Start_Date_Division_Wide__c != null) and Home_Placement_Type__c!=null and ( not (Service_taxanomy__r.Level_One__c = 'Foster Care' and Service_taxanomy__r.Level_Two_Services__c = 'Foster Care - DFS Supervision' )) and Placement_Start_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Contact__c In (#[payload]) order by Placement_Start_Date_Division_Wide__c desc" doc:name="Salesforce : Get TRU and TMV" doc:description="Query to Get Trial ReUnifications and Temporary Home Visit for a Person"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Map Records">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
            PlacementID:$.Id default "",
            PersonID:$.Contact__c default "",
			StartDate:$.Placement_Start_Date_Division_Wide__c as :date default "",
			EndDate:$.Placement_End_Date_Division_Wide__c as :date default "",
			EndDate2 : ($.Placement_End_Date_Division_Wide__c as :date) when ($.Placement_End_Date_Division_Wide__c != null) otherwise |2999-01-01|,
			Case:$.Case_Number__c,
			Division:$.Case_Number__r.Division__c default "",
            HomePlacement:$.Home_Placement_Type__c default ""
      } distinctBy $.PersonID]]></dw:set-payload>

            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
( (payload default []) filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.EndDate2 ) distinctBy $.PersonID]]></dw:set-payload>
            </dw:transform-message>

             <dw:transform-message doc:name="Transform Message">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="GroupedTRUandTMVPlacements"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.GroupedTRUandTMVPlacements default {}) ++ ((payload groupBy $.PersonID) default {})]]></dw:set-variable>
                <dw:set-variable variableName="GroupedTRUPlacements"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.GroupedTRUPlacements default {}) ++ (( (payload default [] filter ($.HomePlacement == "Trial Reunification") ) groupBy $.PersonID) default {})]]></dw:set-variable>
                <dw:set-variable variableName="GroupedTMVPlacements"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.GroupedTMVPlacements default {}) ++ (( (payload default [] filter ($.HomePlacement == "Temporary Home Visit") ) groupBy $.PersonID) default {})]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
    </sub-flow>



    <sub-flow name="afcars-fostercare-Runawayoverlap-report-records-Sub_Flow" doc:description="Flow to get overlapping Runaways as per Extraction criteria">
        <logger message="Checking Runaway Overlaps" level="INFO" doc:name="Logger : Check Runaway overlaps"/>

        <foreach collection="#[flowVars.reportCustodyPersonIDList]" doc:name="For Each : Iterate over 150 records at a time" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>

            </dw:transform-message>	

	<!-- <logger message="Select Id, Client_Name__c, Runaway_Start_Date__c, Runaway_End_Date__c from DEL_Runaway__c where Client_Name__c In (#[payload]) and Runaway_Status__c !='' and Runaway_Start_Date__c != null and ((Runaway_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Runaway_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Runaway_Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Runaway_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Runaway_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Runaway_Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Runaway_End_Date__c  = null) )" level="INFO" doc:name="Logger"/> -->

                <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Client_Name__c, Runaway_Start_Date__c, Runaway_End_Date__c, Completed_Date__c from DEL_Runaway__c where Client_Name__c In (#[payload]) and Runaway_Status__c !='' and Runaway_Start_Date__c != null and ((Runaway_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Runaway_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Runaway_Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Runaway_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Runaway_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Runaway_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Runaway_Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Runaway_End_Date__c  = null) ) and Placement_Episode_ID__c!=null" doc:name="Salesforce : Get Runway Overlap" doc:description="Get Custody Details applicable for Report Clients"/>

        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Runaway Data">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	"Id" : $.Id,
	"PersonID" : $.Client_Name__c,
	"StartDate" : (  $.Runaway_Start_Date__c as :date  ),
	"EndDate" :   (  $.Runaway_End_Date__c as :date ) when (($.Runaway_End_Date__c != null) and ($.Runaway_End_Date__c != "") ) otherwise ("2999-01-01" as :date)
}]]></dw:set-payload>
        </dw:transform-message> 
        <dw:transform-message doc:name="Transform Message : Combine and add PlacementData">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="runawayOverLapData"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.runawayOverLapData default []) ++ (payload default [])]]></dw:set-variable>
        </dw:transform-message>

</foreach>		

            <message-properties-transformer doc:name="Message Properties : Initialize Person Id List" scope="invocation">
                <add-message-property key="PersonIDEntryList" value="#[dw(&quot;[]&quot;)]"/>
            </message-properties-transformer>

        <foreach collection="#[dw(&quot;flowVars.runawayOverLapData default []&quot;)]" doc:name="For Each : Runaway" doc:description="Iterate over each Runaway and check whether the runwaway is overlapping with Custody">
            <message-properties-transformer doc:name="Message Properties : Create required variables" scope="invocation">
                <add-message-property key="StartDate" value="#[payload.StartDate]"/>
                <add-message-property key="EndDate" value="#[payload.EndDate]"/>
                <add-message-property key="ID" value="#[payload.PersonID]"/>
            </message-properties-transformer>

            <dw:transform-message doc:name="Transform Message : Check if Runaway overlaps with Custody">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.GroupCustodyForEntry[flowVars.ID] default []) filter ( ($.CustodyStartDate >= flowVars.StartDate and $.CustodyStartDate <= flowVars.EndDate) or ($.CustodyEndDate >= flowVars.StartDate and $.CustodyEndDate <= flowVars.EndDate) or ($.CustodyStartDate <= flowVars.StartDate and $.CustodyEndDate >= flowVars.EndDate)  ) map {
      ID:$.CustodyID,
      CustodyStart:$.CustodyStartDate ,
      PersonID:$.PersonID as :string default '',
      CustodyEnd:$.CustodyEndDate
} distinctBy $.ID]]></dw:set-payload>
            </dw:transform-message>	
         <dw:transform-message doc:name="Transform Message : Add Person Id to the qualified list">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="PersonIDEntryList"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.PersonIDEntryList default []) + flowVars.ID) when ((sizeOf payload) > 0 ) otherwise (flowVars.PersonIDEntryList default []) ]]></dw:set-variable>
        </dw:transform-message>           
            		
		</foreach>
		
        <dw:transform-message doc:name="Transform Message : Get Unique Clients">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PersonIDEntryList distinctBy $)]]></dw:set-payload>
        </dw:transform-message>		



        	
		<!-- <logger level="INFO" doc:name="Logger" message="Report Client Size after Runaway Change #[payload.size()] "/> -->
    </sub-flow>



    <sub-flow name="afcars-fostercare-Placementoverlap-report-records-Sub_Flow" doc:description="Flow to get overlapping Placements as per Extraction criteria">
        <logger message="Checking Placements Overlaps" level="INFO" doc:name="Logger : Checking Placement Overlaps"/>

        <foreach collection="#[flowVars.reportCustodyPersonIDList]" doc:name="For Each : Iterate over 150 records at a time" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>

            </dw:transform-message>		

	<!-- <logger message="Select Id, Contact__c, Placement_Start_Date_Division_Wide__c ,Placement_End_Date_Division_Wide__c from DEL_Placement__c where Contact__c In (#[payload]) and and Case_Number__r.Expungement_Flag__c = false and Latest_Version_Placement__c = true and Placement_Status__c in ('Admitted','Discharged') and Placement_Start_Date_Division_Wide__c != null  and Foster_Care_Setting_Type__c='Foster Care' and Service_taxanomy__r.Residential_Nonresidential__c='Residential' and ((Placement_Start_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Date_Division_Wide__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Placement_Start_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Date_Division_Wide__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Placement_Start_Date_Division_Wide__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Placement_End_Date_Division_Wide__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Placement_Start_Date_Division_Wide__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Placement_Start_Date_Division_Wide__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Placement_End_Date_Division_Wide__c  = null) )" level="INFO" doc:name="Logger"/> -->

                <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Contact__c, Placement_Start_Date_Division_Wide__c, Placement_End_Completed_Date__c,Placement_End_Date_Division_Wide__c, Home_Placement_Type__c from DEL_Placement__c where Contact__c In (#[payload]) and Latest_Version_Placement__c = true and Placement_Status__c in ('Admitted','Discharged') and Placement_Start_Date_Division_Wide__c != null  and Foster_Care_Setting_Type__c='Foster Care' and Is_this_Placement_less_than_24_hours__c = false and Service_taxanomy__r.Residential_Nonresidential__c='Residential' and ( not (Service_taxanomy__r.Level_One__c = 'Foster Care' and Service_taxanomy__r.Level_Two_Services__c = 'Foster Care - DFS Supervision' )) and ((Placement_Start_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Completed_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Placement_Start_Date_Division_Wide__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Completed_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Placement_Start_Date_Division_Wide__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Placement_End_Completed_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Placement_Start_Date_Division_Wide__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Placement_End_Completed_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Placement_Start_Date_Division_Wide__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Placement_End_Completed_Date__c  = null) )" doc:name="Salesforce : Get Placement Overlap " doc:description="Get Placement Details applicable for the Report to determine clients eligible for the report"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Placement Data">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload default []) filter (($.Home_Placement_Type__c default "") != "Trial Reunification" ) map {
	"Id" : $.Id,
	"PersonID" : $.Contact__c,
	"StartDate" : $.Placement_Start_Date_Division_Wide__c as :date,
	"EndDate" : ($.Placement_End_Date_Division_Wide__c as :date) when (($.Placement_End_Date_Division_Wide__c != null) and ($.Placement_End_Date_Division_Wide__c != "") ) otherwise ("2999-01-01" as :date)
}]]></dw:set-payload>
        </dw:transform-message>        
        <dw:transform-message doc:name="Transform Message : Combine and add PlacementData">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="placementOverLapData"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.placementOverLapData default []) ++ (payload default [])]]></dw:set-variable>
        </dw:transform-message>
</foreach>

            <message-properties-transformer doc:name="Message Properties : Initialize Person Id List" scope="invocation">
                <add-message-property key="PersonIDEntryList" value="#[dw(&quot;[]&quot;)]"/>
            </message-properties-transformer>

        <foreach collection="#[dw(&quot;flowVars.placementOverLapData default []&quot;)]" doc:name="For Each : Placement" doc:description="Iterate over each Placement and check whether the placement is overlapping with Custody">
            <message-properties-transformer doc:name="Message Properties : Create required variables" scope="invocation">
                <add-message-property key="StartDate" value="#[payload.StartDate]"/>
                <add-message-property key="EndDate" value="#[payload.EndDate]"/>
                <add-message-property key="ID" value="#[payload.PersonID]"/>
            </message-properties-transformer>

            <dw:transform-message doc:name="Transform Message : Check if Placement overlaps with Custody">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.GroupCustodyForEntry[flowVars.ID] default []) filter ( ($.CustodyStartDate >= flowVars.StartDate and $.CustodyStartDate <= flowVars.EndDate) or ($.CustodyEndDate >= flowVars.StartDate and $.CustodyEndDate <= flowVars.EndDate) or ($.CustodyStartDate <= flowVars.StartDate and $.CustodyEndDate >= flowVars.EndDate)  ) map {
      ID:$.CustodyID,
      CustodyStart:$.CustodyStartDate ,
      PersonID:$.PersonID as :string default '',
      CustodyEnd:$.CustodyEndDate
} distinctBy $.ID]]></dw:set-payload>
            </dw:transform-message>	
         <dw:transform-message doc:name="Transform Message : Add Person Id to the qualified list">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="PersonIDEntryList"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.PersonIDEntryList default []) + flowVars.ID) when ((sizeOf payload) > 0 ) otherwise (flowVars.PersonIDEntryList default []) ]]></dw:set-variable>
        </dw:transform-message>           
            		
		</foreach>
		
        <dw:transform-message doc:name="Transform Message : Get Unique Clients">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PersonIDEntryList distinctBy $)]]></dw:set-payload>
        </dw:transform-message>		
		<!-- <logger level="INFO" doc:name="Logger" message="Report Client Size after Placement Change #[payload.size()] "/> -->
    </sub-flow>  

    <sub-flow name="afcars-fostercare-Custody-report-records-Sub_Flow">
        <logger message="Getting Custody Details for Report" level="INFO" doc:name="Logger : Log Custody Details Report Details"/>
        <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, Actual_End_Date__c,Court_Order_ID__r.Completed_Date__c,Court_Order_ID__r.Petition_ID__c,Court_Order_ID__r.Initial_Completion_Date__c from DEL_Custody__c where Client_Name__c != null and Start_Date__c != null and (( Court_Order_ID__r.Petition_ID__c != '' and Converted_Data__c= false) or (Original_Custody__c= true)) and Custodian__c ='DSCYF/DFS' and ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or  (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Actual_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Actual_End_Date__c  = null) ) Order By  Start_Date__c asc" doc:name="Salesforce : Get Custody Details for Report" doc:description="Get Custody Details applicable for Report Clients"/>
        <!-- <logger message="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, Actual_End_Date__c,Court_Order_ID__r.Petition_ID__c from DEL_Custody__c where Client_Name__c !=  null and Start_Date__c != null and (( Court_Order_ID__r.Petition_ID__c != '' and Converted_Data__c= false) or (Original_Custody__c= true)) and Custodian__c ='DSCYF/DFS' and ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or  (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate] ) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Actual_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Actual_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c  &lt;= #[flowVars.extractInfo.ReportEndDate] and Actual_End_Date__c  = null) ) Order By  Start_Date__c asc " level="INFO" doc:name="Logger"/> -->

        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
		<!-- <logger level="INFO" doc:name="Logger" message="Report Custody Siz #[payload.size()] "/> -->
        <dw:transform-message doc:name="Transform Message : Check Custody Duration">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      CustodyID:$.Id,
      PersonID:$.Client_Name__c,
      CustodyStartDate:$.Start_Date__c as :date default '',
      // Before MOCK Change CustodyEndDate:$.Actual_End_Date__c when ($.Actual_End_Date__c != null) otherwise ($.End_Date__c as :date default ''),
      // Before MOCK Change Duration:(($.Start_Date__c as :date) - ($.End_Date__c as :date)).days default 100
      
      //Change during MOCK ENV Test assuming Futuristic Date in case Actual Date is not found before it was End_Date__c 
      CustodyEndDate:$.Actual_End_Date__c as :date when ($.Actual_End_Date__c != null) otherwise ("2999-01-01" ),
      CourtOrderCompletedDate : $.Court_Order_ID__r.Completed_Date__c,
      PetitionID : $.Court_Order_ID__r.Petition_ID__c,
      InitialCompletionDate : $.Court_Order_ID__r.Initial_Completion_Date__c,
      //Change during MOCK ENV Test checking Actual_End_Date__c for Duration before it was End_Date__c
      Duration: ((  (($.Actual_End_Date__c as :date) - |P1D|) > ($.Start_Date__c as :date)  )) when ($.Actual_End_Date__c != null) otherwise true
      } filter ($.Duration == true) ]]></dw:set-payload>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Group Custody Data">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="GroupCustodyForEntry"><![CDATA[%dw 1.0
%output application/java
---
(((payload default []) filter ($.PersonID != null)) groupBy $.PersonID)]]></dw:set-variable>
        </dw:transform-message>
         <dw:transform-message doc:name="Transform Message : Get Report Clients">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $.PersonID filter ($ != null) distinctBy $]]></dw:set-payload>
        </dw:transform-message>
        <!-- <logger level="INFO" doc:name="Logger" message="Report Client size after Duration check #[payload.size()]"/> -->
    </sub-flow>
    
    <sub-flow name="afcars-fostercare-Custody-records-Sub_Flow" doc:description="Flow to get Custody details for the report">
        <logger message="Getting Custody records" level="INFO" doc:name="Logger : Custody records"/>
        <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, Actual_End_Date__c, CreatedDate, Court_Order_ID__r.Completed_Date__c,Court_Order_ID__r.Petition_ID__c,Court_Order_ID__r.Initial_Completion_Date__c from DEL_Custody__c where Client_Name__c != null and Start_Date__c != null and (( Court_Order_ID__r.Petition_ID__c != '' and Converted_Data__c= false) or (Original_Custody__c= true)) and Custodian__c ='DSCYF/DFS' Order By  Start_Date__c asc" doc:name="Salesforce : Get Custody Details" doc:description="Get Custody Details"/>


        <!-- <logger message="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, Actual_End_Date__c,Court_Order_ID__r.Petition_ID__c from DEL_Custody__c where Client_Name__c !=  null and Start_Date__c != null and (( Court_Order_ID__r.Petition_ID__c != '' and Converted_Data__c= false) or (Original_Custody__c= true)) and Custodian__c ='DSCYF/DFS' and Client_Name__c != '003r0000007QnstAAC' Order By  Start_Date__c desc" level="INFO" doc:name="Logger : Query"/> -->
        <!-- <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Client_Name__c,Client_Name__r.DEL_PID__c,End_Date__c,Start_Date__c,Actual_End_Date__c,Court_Order_ID__r.Petition_ID__c from DEL_Custody__c where Client_Name__c !=  null and Start_Date__c != null and ( Court_Order_ID__r.Petition_ID__c != '' or Court_Order_ID__r.Petition_ID__c != null )  Order By  Start_Date__c " doc:name="Salesforce : Get Custody Details" doc:description="Get Custody Details"/> -->
        <!-- <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, Actual_End_Date__c,Court_Order_ID__r.Petition_ID__c from DEL_Custody__c where Client_Name__c !=  null and Start_Date__c != null and (( Court_Order_ID__r.Petition_ID__c != '' and Converted_Data__c= false) or (Order_Type__c = 'Ex Parte' and Converted_Data__c= true)) and Custodian__c ='DSCYF/DFS'  Order By  Start_Date__c" doc:name="Salesforce : Get Custody Details" doc:description="Get Custody Details"/> -->

        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
        <!-- <logger message="All Custody Data Size #[payload.size()]" level="INFO" doc:name="Logger"/> -->
        <dw:transform-message doc:name="Transform Message : Check Duration">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      CustodyID:$.Id,
      PersonID:$.Client_Name__c  default '',
      CustodyStartDate:$.Start_Date__c as :date default '',
      // Before MOCK Change CustodyEndDate:$.Actual_End_Date__c when ($.Actual_End_Date__c != null) otherwise ($.End_Date__c as :date default ''),
      // Before MOCK Change Duration:(($.Start_Date__c as :date) - ($.End_Date__c as :date)).days default 100
      
      //Change during MOCK ENV Test assuming Futuristic Date in case Actual Date is not found before it was End_Date__c 
      CustodyEndDate:$.Actual_End_Date__c when ($.Actual_End_Date__c != null) otherwise ("2999-01-01"),
      CompletedDate : ($.CreatedDate as :date) when ($.CreatedDate != null) otherwise null,
      CourtOrderCompletedDate : $.Court_Order_ID__r.Completed_Date__c,
      PetitionID : $.Court_Order_ID__r.Petition_ID__c, 
      InitialCompletionDate : $.Court_Order_ID__r.Initial_Completion_Date__c,
      //Change during MOCK ENV Test checking Actual_End_Date__c for Duration before it was End_Date__c
      Duration: ((  (($.Actual_End_Date__c as :date) - |P1D|) > ($.Start_Date__c as :date)  )) when ($.Actual_End_Date__c != null) otherwise true
      } filter ($.Duration == true) ]]></dw:set-payload>
        </dw:transform-message>
        
        <choice doc:name="Choice : Route Report Run for Single PID">
            <when expression="#[flowVars.extractInfo.RunForPID != 'No' and  flowVars.extractInfo.RunForPID != '']">
                <dw:transform-message doc:name="Transform Message">
                    <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FinalCustody"><![CDATA[%dw 1.0
%output application/java
---
payload groupBy $.PersonID
]]></dw:set-variable>
                    <dw:set-variable variableName="CustodyList"><![CDATA[%dw 1.0
%output application/java
---
payload filter ($.PersonID == flowVars.extractInfo.RunForPID) map {
      ($)
}
]]></dw:set-variable>
                    <dw:set-variable variableName="FirstEverCustody"><![CDATA[%dw 1.0
%output application/java
---
((payload distinctBy $.PersonID) default [] ) groupBy $.PersonID]]></dw:set-variable>
                </dw:transform-message>
            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message">
                    <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FinalCustody"><![CDATA[%dw 1.0
%output application/java
---
payload groupBy $.PersonID
]]></dw:set-variable>
                    <dw:set-variable variableName="CustodyList"><![CDATA[%dw 1.0
%output application/java
---
payload
]]></dw:set-variable>
                    <dw:set-variable variableName="FirstEverCustody"><![CDATA[%dw 1.0
%output application/java
---
payload distinctBy $.PersonID]]></dw:set-variable>
                    
                </dw:transform-message>
                <dw:transform-message doc:name="Transform Message">
                    <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstEverCustody"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstEverCustody groupBy $.PersonID]]></dw:set-variable>
                </dw:transform-message>
                
            </otherwise>
        </choice>

        <!-- <logger level="INFO" doc:name="Logger" message="Custody Done : Report Client size after Duration check #[payload.size()]"/> -->

    </sub-flow>
    <sub-flow name="afcars-CareGiverDetails-from-petition-Sub_Flow">
        <logger message="Get Caregiver Details from Petition" level="INFO" doc:name="Logger"/>
        <foreach collection="#[flowVars.CustodyList]" doc:name="For Each" batchSize="200">
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter ($.PetitionID != null) map ("'" ++ $.PetitionID default "" ++ "'") joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Id, Name__c, Petition_Children__c, Caregiver1_Name__c, Caregiver2_Name__c, Family_Structure__c, Caregiver1_Name__r.Birthdate, Caregiver2_Name__r.Birthdate from DEL_Person_Involved__c where Petition_Children__c in (#[payload])" doc:name="Salesforce Care giver details from Petition"/>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Id : $.Id,
	Name : $.Petition_Children__c,
	ClientID : $.Name__c,
	FamilyStructure: (flowVars.LOVReturned[("AFCARS_FOSTER_FOSTER_FAMILYSTRUCTURE-" ++ ($.Family_Structure__c default ""))][0] default "" ),
	BirthDate1: ($.Caregiver1_Name__r.Birthdate as :date as :string {format:"yyyy"}) when ($.Caregiver1_Name__r.Birthdate != null) otherwise "",
	BirthDate2: ($.Caregiver2_Name__r.Birthdate as :date as :string {format:"yyyy"}) when ($.Caregiver2_Name__r.Birthdate != null) otherwise ""
} ]]></dw:set-payload>
            </dw:transform-message>
             <dw:transform-message doc:name="Transform Message : CareGiverDetails">
                <dw:set-variable variableName="CareGiverDetails"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.CareGiverDetails default []) ++ (payload default []))]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
        <dw:transform-message doc:name="Transform Message : CareGiverDetails">
                <dw:set-variable variableName="CareGiverDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CareGiverDetails groupBy $.ClientID)]]></dw:set-variable>
            </dw:transform-message>
    </sub-flow>
    <sub-flow name="afcars-Element58-Sub_Flow">
        <logger message="For Element 58" level="INFO" doc:name="Logger"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each">
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ default "" ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Client_Name__c, Client_Name__r.DEL_PID__c, Start_Date__c, End_Date__c, Custodian__c,Order_Type__c, Court_Order_ID__r.Initial_Completion_Date__c  from DEL_Custody__c where Client_Name__c in (#[payload]) and Start_Date__c != null and Order_Type__c != 'Ex Parte' Order By  Name desc" doc:name="Salesforce"/>
            <dw:transform-message doc:name="Transform message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload  map { //filter ((["Age of Majority","Child Deceased","Non-Relative","Other Relative","Parent","Adoptive Parents","Guardian"] contains $.Custodian__c) or (flowVars.GroupAfcarsCustody[$.Client_Name__c][-1].CustodyEnd == $.End_Date__c))
	Client : $.Client_Name__c,
 	CourtOrderCompletedDate : $.Court_Order_ID__r.Initial_Completion_Date__c,
 	OrderType : $.Order_Type__c,
 	Custodian : $.Custodian__c,
 	EndDate : $.End_Date__c
}]]>
                </dw:set-payload>
            </dw:transform-message>
            <!-- <dw:transform-message doc:name="Transform message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
%var CustodianMap = {
	"Age of Majority" : "4",
	"Child Deceased" : "8",
	"Non-Relative" : "5",
	"Other Relative" : "2",
	"Parent" : "1",
	"Adoptive Parents" : "3",
	"Guardian" : "5"		
}

payload filter (((flowVars.GroupAfcarsCustody[$.Client_Name__c][-1].CustodyEnd) < (flowVars.extractInfo.ReportEndDate as :date {format : "yyyy-MM-dd"}) ) and (flowVars.GroupAfcarsCustody[$.Client_Name__c].CustodyEnd[-1] == $.End_Date__c)) map {
 	Client : $.Client_Name__c,
 	CourtOrderCompletedDate : $.Court_Order_ID__r.Completed_Date__c,
 	OrderType : $.Order_Type__c,
 	Custodian : "3" when ($.Order_Type__c == "Final Order of Adoption") otherwise ("5" when ($.Order_Type__c == "Guardianship") otherwise (CustodianMap[$.Custodian__c]))
}]]>
                </dw:set-payload>
            </dw:transform-message> -->
            <dw:transform-message doc:name="Custodian Value">
            	<dw:set-variable variableName="Custodian"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.Custodian default []) ++ (payload default []))
]]></dw:set-variable>
      </dw:transform-message>
    
        </foreach>
        <dw:transform-message doc:name="Custodian Value">
            	<dw:set-variable variableName="Custodian"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.Custodian groupBy $.Client))
]]></dw:set-variable>
      </dw:transform-message>
    </sub-flow>
    <sub-flow name="afcars-foster-care-filter-out-age-18-Sub_Flow">
        <logger level="INFO" doc:name="Logger" message="Filter Out above 18 Age "/>
        <foreach collection="#[flowVars.reportCustodyPersonIDList]" doc:name="For Each" batchSize="150">
            <dw:transform-message doc:name="Get Comma Separated Person Id List">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Birthdate from contact where id In (#[payload]) " doc:name="Salesforce"/>
            <dw:transform-message doc:name="Transform Message Calculate Age for each Person">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Id : $.Id,
	Age: abs ( ((flowVars.extractInfo.ReportStartDate as :date) - $.Birthdate).years ) default "0"
}]]></dw:set-payload>
            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message Filter Out Person with Age 18">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter ($.Age < 18)]]></dw:set-payload>

            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $.Id]]></dw:set-payload>

            </dw:transform-message>	
             <dw:transform-message doc:name="Transform Message">
                <dw:set-variable variableName="Age18"><![CDATA[%dw 1.0
%output application/java
---
( (payload default []) ++ (flowVars.Age18 default []) )]]></dw:set-variable>

            </dw:transform-message>

        </foreach>
    </sub-flow>
    <sub-flow name="afcars-fostercare-get-CourtOrder-Sub_Flow" doc:description="Flow to get Court Order details for Element 5">
        <logger message="Get Court Order details for Element 5" level="INFO" doc:name="Logger : Court Order Details"/>
        <foreach collection="#[flowVars.ClientIDList]" doc:name="For Each" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ ($) ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>

        <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Name__c,Children_Court_Order__r.Court_Order_Hearing_Date_formula__c from DEL_Person_Involved__c where  Children_Court_Order__r.Court_Order_Status__c='Completed' and  ( Children_Court_Order__r.RecordType.DeveloperName='Guardianship_Hearing' OR  Children_Court_Order__r.Order_Type__c in ('Adjudicatory','Combined Adjudicatory and Dispositional Hearing','Combined Adjudicatory','Combined Preliminary Protective and Dispositional Hearing','Combined Preliminary Protective and Adjudicatory','Court Review','Dispositional' , 'Permanency', 'Guardianship','Post Permanency Review')) and Children_Court_Order__r.Custodian__c != 'DYRS' and Children_Court_Order__r.Court_Order_Hearing_Date_formula__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Name__c in (#[payload]) order by Children_Court_Order__r.Court_Order_Hearing_Date_formula__c desc" doc:name="Salesforce : Get Hearing Date" doc:description="Get Court Order Hearing Date from Person Involved Query"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
<dw:transform-message doc:name="TM : Get Records in Canonical format">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      PersonID:$.Name__c,
      StartDate:$.Children_Court_Order__r.Court_Order_Hearing_Date_formula__c
      } filter ( ($.StartDate != null) and  ( (($.StartDate > (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval as :date {format : "yyyyMMdd"}) ) when (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval != null) otherwise true ) and ($.StartDate < flowVars.extractInfo.ReportEndDate) ))]]></dw:set-payload>
            </dw:transform-message>
            

            <dw:transform-message doc:name="Transform Message : Court order">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CourtOrder"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CourtOrder default []) ++ (payload default [])]]></dw:set-variable>
            </dw:transform-message>
     
        </foreach>
        <foreach collection="#[flowVars.ClientIDList]" doc:name="For Each" batchSize="150">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ ($) ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
	    <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Child_Name__c, Hearing_Date__c from DEL_Child_Placement_Review__c  where  Status__c='Completed' and  Child_Name__c  in (#[payload]) and Hearing_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] order by Hearing_Date__c desc" doc:name="Salesforce : Query Plcement Review"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
<dw:transform-message doc:name="TM : Get Records in Canonical format">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      PersonID:$.Child_Name__c,
      StartDate:$.Hearing_Date__c
      } filter ( ($.StartDate != null) and  ( (($.StartDate > (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval as :date {format : "yyyyMMdd"}) ) when (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval != null) otherwise true ) and ($.StartDate < flowVars.extractInfo.ReportEndDate) ))]]></dw:set-payload>
            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message : Court order">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CourtOrder"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CourtOrder default []) ++ (payload default [])]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
             <dw:transform-message doc:name="Transform Message : Hearing Date Grouping by Person ID">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CourtOrder"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.CourtOrder default []) groupBy $.PersonID) when ( (sizeOf (flowVars.CourtOrder default [])) > 0) otherwise {}]]></dw:set-variable>
            </dw:transform-message>
             <dw:transform-message doc:name="Transform Message : Hearing Date Combined">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CourtOrder"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CourtOrder default {}) mapObject {
	($$ as :string) : ($ orderBy $.StartDate)[-1..0]
}]]></dw:set-variable>
            </dw:transform-message>            
    </sub-flow>
    <sub-flow name="afcars-VI-E-Eligibility-Sub_Flow">
        <logger level="INFO" doc:name="Logger" message="Check Age and VI-E Eligibility for records"/>
        <foreach collection="#[flowVars.ClientIDList]" doc:name="For Each" batchSize="150">
            <dw:transform-message doc:name="Get Comma Separated Person Id List">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Birthdate from contact where id In (#[payload]) " doc:name="Salesforce"/>
            <dw:transform-message doc:name="Transform Message Calculate Age for each Person">
                <dw:set-variable variableName="DateOfDischarge"><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Id : $.Id,
	//VI-E: "Yes" when (flowVars.reportParams.clientIds[0] default [] contains $.Id) otherwise "No"
	VI-E:  "Yes" when ( (flowVars.Element59 contains $.Id) and ((flowVars.reportParams.clientIds[0][$.Id] as :date ) > (($.Birthdate as :date) + |P18Y|)) ) otherwise "No",
	AgeAtEnd: abs ( ((flowVars.extractInfo.ReportEndDate as :date) - $.Birthdate).years ) default "0",
	AgeAtStart: abs ( ((flowVars.extractInfo.ReportStartDate as :date) - $.Birthdate).years ) default "0"
	//DOB18 : (($.Birthdate as :date) + |P18Y|)
}]]></dw:set-variable>
            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message scenario For Discharge Date">
                <dw:set-variable variableName="scenarioForDischargeDate"><![CDATA[%dw 1.0
%output application/java
---
flowVars.DateOfDischarge map {
	Id : $.Id,
	scenario : "1" when (($.AgeAtEnd < 18) and ($.VI-E == "Yes")) 
		otherwise "2" when (($.AgeAtEnd < 18) and ($.VI-E == "No"))
		otherwise "3" when (($.AgeAtStart < 18 and $.AgeAtEnd >= 18 ) and ($.VI-E == "Yes"))
		otherwise "4" when (($.AgeAtStart < 18 and $.AgeAtEnd >= 18 ) and ($.VI-E == "No")) otherwise ""
}]]></dw:set-variable>

            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add to scenarioForDischargeDate Array">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="scenarioForDischargeDateArray"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.scenarioForDischargeDateArray default {} ) ++ (flowVars.scenarioForDischargeDate)]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
        <dw:transform-message doc:name="Transform Message : Group by Person ID">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="scenarioForDischargeDate"><![CDATA[%dw 1.0
%output application/java
---
flowVars.scenarioForDischargeDateArray default [] groupBy $.Id]]></dw:set-variable>
        </dw:transform-message>

        <!-- <logger message="#[payload]" level="INFO" doc:name="Logger"/> -->

   

    </sub-flow>
        <sub-flow name="afcars-foster-care-EpisodeList-Sub_Flow" doc:description="Flow to calculate Episode related information required for various elements">
        <logger message="Get Episodes List information" level="INFO" doc:name="Logger : Episodes list information"/>
        <foreach collection="#[flowVars.EpisodeRecords]" doc:name="For Each Episode Record">
            <message-properties-transformer doc:name="Message Properties : Create required variables" scope="invocation">
                <add-message-property key="StartDate" value="#[payload.EpisodeStartDate]"/>
                <add-message-property key="EndDate" value="#[payload.EpisodeEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):payload.EpisodeEndDate]"/>
                <add-message-property key="AFCARS" value="#[payload]"/>
                <add-message-property key="ID" value="#[payload.PersonID]"/>
            </message-properties-transformer>
            <dw:transform-message doc:name="Transform Message : Filter Custody List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.CustodyList filter (($.PersonID == flowVars.ID) and ( ($.CustodyStartDate >= flowVars.StartDate and $.CustodyStartDate <= flowVars.EndDate) or ($.CustodyEndDate >= flowVars.StartDate and $.CustodyEndDate <= flowVars.EndDate) or ($.CustodyStartDate <= flowVars.StartDate and $.CustodyEndDate >= flowVars.EndDate) ) ) map {
      ID:$.CustodyID,
      CustodyStart:$.CustodyStartDate ,
      PersonID:$.PersonID as :string default '',
      CustodyEnd:$.CustodyEndDate,
      CustodyCompleteDate : $.CompletedDate,
      CourtOrderCompletedDate : $.CourtOrderCompletedDate,
      InitialCompletionDate : $.InitialCompletionDate 
} distinctBy $.ID]]></dw:set-payload>
            </dw:transform-message>

            <choice doc:name="Choice: Check if AFCARS Episode">
                <when expression="#[payload.size() &gt; 0]">
                    <dw:transform-message doc:name="Transform Message : AFCUS and AfcarsCustody">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AFCUS"><![CDATA[%dw 1.0
%output application/java
---
[{
      IDEpisode:flowVars.AFCARS.IDEpisode,
      PersonID:flowVars.AFCARS.PersonID ,
      PID:flowVars.AFCARS.PID,
      EpisodeStartDate:flowVars.AFCARS.EpisodeStartDate as :date default '',
      EpisodeEndDate:flowVars.AFCARS.EpisodeEndDate as :date default '',
      RemovalReason:flowVars.AFCARS.RemovalReason,
      Placement:flowVars.AFCARS.Placement default {},
      Runaway:flowVars.AFCARS.Runaway default {},
      LatestCustodyStartDate:payload[((sizeOf payload) - 1)].CustodyStart as :date default '' ,
      LatestCustodyEndDate:payload[((sizeOf payload) -1)].CustodyEnd as :date default '',
      FirstCustodyStartDate:payload[0].CustodyStart as :date default '' ,
      FirstCustodyEndDate:payload[0].CustodyCompleteDate as :date default ''
}]]]></dw:set-variable>
                        <dw:set-variable variableName="AfcarsCustody"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AfcarsCustody default {}) ++ ((payload) default {})]]></dw:set-variable>
						<dw:set-variable variableName="AllAFCUS"><![CDATA[%dw 1.0
%output application/java
---
[{
      IDEpisode:flowVars.AFCARS.IDEpisode,
      PersonID:flowVars.AFCARS.PersonID ,
      PID:flowVars.AFCARS.PID,
      EpisodeStartDate:flowVars.AFCARS.EpisodeStartDate as :date default '',
      EpisodeEndDate:flowVars.AFCARS.EpisodeEndDate as :date default '',
      RemovalReason:flowVars.AFCARS.RemovalReason,
      Placement:flowVars.AFCARS.Placement default {},
      FacilityType : flowVars.AFCARS.Placement map $.FacilityType default "",           
	  CaseType : flowVars.AFCARS.Placement map $.CaseType default "",
	  PlacementLessThan24Hours : flowVars.AFCARS.Placement map $.PlacementLessThan24Hours default "",
      Runaway:flowVars.AFCARS.Runaway default {}      
}]]]></dw:set-variable>
	  <dw:set-variable variableName="PreviousCustodyLatestAfcars"><![CDATA[%dw 1.0
%output application/java
---
[{
      IDEpisode:flowVars.AFCARS.IDEpisode,
      PersonID:flowVars.AFCARS.PersonID ,
      PID:flowVars.AFCARS.PID,
      EpisodeStartDate:flowVars.AFCARS.EpisodeStartDate as :date default '',
      EpisodeEndDate:flowVars.AFCARS.EpisodeEndDate as :date default '',
      RemovalReason:flowVars.AFCARS.RemovalReason,
      Placement:flowVars.AFCARS.Placement default {},
      FacilityType : flowVars.AFCARS.Placement map $.FacilityType default "",           
	  CaseType : flowVars.AFCARS.Placement map $.CaseType default "",
	  PlacementLessThan24Hours : flowVars.AFCARS.Placement map $.PlacementLessThan24Hours default "",
      Runaway:flowVars.AFCARS.Runaway default {}      
}] when ((flowVars.PreviousCustody.PersonID == flowVars.ID) and ( (flowVars.PreviousCustody.CustodyStartDate >= flowVars.StartDate and flowVars.PreviousCustody.CustodyStartDate <= flowVars.EndDate) or (flowVars.PreviousCustody.CustodyEndDate >= flowVars.StartDate and flowVars.PreviousCustody.CustodyEndDate <= flowVars.EndDate) or (flowVars.PreviousCustody.CustodyStartDate <= flowVars.StartDate and flowVars.PreviousCustody.CustodyEndDate >= flowVars.EndDate) ) ) otherwise [] ]]></dw:set-variable>

                    </dw:transform-message>
                    <dw:transform-message doc:name="Transform Message : AFCARS Episode List">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AfcarsEpisodeList default {}) ++ ((flowVars.AFCUS ) default {})]]></dw:set-variable>
						<dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AllAfcarsEpisodeList default {}) ++ ((flowVars.AllAFCUS ) default {})]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PrevCustodyEpisodeList default {}) ++ ((flowVars.PreviousCustodyLatestAfcars ) default {})]]></dw:set-variable>
                    </dw:transform-message>
                </when>
                <otherwise>
                    <logger level="INFO" doc:name="Logger" message="Not an AFCARS Episode."/>
                </otherwise>
            </choice>
        </foreach>
        <dw:transform-message doc:name="Transform Message: Afcars Episode List">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AfcarsEpisodeList orderBy $.EpisodeStartDate) when ((flowVars.AfcarsEpisodeList != null) and ((sizeOf flowVars.AfcarsEpisodeList) > 0) ) otherwise [] ]]></dw:set-variable>
            <dw:set-variable variableName="AfcarsCustody"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AfcarsCustody distinctBy $.ID) when ((flowVars.AfcarsCustody != null) and ((sizeOf flowVars.AfcarsCustody) > 0) ) otherwise []]]></dw:set-variable>
<dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList default [] orderBy $.EpisodeStartDate]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList default [] orderBy $.EpisodeStartDate]]></dw:set-variable>
        </dw:transform-message>
	<dw:transform-message doc:name="Transform Message Reduce Placement Runaway">
			<dw:set-variable variableName="reducePR"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.AfcarsEpisodeList groupBy $.PersonID) map {
      Placement: (((($.Placement) reduce ($$ ++ $)) default {}) when ($.Placement != null) otherwise {}),
      Runaway: (((($.Runaway) reduce ($$ ++ $)) default {}) when ($.Runaway != null) otherwise {})
}) groupBy $[0].PersonID[0]]]></dw:set-variable>
		</dw:transform-message>
		<dw:transform-message doc:name="Transform Message: Reduce Afcars Episode List">
			<dw:set-variable variableName="AfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsEpisodeList map {
      IDEpisode:$.IDEpisode,
      PersonID:$.PersonID,
      PID:$.PID,
      EpisodeStartDate:$.EpisodeStartDate default '',
      EpisodeEndDate:$.EpisodeEndDate default '',
      RemovalReason:$.RemovalReason,
      Placement:flowVars.reducePR[$.PersonID].Placement[0],
      Runaway:flowVars.reducePR[$.PersonID].Runaway[0],
      LatestCustodyStartDate:$.LatestCustodyStartDate default '' ,
      LatestCustodyEndDate:$.LatestCustodyEndDate default '',
      FirstCustodyStartDate:$.FirstCustodyStartDate default '' ,
      FirstCustodyEndDate:$.FirstCustodyEndDate default ''  
}]]></dw:set-variable>

		</dw:transform-message>
        <message-properties-transformer scope="invocation" doc:name="Message Properties : AfcarsList">
            <add-message-property key="AfcarsList" value="#[flowVars.AfcarsEpisodeList]"/>
        </message-properties-transformer>

        <dw:transform-message doc:name="Transform Message : AFCARS Transformations">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsEpisodeList groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstAfcarsCustody"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsCustody distinctBy $.PersonID]]></dw:set-variable>
        </dw:transform-message>
        <!--<message-properties-transformer scope="invocation" doc:name="Reduce Placement and Runaway for AfcarsEpisodeList">
            <add-message-property key="AfcarsEpisodeListPlacement" value="#[dw('flowVars.AfcarsEpisodeList map (($.Placement reduce ($ ++ $$)) groupBy $.PersonID)')]"/>
            <add-message-property key="AfcarsEpisodeListRunaway" value="#[dw('flowVars.AfcarsEpisodeList map (($.Runaway reduce ($ ++ $$)) groupBy $.PersonID)')]"/>
            <add-message-property key="AfcarsEpisodeListLatestCustodyStartDate" value="#[dw('flowVars.AfcarsEpisodeList map (($.LatestCustodyStartDate[-1]))')]"/>
            <add-message-property key="AfcarsEpisodeListLatestCustodyEndDate" value="#[dw('flowVars.AfcarsEpisodeList map (($.LatestCustodyEndDate[-1]))')]"/>
            <add-message-property key="AfcarsEpisodeListFirstCustodyStartDate" value="#[dw('flowVars.AfcarsEpisodeList map (($.FirstCustodyStartDate[0]))')]"/>
            <add-message-property key="AfcarsEpisodeListFirstCustodyEndDate" value="#[dw('flowVars.AfcarsEpisodeList map (($.FirstCustodyEndDate[0]))')]"/>
        </message-properties-transformer>
        <dw:transform-message doc:name="Club placements and runaways">
            <dw:set-variable variableName="AfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java

(flatten flowVars.AfcarsEpisodeList) map {
	IDEpisode : $.IDEpisode,
	PersonID : $.PersonID,
	PID : $.PID,
	EpisodeStartDate:$.EpisodeStartDate,
    EpisodeEndDate:$.EpisodeEndDate,
	RemovalReason:$.RemovalReason,
    Placement: flowVars.AfcarsEpisodeListPlacement[$.PersonID][0],
    Runaway: flowVars.AfcarsEpisodeListRunaway[$.PersonID][0],
    LatestCustodyStartDate: $.LatestCustodyStartDate,
    LatestCustodyEndDate:$.LatestCustodyEndDate,
	FirstCustodyStartDate : $.FirstCustodyStartDate,
	FirstCustodyEndDate : $.FirstCustodyEndDate
} groupBy $.PersonID]]></dw:set-variable>
        	
        </dw:transform-message>-->
        <dw:transform-message doc:name="Get Latest AFCARS and First AFCARS">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestAfcars"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsEpisodeList map $[(sizeOf ($) ) - 1] default {}]]></dw:set-variable>
            <dw:set-variable variableName="FirstAfcars"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsEpisodeList map $[0] default {}]]></dw:set-variable>
            <dw:set-variable variableName="ClientIDList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.reportCustodyPersonIDList) when (flowVars.extractInfo.RunForPID == "No") otherwise ([flowVars.extractInfo.RunForPID] when (flowVars.reportCustodyPersonIDList contains flowVars.extractInfo.RunForPID) otherwise [] )  ]]></dw:set-variable>
            <dw:set-variable variableName="FirstAfcarsCustody"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstAfcarsCustody groupBy $.PersonID default []]]></dw:set-variable>
		<dw:set-variable variableName="GroupAfcarsCustody"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AfcarsCustody default [] map {
	ID:$.ID,
      CustodyStart:$.CustodyStart ,
      PersonID:$.PersonID as :string default '',
      CustodyEnd:$.CustodyEnd when ($.CustodyEnd != "2999-01-01") otherwise "",
      CustodyCompleteDate : $.CustodyCompleteDate,
      CourtOrderCompletedDate : $.CourtOrderCompletedDate,
      InitialCompletionDate : $.InitialCompletionDate 
}  groupBy $.PersonID ]]></dw:set-variable>


        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message Last and Group Latest AFCARS">
			<dw:input-payload mimeType="application/java"/>
            <dw:set-variable variableName="GroupLatestAfcars"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LatestAfcars groupBy $.PersonID default []]]></dw:set-variable>
        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Group All AFCARS Episodes">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList filter ( ( ( sizeOf ( ($.Placement default []) filter ((($.CaseType default "") != "Detention") and ( not ($.PlacementLessThan24Hours) ) and ($.EndDate != $.StartDate ) ) ) ) > 0 ) ) default [] groupBy $.PersonID
]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList default [] groupBy $.PersonID
]]></dw:set-variable>


        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Calculate Element 19">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element19"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList default [] map {
      Size: (sizeOf ($) ) default 0 ,
      PersonID:$.PersonID[0]
            
      }]]></dw:set-variable>
            <dw:set-variable variableName="LastAfcars"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList map $[(sizeOf ($) ) - 1].Placement default {} ]]></dw:set-variable>

        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Calculate 20">
            
            <dw:set-variable variableName="LastAfcarsPlacement"><![CDATA[%dw 1.0
%output application/java
---
flatten flowVars.LastAfcars filter $.Division == "DFS" default {} ]]></dw:set-variable>

        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Group data">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element19"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element19  groupBy $.PersonID) when (flowVars.Element19 != null) otherwise {}]]></dw:set-variable>
            <dw:set-variable variableName="LastAfcarsPlacement"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LastAfcarsPlacement groupBy $.PersonID default []]]></dw:set-variable>

        </dw:transform-message>

       

    </sub-flow>
                    
<sub-flow name="afcars-PlacementRunawayTrial--Sub_Flow" doc:description="Flow to calculate Placement and Runaway related information which will be required for various elements.">
        <logger message="Calculating Placements and Runway Specific information" level="INFO" doc:name="Logger : Placement and Runaway specific information"/>
        <foreach collection="#[flowVars.LatestAfcars]" doc:name="For Each : Latest AFCARS">
            <message-properties-transformer scope="invocation" doc:name="Message Properties : Create Required Variables">
                <add-message-property key="EpStartDate" value="#[payload.LatestCustodyStartDate]"/>
                <add-message-property key="EpEndDate" value="#[payload.LatestCustodyEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):(payload.EpisodeEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):payload.EpisodeEndDate)]"/>
                <add-message-property key="Custody" value="#[payload]"/>
                <add-message-property key="ID" value="#[payload.PersonID]"/>
                <add-message-property key="Placement" value="#[payload.Placement == null ? {}:payload.Placement]"/>
                <add-message-property key="Runaway" value="#[payload.Runaway == null ? {} :payload.Runaway]"/>
                <add-message-property key="EndDate" value="#[payload.EpisodeEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):payload.EpisodeEndDate]"/>
                <add-message-property key="StartDate" value="#[payload.EpisodeStartDate]"/>
                <add-message-property key="LatestCustodyStartDate" value="#[payload.LatestCustodyStartDate]"/> 
            </message-properties-transformer>
            <!--<logger message="Counter:#[flowVars.counter]" level="INFO" doc:name="Logger"/>
            <logger message="#[payload]" level="INFO" doc:name="Logger"/> -->
            <dw:transform-message doc:name="Transform Message : Filter Placement">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
( flowVars.Placement filter ( ($.StartDate <= flowVars.StartDate and ($.EndDate is :string) and ($.EndDate == '')) or ($.StartDate >= flowVars.StartDate and $.StartDate <= flowVars.EndDate) or ( ( (not ($.EndDate is :string))  ) and (  ($.EndDate >= flowVars.StartDate and $.EndDate <= flowVars.EndDate) or ($.StartDate <= flowVars.StartDate and $.EndDate >= flowVars.EndDate) ) )  ) map {
      ($)
}  )]]></dw:set-payload>	
                <dw:set-variable variableName="FilterRunaway"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.Runaway filter (( ($.StartDate >= flowVars.StartDate and $.StartDate <= flowVars.EndDate) or ($.EndDate >= flowVars.StartDate and $.EndDate <= flowVars.EndDate) or ($.StartDate <= flowVars.StartDate and $.EndDate >= flowVars.EndDate) ) ) map {
      ($)
} orderBy $.EndDate2 )]]></dw:set-variable>
                <dw:set-variable variableName="FilterPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.Placement filter (( ($.StartDate >= flowVars.EpStartDate and $.StartDate <= flowVars.EpEndDate) or ($.StartDate == flowVars.EpStartDate and $.EndDate == flowVars.EpEndDate) ) ) map {
      ($)
} orderBy $.StartDate )]]></dw:set-variable>
                <dw:set-variable variableName="FilterRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.Runaway filter (( ($.StartDate >= flowVars.EpStartDate and $.StartDate <= flowVars.EpEndDate) or ($.EndDate == flowVars.EpStartDate and $.EndDate == flowVars.EpEndDate) ) ) map {
      ($)
} orderBy $.StartDate )
]]></dw:set-variable>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Filter Placement for Element 23">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestPlacement23"><![CDATA[%dw 1.0
%output application/java
---
payload filter ( not 
       ( "( \"Adoption Pre-Placement Visit\",\"Adoption Pre-placement Visit\",\"Foster Care - Respite\",\"Foster Care Pre-Placement (DFS Foster Family)\",\"Foster Care Pre-Placement (Non-Paid Relative)\",\"Foster Care Pre-Placement (Private Agency)\",\"Foster Care Pre-Placement (Non-Paid Non-Relative )\",\"Multi-Systemic Therapy\" )" 
              contains ("\"" ++ $.ServiceTaxanomyLevel1CodeFacts ++ "\"")
      )
) map $]]></dw:set-variable>
            </dw:transform-message>
                                        		
            <dw:transform-message doc:name="Transform Message : Combine Placement and Runaway and TRU for element 23">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestPlacementOrTRU23"><![CDATA[%dw 1.0
%output application/java
---
( (flowVars.LatestPlacement23 default []) ++ (flowVars.FilterRunaway default []) ++ (flowVars.GroupedTRUPlacements[flowVars.ID] default [])  )   ]]></dw:set-variable>
            </dw:transform-message>

            <dw:transform-message doc:name="Transform Message : Latest Placement for Element 23">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestPlacement23"><![CDATA[%dw 1.0
%output application/java
%function checkPriority(placement) (0 when ((placement.PlacementID != null) and (placement.HomePlacement == "")) otherwise (1 when ((placement.HomePlacement default "") == "Trial Reunification") otherwise (2 when (placement.RunawayID != null) otherwise 3) ) )
%var latestEndDate2 = ((flowVars.LatestPlacement23 orderBy $.EndDate2)[-1..0])[0].EndDate2
---
(((flowVars.LatestPlacement23 filter ($.EndDate2 == latestEndDate2 ) ) orderBy $.StartDate)[-1..0]) orderBy checkPriority($)[0..-1] ]]></dw:set-variable>
            </dw:transform-message>				

            <dw:transform-message doc:name="Transform Message : Latest Placement or Runaway or TRU for element 23">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestPlacementOrTRU23"><![CDATA[%dw 1.0
%output application/java
%function checkPriority(placement) (0 when ((placement.PlacementID != null) and (placement.HomePlacement == "")) otherwise (1 when ((placement.HomePlacement default "") == "Trial Reunification") otherwise (2 when (placement.RunawayID != null) otherwise 3) ) )
%var latestEndDate2 = ((flowVars.LatestPlacementOrTRU23 orderBy $.EndDate2)[-1..0])[0].EndDate2
---
( ( (flowVars.LatestPlacementOrTRU23 filter ($.EndDate2 == latestEndDate2 ) ) orderBy $.StartDate)[-1..0] ) orderBy checkPriority($)[0..-1] ]]></dw:set-variable>
            </dw:transform-message>			
			
            <dw:transform-message doc:name="Transform Message : Calculate First Placement and Runaways">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestPlacement"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacement default {}) + (( ((payload default []) orderBy $.EndDate2)[((sizeOf payload)-1)] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstPlacement"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstPlacement default {}) + ((payload[0] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="LatestRunaway"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestRunaway default {}) + ((flowVars.FilterRunaway[((sizeOf flowVars.FilterRunaway)-1)] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstRunaway"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstRunaway default {}) + ((flowVars.FilterRunaway[0] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstPlacementforE default {}) + ((flowVars.FilterPlacementforE[0] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstDFSFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstDFSFosterCarePlacementforE default {}) + ( (flowVars.FilterPlacementforE filter (($.Division == "DFS") and ($.ServiceFosterCareSettingType == "Foster Care")  ) )[0] default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstFosterCarePlacementforE default {}) + ( (flowVars.FilterPlacementforE filter (((($.Division != "DYRS") or ($.Division != "DPBHS")) and (($.EndDate2 - |P14D|) >= $.StartDate)) or ($.ServiceFosterCareSettingType == "Foster Care")))[0] default {})]]></dw:set-variable>
                <dw:set-variable variableName="FirstRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstRunawayforE default {}) + ((flowVars.FilterRunawayforE[0] ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="LatestPlacementfor23"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacementfor23 default {}) + ((flowVars.LatestPlacement23[0] ) default {})]]></dw:set-variable>

                <dw:set-variable variableName="LatestPlacementOrTRUfor23"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacementOrTRUfor23 default {}) + ((flowVars.LatestPlacementOrTRU23[0] ) default {})]]></dw:set-variable>
            </dw:transform-message>
            
        </foreach>

        <dw:transform-message doc:name="Transform Message">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstPlacementforE default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstDFSFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstDFSFosterCarePlacementforE default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>   
            <dw:set-variable variableName="FirstFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstFosterCarePlacementforE default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>           
            <dw:set-variable variableName="FirstRunaway"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstRunaway default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestRunaway"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.LatestRunaway default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstPlacement"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstPlacement default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestPlacement"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.LatestPlacement default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.EndDate2 ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstRunawayforE default [] filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate ) distinctBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestPlacementfor23"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.LatestPlacementfor23 default [] filter ((sizeOf $) > 0) map {
      ($)
      } ) distinctBy $.PersonID]]></dw:set-variable>     

            <dw:set-variable variableName="LatestPlacementOrTRUfor23"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.LatestPlacementOrTRUfor23 default [] filter ((sizeOf $) > 0) map {
      ($)
      }  ) distinctBy $.PersonID]]></dw:set-variable>	  
        </dw:transform-message>
        
        <dw:transform-message doc:name="Transform Message : Group the Placements">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="GroupFirstPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstPlacementforE groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="GroupFirstDFSFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstDFSFosterCarePlacementforE groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="GroupFirstFosterCarePlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstFosterCarePlacementforE default [] ) groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="GroupFirstRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstRunawayforE groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstPRforE"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FirstPlacementforE default [] ) ++ ( flowVars.FirstRunawayforE default [])
//( flowVars.FirstFosterCarePlacementforE default [] ) ++ ( flowVars.FirstRunawayforE default [])
]]></dw:set-variable>

            <dw:set-variable variableName="FirstRunaway"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstRunaway groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestRunaway"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LatestRunaway groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="FirstPlacement"><![CDATA[%dw 1.0
%output application/java
---
flowVars.FirstPlacement groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestPlacement"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LatestPlacement groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestPlacementfor23"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LatestPlacementfor23 groupBy $.PersonID]]></dw:set-variable>
            <dw:set-variable variableName="LatestPlacementOrTRUfor23"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LatestPlacementOrTRUfor23 groupBy $.PersonID]]></dw:set-variable>
        </dw:transform-message>
		
        
        <dw:transform-message doc:name="Transform Message : Group First Placement Or Runaways and get Latest Placement Array">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstPRforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstPRforE filter (((sizeOf $) > 1)) map {
      ($)
} orderBy $.StartDate
) groupBy $.PersonID
]]></dw:set-variable>
           <dw:set-variable variableName="LatestPlacementArray"><![CDATA[%dw 1.0
%output application/java
---
(flatten ( (flowVars.LatestPlacementfor23 default {}) pluck $))
]]></dw:set-variable>
        </dw:transform-message>

    </sub-flow>
    <sub-flow name="afcars-fostercare-get-firstPlacement-Sub_Flow" doc:description="Flow to get First Placement information">
        <logger message="Get First Placement and Runaway details" level="INFO" doc:name="Logger : First Placement and runaway details"/>
       <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstPlacementClause"><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ ($) ++ "'")) joinBy ","]]></dw:set-variable>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Foster_Care_Setting_Type__c,Contact__c,Case_Number__c,Completed_Date__c,Case_Number__r.County__c,Placement_Episode__c, Placement_Start_Date__c,Placement_End_date__c, Service_taxanomy__r.Foster_Care_Setting_Type__c from DEL_Placement__c where Contact__c IN (#[flowVars.FirstPlacementClause]) and Latest_Version_Placement__c = true and Placement_Status__c in ('Admitted','Discharged') and Placement_Start_Date__c != null and Service_taxanomy__r.Foster_Care_Setting_Type__c = 'Foster Care' and ( not (Service_taxanomy__r.Level_One__c = 'Foster Care' and Service_taxanomy__r.Level_Two_Services__c = 'Foster Care - DFS Supervision' )) and Placement_Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate]  Order By Placement_Start_Date__c" doc:name="Salesforce : Get all foster care Placement Records Before Report end"/>
        <dw:transform-message doc:name="Transform Message : Get List from Iterator">
            <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map $]]></dw:set-payload>
        </dw:transform-message>
            <dw:transform-message doc:name="Transform Placement Records">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstEverPlacement"><![CDATA[%dw 1.0
%output application/java
---
payload map {
            PlacementID:$.Id,
            PersonID:$.Contact__c,
          	StartDate:$.Placement_Start_Date__c as :date default '',
           	PlacementEnd:$.Placement_End_date__c as :date default '',
            Case:$.Case_Number__c,
            CaseCounty:$.Case_Number__r.County__c,
            FosterCareSetting : $.Foster_Care_Setting_Type__c,
            Episode:$.Placement_Episode__c,
            CompletedDate : ($.Completed_Date__c as :date) when ($.Completed_Date__c != null) otherwise null
      } distinctBy $.PersonID]]></dw:set-variable>

            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Client_Name__c,Runaway_End_Date_Time__c, Runaway_Start_Date_Time__c from DEL_Runaway__c where Runaway_Status__c !='' and Client_Name__c in (#[flowVars.FirstPlacementClause]) and Runaway_Start_Date_Time__c != null and Runaway_Start_Date_Time__c &lt;= #[flowVars.extractInfo.ReportEndDate]T00:00:00Z Order By Runaway_Start_Date_Time__c " doc:name="Salesforce : Get All Runways Before Report End Date"/>
            <dw:transform-message doc:name="Transform Runaway Data">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstEverRunaway"><![CDATA[%dw 1.0
%output application/java
---
payload map {
      RunawayID:$.Id,
      PersonID:$.Client_Name__c,
      EndDate:$.Runaway_End_Date_Time__c,
      StartDate:$.Runaway_Start_Date_Time__c
} distinctBy $.PersonID]]></dw:set-variable>

            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Combine Placement and Runaways">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstEverPlacement default [] ) ++ ( flowVars.FirstEverRunaway default []) ]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Get Lowest date out of First Ever Placement and Runway">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(( payload filter ((sizeOf $) > 0) map {
      ($)
      } orderBy $.StartDate )) distinctBy $.PersonID]]></dw:set-payload>
            </dw:transform-message>
            
             <dw:transform-message doc:name="Transform Message : Add Grouped data within Loop">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FirstEverPR"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FirstEverPR default {}) ++ ((payload groupBy $.PersonID) default {})]]></dw:set-variable>

            </dw:transform-message>
                       
        </foreach>
    </sub-flow>
    <sub-flow name="afcars-foster-care-LatestHomeRemoval">
        <dw:transform-message doc:name="TM:Latest Home Removal">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="LatestHomeRemoval"><![CDATA[%dw 1.0
%output application/java
---
flowVars.ClientIDList filter ((flowVars.GroupAfcarsCustody[$][-1].CustodyStart != null) and (flowVars.FirstPRforE[$][0].StartDate != null) ) map {
      PersonID:$,
      //LatestHomeRemoval: ((flowVars.FirstPRforE[$][0].StartDate when (flowVars.FirstPRforE[$][0].StartDate >= flowVars.GroupLatestAfcars[$][0].FirstCustodyStartDate) otherwise flowVars.GroupLatestAfcars[$][0].FirstCustodyStartDate ) as :date as :string {format:"yyyyMMdd"} ) default ""
      LatestHomeRemoval: ((flowVars.FirstPRforE[$][0].StartDate when (flowVars.FirstPRforE[$][0].StartDate >= flowVars.GroupAfcarsCustody[$][-1].CustodyStart) otherwise flowVars.GroupAfcarsCustody[$][-1].CustodyStart ) as :date as :string {format:"yyyyMMdd"} ) default ""
} groupBy $.PersonID]]></dw:set-variable>
        </dw:transform-message>

    </sub-flow>
    <sub-flow name="afcars-fostercare-casePlan-records-Sub_Flow" doc:description="Flow to get Case Plan and Permanency Comitee Review related information for Element 43">
        <logger message="Get Plan details" level="INFO" doc:name="Logger : Plan Details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Clausefor43"><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-variable>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Child_Plan_Status__c,Child_Plan_Review_Status__c,Primary_Goal__c,Client_ID__c,Child_Plan_Date__c,Child_Plan_Review_Date__c  from DEL_Case_Plan__c where ( (RecordType.DeveloperName ='Complete_Child_Plan' AND Child_Plan_Status__c='Completed' AND (Child_Plan_Date__c != null AND Child_Plan_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) ) OR ( RecordType.DeveloperName ='Complete_Child_Plan_Review' AND Child_Plan_Review_Status__c = 'Completed' AND (Child_Plan_Review_Date__c != null AND Child_Plan_Review_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) ) ) and Client_ID__c in (#[flowVars.Clausefor43])" doc:name="Salesforce Case Plan"/>
            <dw:transform-message doc:name="Transform Message : Case Plan details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CasePlan"><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id,
      PlanStatus: $.Child_Plan_Status__c when ($.Child_Plan_Status__c != null) otherwise ($.Child_Plan_Review_Status__c default ""),
      PrimaryGoal:$.Primary_Goal__c when ($.Primary_Goal__c != null) otherwise $.Family_Goal__c default "",
      PersonID:$.Client_ID__c,
      StartDate: $.Child_Plan_Date__c when ( ($.Child_Plan_Date__c != null) and (($.Child_Plan_Status__c default "") == "Completed" ) ) otherwise ($.Child_Plan_Review_Date__c when ( ($.Child_Plan_Review_Date__c != null) and ( ($.Child_Plan_Review_Status__c default "") == "Completed" ) ) otherwise null  ),
      LastModifiedDate: $.Child_Plan_Date__c when ( ($.Child_Plan_Date__c != null) and (($.Child_Plan_Status__c default "") == "Completed" ) ) otherwise ($.Child_Plan_Review_Date__c when ( ($.Child_Plan_Review_Date__c != null) and ( ($.Child_Plan_Review_Status__c default "") == "Completed" ) ) otherwise null  )     
      } filter ( ($.StartDate != null) and ( (($.StartDate >= (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval as :date {format : "yyyyMMdd"}) ) when (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval != null) otherwise true ) and ($.StartDate < flowVars.extractInfo.ReportEndDate )))]]></dw:set-variable>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Id,Status__c,Primary_Goal__c,Completed_Date__c,Committee_Meeting_Date__c,Client_RecordId__c,Permanency_Committee_Referral__r.Case_Person__r.Person__c from DEL_Permanency_Committee_Review__c where Status__c='Completed' and Committee_Meeting_Date__c!=null and Committee_Meeting_Date__c &lt;=#[flowVars.extractInfo.ReportEndDate] and RecordType.Name in ('Permanency Committe Review Checklist','Permanency Committee Review') and Permanency_Committee_Referral__r.Case_Person__r.Person__c in (#[flowVars.Clausefor43]) order by  Committee_Meeting_Date__c desc" doc:name="Salesforce Permanency Comitee "/>
            <dw:transform-message doc:name="Transform Message : Plan Commitee details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="PlanCommittee"><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id,
      ReviewStatus:$.Status__c,
      PrimaryGoal:$.Primary_Goal__c,
      PersonID:$.Permanency_Committee_Referral__r.Case_Person__r.Person__c,
      StartDate:$.Committee_Meeting_Date__c,
      LastModifiedDate:$.Committee_Meeting_Date__c
} filter ( ($.StartDate != null) and  ( (($.StartDate >= (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval as :date {format : "yyyyMMdd"}) ) when (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval != null) otherwise true ) and ($.StartDate < flowVars.extractInfo.ReportEndDate )))]]></dw:set-variable>
            </dw:transform-message>
			<sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Name__c,RecordType.DeveloperName,Plan_ID__r.Plan_Status__c, Plan_ID__r.Review_Status__c, Plan_ID__r.Date_of_Plan__c, Plan_ID__r.Date_of_Plan_Review__c, Plan_ID__r.Family_Goal__c, Primary_Goal__c from DEL_Person_Involved__c where ( ( (RecordType.DeveloperName ='Family_Service_Plan' OR RecordType.DeveloperName = 'Family_Service_Plan_Supervisor_App') AND Plan_ID__r.Plan_Status__c = 'Completed' AND ( Plan_ID__r.Date_of_Plan__c != null AND  Plan_ID__r.Date_of_Plan__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) ) OR ( (RecordType.DeveloperName ='Family_Service_Plan_review' OR RecordType.DeveloperName = 'Family_Service_Plan_Review_Supervisor_Approval') AND Plan_ID__r.Review_Status__c = 'Completed' AND (Plan_ID__r.Date_of_Plan_Review__c != null AND Plan_ID__r.Date_of_Plan_Review__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) ) ) and Name__c in (#[flowVars.Clausefor43])" doc:name="Salesforce Famile Plan Details "/>

            <dw:transform-message doc:name="Transform Message : Family Plan details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FamilyPlan"><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id,
      ReviewStatus:$.Plan_ID__r.Plan_Status__c when ($.Plan_ID__r.Plan_Status__c != null and ($.RecordType.DeveloperName == "Family_Service_Plan")) otherwise ($.Plan_ID__r.Review_Status__c default ""),
      //PrimaryGoal:$.Plan_ID__r.Family_Goal__c when ($.Plan_ID__r.Family_Goal__c != null) otherwise $.Primary_Goal__c,
      PrimaryGoal:$.Primary_Goal__c,
      PersonID:$.Name__c,
      StartDate:$.Plan_ID__r.Date_of_Plan__c when ( ($.Plan_ID__r.Date_of_Plan__c != null) and (($.Plan_ID__r.Plan_Status__c default "") == "Completed" ) and ($.RecordType.DeveloperName == "Family_Service_Plan")) otherwise ($.Plan_ID__r.Date_of_Plan_Review__c when ( ($.Plan_ID__r.Date_of_Plan_Review__c != null) and ( ($.Plan_ID__r.Review_Status__c default "") == "Completed" ) and ($.RecordType.DeveloperName == "Family_Service_Plan_Review")) otherwise null  ),
      LastModifiedDate:$.Plan_ID__r.Date_of_Plan__c when ( ($.Plan_ID__r.Date_of_Plan__c != null) and (($.Plan_ID__r.Plan_Status__c default "") == "Completed" ) and ($.RecordType.DeveloperName == "Family_Service_Plan") ) otherwise ($.Plan_ID__r.Date_of_Plan_Review__c when ( ($.Plan_ID__r.Date_of_Plan_Review__c != null) and ( ($.Plan_ID__r.Review_Status__c default "") == "Completed" ) and ($.RecordType.DeveloperName == "Family_Service_Plan_Review") ) otherwise null  )
} filter (( ($.StartDate != null) and  ( (($.StartDate >= (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval as :date {format : "yyyyMMdd"}) ) when (flowVars.LatestHomeRemoval[$.PersonID][0].LatestHomeRemoval != null) otherwise true ) and ($.StartDate < flowVars.extractInfo.ReportEndDate ))) and ($.ReviewStatus == "Completed"))]]></dw:set-variable>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CasePlan default []) ++ (flowVars.PlanCommittee default []) ++ (flowVars.FamilyPlan default [])]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Filter Records having data">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
( payload filter ((sizeOf ($)) > 0) map {
      ($)
} )]]></dw:set-payload>
            </dw:transform-message>
           
            <dw:transform-message doc:name="Transform Message : Group data">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element43"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element43 default {}) ++ ((payload groupBy $.PersonID ) default {})]]></dw:set-variable>
            </dw:transform-message>
          
        </foreach>
            <dw:transform-message doc:name="Transform Message : Group data and sort by latest date">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element43"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element43 default {}) mapObject {
	($$ as :string) : ($ orderBy $.LastModifiedDate)[-1..0]
}]]></dw:set-variable>
            </dw:transform-message>          
    </sub-flow>
    <sub-flow name="afcars-exception44-Sub_Flow" doc:description="Flow to get Element 44 details">
        <logger message="Get Element 44 Details" level="INFO" doc:name="Log for Element 44"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Clausefor44"><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-variable>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Relationship_Type__c,Person__c   from DEL_Person_Relationship__c where Person__c in (#[flowVars.Clausefor44]) and Relationship_Type__c IN ('Adoptive Father in Home','Adoptive Mother in home','Step Father in Home','Step Mother in Home','Grandparent in home','Aunt','Uncle','Paramour of Parent in Home','Father in home','Mother in home')" doc:name="Salesforce : Query Person Relationship"/>
            <dw:transform-message doc:name="Transform Message : Person Relation details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id, 
      Relationship:$.Relationship_Type__c,
      PersonID:$.Person__c 
      } filter ( ($.StartDate >= flowVars.LatestHomeRemoval[$.PersonID].LatestHomeRemoval) and ($.StartDate < flowVars.extractInfo.ReportEndDate ))]]></dw:set-payload>

            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Person Relationship details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="PersonRelationship"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PersonRelationship default {}) ++ ((payload groupBy $.PersonID) default {})]]></dw:set-variable>
            </dw:transform-message>

        </foreach>
        
    </sub-flow>

    <sub-flow name="afcars-fostercare-TPR-records-Sub_Flow" doc:description="Flow to get TPR details for the clients">
        <logger message="Get TPR Details" level="INFO" doc:name="Logger : TPR Details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Name__c, Children_Court_Order__c from DEL_Person_Involved__c  where  Children_Court_Order__r.Court_Order_Status__c='Completed' and  Children_Court_Order__r.RecordType.DeveloperName='TPR_Hearing'  and Children_Court_Order__r.Date_of_Decision__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Name__c in (#[payload]) " doc:name="Salesforce : Query Person Involved for Court Order ID" doc:description="Queru to Get Child Court Order ID using Person ID"/>
			<dw:transform-message doc:name="Transform Message : Consume Consumer Iterator">
				<dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map $) default []]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Get Court Order ID List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="ChildrenCourtOrderIDList"><![CDATA[%dw 1.0
%output application/java
---
( ( payload.Children_Court_Order__c ) default []) ++ ( flowVars.ChildrenCourtOrderIDList default []) ]]></dw:set-variable>
                <dw:set-variable variableName="ChildrenCourtOrderIDGrouped"><![CDATA[%dw 1.0
%output application/java
---
( payload  default []) ++ ( flowVars.ChildrenCourtOrderIDGrouped default []) ]]></dw:set-variable>
            </dw:transform-message>
</foreach>

            <dw:transform-message doc:name="Transform Message : Group Court Order Records by Person ID">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="ChildrenCourtOrderIDGrouped"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.ChildrenCourtOrderIDGrouped default []) reduce ((val, acc = {}) -> acc ++ (( { (val.Name__c) : ( val.Children_Court_Order__c ) } )))
 ]]></dw:set-variable>
            </dw:transform-message>

			<foreach collection="#[flowVars.ChildrenCourtOrderIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Children Court Order ID List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
			</dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Id, Gender__c, Person_Court_Order__c, Person_Court_Order__r.Date_of_Decision__c, Role__c from DEL_Person_Involved__c where Person_Court_Order__r.Court_Order_Status__c='Completed' and Person_Court_Order__r.RecordType.DeveloperName='TPR_Hearing' and Person_Court_Order__r.Date_of_Decision__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Role__c in ('Former Adoptive Parent 1','Former Adoptive Parent 2','Birth Parent 1','Birth Parent 2') and Person_Court_Order__c in (#[payload]) order by Person_Court_Order__r.Date_of_Decision__c desc , Role__c desc" doc:name="Salesforce : Query Person Involved for Date of Decision" doc:description="Query to Get TPR Date"/>
            <dw:transform-message doc:name="Transform Message : Get TPR Details">    
				<dw:input-payload mimeType="application/java"/><dw:set-variable variableName="TPRDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TPRDetails default []) ++ (( payload default []) map {
	"ID" : $.Id,
	"Gender" : $.Gender__c,
	"TPR" : $.Person_Court_Order__r.Date_of_Decision__c,
	"PersonCourtOrderID" : $.Person_Court_Order__c,
	"Role" : $.Role__c
} ) ]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
		    <dw:transform-message doc:name="Transform Message : Group TPR Details grouped by Court Order ID">    
				<dw:input-payload mimeType="application/java"/><dw:set-variable variableName="TPRDetails"><![CDATA[%dw 1.0
%output application/java
---
( (flowVars.TPRDetails default []) distinctBy $.ID ) groupBy $.PersonCourtOrderID ]]></dw:set-variable>
            </dw:transform-message>			
		    <dw:transform-message doc:name="Transform Message : Group TPR Details grouped by Person ID">    
				<dw:input-payload mimeType="application/java"/><dw:set-variable variableName="TPRDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.ChildrenCourtOrderIDGrouped default {}) mapObject {
	($$ as :string) : (( (flowVars.TPRDetails[$] default []) orderBy $.TPR)[-1..0])
} ]]></dw:set-variable>
            </dw:transform-message>			
            <dw:transform-message doc:name="Transform Message: Add Parent details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="BioParent1"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TPRDetails default {}) mapObject {
	($$ as :string) : ($ default []) filter ($.Role == "Birth Parent 1")
}
]]></dw:set-variable>
                <dw:set-variable variableName="BioParent2"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TPRDetails default {}) mapObject {
	($$ as :string) : ($ default []) filter ($.Role == "Birth Parent 2")
}
]]></dw:set-variable>
                <dw:set-variable variableName="FormerAdoptiveParent1"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TPRDetails default {}) mapObject {
	($$ as :string) : ($ default []) filter ($.Role == "Former Adoptive Parent 1")
}
]]></dw:set-variable>
                <dw:set-variable variableName="FormerAdoptiveParent2"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TPRDetails default {}) mapObject {
	($$ as :string) : ($ default []) filter ($.Role == "Former Adoptive Parent 2")
}
]]></dw:set-variable>
             </dw:transform-message>

    </sub-flow>    

    <sub-flow name="afcars-DYRS-records-Sub_Flow" doc:description="Flow to get Provider information for Elemet 42">
        <foreach collection="#[flowVars.LatestPlacementArray]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload filter ($.Division == 'DPBHS') map ("'" ++ $.ProviderLastName ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <!-- Chnaged from DYRS to DPBHS for issue fix -->
            <choice doc:name="Choice">
                <when expression="#[payload == '']">
                    <logger message="No YRS Placements in Iteration #[flowVars.counter]" level="INFO" doc:name="Logger"/>
                </when>
                <otherwise>
                    <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,State__c,Provider__c from DEL_Provider_Address__c where Address_Type__c='Site' and Status__c='Active' and Provider__c in (#[payload])" doc:name="Salesforce : Query Provider Details"/>
                    <dw:transform-message doc:name="Transform Message : Provider Address details">
                        <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	  ID : $.Id,	
      PlacementProviderID : $.Provider__c,
      State:$.State__c
      } ]]></dw:set-payload>
                    </dw:transform-message>
                    <dw:transform-message doc:name="Transform Message : Add YRS details">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="YRS"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.YRS default []) ++ (payload  default [])]]></dw:set-variable>
                    </dw:transform-message>
                </otherwise>
            </choice>            
        </foreach>
                    <dw:transform-message doc:name="Transform Message : Group YRS details">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="YRS"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.YRS default []) groupBy $.PlacementProviderID]]></dw:set-variable>
                    </dw:transform-message>
                    <dw:transform-message doc:name="Transform Message : Align YRS details with Report Person data">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="YRS"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacementfor23 default {}) mapObject {
	($$ as :string) : (((flowVars.YRS[$[0].ProviderLastName default ""]) default []) distinctBy $.ID)
}]]></dw:set-variable>
                    </dw:transform-message>                    
                    
    </sub-flow>
    <sub-flow name="afcars-FosterSub_Flow" doc:description="Flow to get Foster Family Structure and Provide Person details for the client for elements 49-55">
        <foreach collection="#[flowVars.LatestPlacementArray]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Clause49"><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $.ProviderLastName ++ "'")) joinBy ","]]></dw:set-variable>

            </dw:transform-message>
            <!-- <logger message="Element 49 Query : Select Id,Family_Structure__c,Provider__c from DEL_Provider_Types__c where Provider__c  in (#[flowVars.Clause49]) AND ( RecordType.DeveloperName='Contracted' OR  RecordType.DeveloperName='DFS_Foster_Family' OR RecordType.DeveloperName='Foster_Care_Private_Agency' OR RecordType.DeveloperName='Non_Contracted'  OR  RecordType.DeveloperName='DEL_Relative' OR  RecordType.DeveloperName='DEL_Non_Relative') AND Family_Structure__c!=null " level="INFO" doc:name="Logger"/> -->
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,RecordType.DeveloperName,Family_Structure__c,Provider__c from DEL_Provider_Types__c where Provider__c  in (#[flowVars.Clause49]) AND ( RecordType.DeveloperName='Contracted' OR  RecordType.DeveloperName='DFS_Foster_Family' OR RecordType.DeveloperName='Foster_Care_Private_Agency' OR RecordType.DeveloperName='Non_Contracted'  OR  RecordType.DeveloperName='DEL_Relative' OR RecordType.DeveloperName='DEL_Non_Relative' OR RecordType.DeveloperName='Kinship_Provider') AND Family_Structure__c!=null " doc:name="Salesforce Get Foster Family Structure"/>
            <dw:transform-message doc:name="Transform Family Structure">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

---
payload map {
      ProviderTypeID:$.Id,
      RecordType : $.RecordType.DeveloperName,
      
      FamilyStructure:( flowVars.LOVReturned[("AFCARS_FOSTER_FOSTER_FAMILYSTRUCTURE-" ++ ($.Family_Structure__c default ""))][0] default "" ) ,
      Provider:$.Provider__c,
      Priority: (1 when ($.RecordType.DeveloperName == "DFS_Foster_Family") otherwise ( 2 when ( $.RecordType.DeveloperName  == "Foster_Care_Private_Agency" ) otherwise ( 3 when ($.RecordType.DeveloperName  == "Kinship_Provider") otherwise ( 4 when ($.RecordType.DeveloperName  == "DEL_Relative") otherwise ( 5 when ($.RecordType.DeveloperName  == "DEL_Non_Relative") otherwise ( 6 when ($.RecordType.DeveloperName  == "Non_Contracted") otherwise ( 7 when ($.RecordType.DeveloperName  == "Contracted") otherwise 100 ) ) ) ) ) ) )
      } ]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add Foster Family Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterFamily"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FosterFamily default []) ++ (payload  default [])]]></dw:set-variable>
            </dw:transform-message>
            
            
            
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Person__c,Person__r.Name,Person__r.Birthdate,Person__r.DEL_PID__c,Person__r.DEL_Race_Primary__c,Person__r.DEL_Race_Secondary__c,Person__r.DEL_Ethnicity__c,Role__c,Provider__c,End_Date__c,  Start_Date__c from DEL_Provider_Person__c where Provider__c in (#[flowVars.Clause49]) and (Role__c='Payee' OR Role__c='Foster Parent' OR Role__c='Other Adult In Home' OR Role__c = 'Kinship Parent' OR Role__c = 'Adoptive Parent') and Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] order by Start_Date__c desc" doc:name="Salesforce : Get Provider Person Details"/>
               <dw:transform-message doc:name="Transform Provider Person Details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID:$.Id,
      PersonID:$.Person__c,
      Provider:$.Provider__c,
      Name:$.Person__r.Name, 
      BirthDate:$.Person__r.Birthdate,
      PID:$.Person__r.DEL_PID__c,
      Race:$.Person__r.DEL_Race_Primary__c,
      RaceS: ($.Person__r.DEL_Race_Secondary__c default "") splitBy ";",
      Ethnicity:$.Person__r.DEL_Ethnicity__c,
      Role:$.Role__c,
      StartDate : $.Start_Date__c default "",
      EndDate:$.End_Date__c default "",
      Priority:"1" when (($.Role__c == 'Payee') and ($.Person__r.DEL_PID__c != null)) 
		otherwise ("2" when (($.Role__c == 'Payee') and ($.Person__r.DEL_PID__c == null)) 
		otherwise ( "3" when ( ($.Role__c  == "Foster Parent") and ($.Person__r.DEL_PID__c != null) )
		otherwise ( "4" when ( ($.Role__c  == "Foster Parent") and ($.Person__r.DEL_PID__c == null) ) 
		otherwise ( "5" when ( ($.Role__c  == "Kinship Parent") and ($.Person__r.DEL_PID__c != null) )
		otherwise ( "6" when ( ($.Role__c  == "Kinship Parent") and ($.Person__r.DEL_PID__c == null) ) 
		otherwise ( "7" when ( ($.Role__c  == "Adoptive Parent") and ($.Person__r.DEL_PID__c != null) )
		otherwise ( "8" when ( ($.Role__c  == "Adoptive Parent") and ($.Person__r.DEL_PID__c == null) ) 
		otherwise ( "9" when ( ($.Role__c == "Other Adult In Home") and ($.Person__r.DEL_PID__c != null)) 
		otherwise ( "10" when ( ($.Role__c == "Other Adult In Home") and ($.Person__r.DEL_PID__c == null)) 
		otherwise "" )))))))))
      } ]]></dw:set-payload>
            </dw:transform-message>			
			
<!-- 			<dw:transform-message doc:name="Transform Message : Filter Records">
                <dw:set-payload><![CDATA[%dw 1.0
%output application/java
-
payload filter  ($.EndDate == '' ) or ($.EndDate < (flowVars.LatestPlacement[$.Provider][0].EndDate default '')) ]]></dw:set-payload>
            </dw:transform-message> -->
            <dw:transform-message doc:name="Transform Message : Add Foster Care Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterCare"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FosterCare default []) ++ ( (payload  default [])  )]]></dw:set-variable>

            </dw:transform-message>

            <!-- <logger message="Foster : #[flowVars.FosterFamily]" level="INFO" doc:name="Logger"/> -->
        </foreach>
		
        <dw:transform-message doc:name="Transform Message : Group Foster Care details" doc:description="Same Provider can be present for multiple Placemnets thus doing a Group By">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterCare"><![CDATA[%dw 1.0
%output application/java


---
( ( (flowVars.FosterCare default []) distinctBy $.ID ) map {
      ID:$.ID,
      PersonID:$.PersonID,
      Name:$.Name,
      Provider:$.Provider,
      Priority : $.Priority,
      EndDate: $.EndDate default "",
      BirthDate: ($.BirthDate as :date as :string {format:"yyyy"}) when ($.BirthDate != null) otherwise "",  
      
      Race: ( 
("1" when (( ($.Race default "") == "American Indian or Alaskan Native") or ( $.RaceS contains "American Indian or Alaskan Native")  ) otherwise "0") ++ 
("1" when (( ($.Race default "") == "Asian") or ( $.RaceS contains "Asian")  ) otherwise "0") ++ 
("1" when (( ($.Race default "") == "Black or African American") or ( $.RaceS contains "Black or African American")  ) otherwise "0") ++ 
("1" when (( ($.Race default "") == "Native Hawaiian or Other Pacific Islander") or ( $.RaceS contains "Native Hawaiian or Other Pacific Islander")  ) otherwise "0") ++ 
("1" when (( ($.Race default "") == "White") or ( $.RaceS contains "White")  ) otherwise "0") ++ 
("1" when (($.Race == "Unable to Determine") or ($.Race == "Multi-Racial Undefined") or ($.Race == "Abandoned") or ($.Race == "Declined") or ($.RaceS contains "Unable to Determine") or ($.RaceS contains "Multi-Racial Undefined") or ($.RaceS contains "Abandoned") or ($.RaceS contains "Declined")) otherwise "0" )
 ) when ($.Race != "") otherwise "000000",
      
      Ethnicity:( flowVars.LOVReturned[("AFCARS_FOSTER_ETHNICITY-" ++ ($.Ethnicity default ""))][0] default "" )
} ) groupBy $.Provider ]]></dw:set-variable>
            <dw:set-variable variableName="FosterFamily"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.FosterFamily default [] ) groupBy $.Provider ]]></dw:set-variable>
        </dw:transform-message>		

		
        <dw:transform-message doc:name="Transform Message : Prioritze Foster Care details">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterCare"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.FosterCare default {} ) mapObject {
 ($$ as :string) : ( ($ default [])  ) 
}]]></dw:set-variable>
        </dw:transform-message>		

        <dw:transform-message doc:name="Transform Message : Group By Person in Report " doc:description="Removing duplicate Provider Type record since multiple placements can have same Provider">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterFamily"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacementfor23 default {}) mapObject {
	($$ as :string) : ( ( ((flowVars.FosterFamily[$[0].ProviderLastName default ""]) default []) distinctBy $.ProviderTypeID)  orderBy ($.Priority as :number) )  
}]]></dw:set-variable>
        </dw:transform-message>	

        <dw:transform-message doc:name="Transform Message : Group By Person in Report">	
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="FosterCarePerson"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.LatestPlacementfor23 default {}) mapObject {
	//($$ as :string) : using (PlcmntEndDate = $[0].EndDate default "" ) ( ((flowVars.FosterCare[$[0].ProviderLastName default ""]) default []) orderBy ($.Priority as :number) distinctBy ($.PersonID) )
	($$ as :string) : using (PlcmntEndDate = $[0].EndDate default "" ) ( ((flowVars.FosterCare[$[0].ProviderLastName default ""]) default []) orderBy ($.Priority as :number) distinctBy ($.Name) )  
}]]></dw:set-variable>
        </dw:transform-message>		
		
    </sub-flow>
    <sub-flow name="afcars-Element60-records-Sub_Flow" doc:description="Flow to get Person Case details for Element 60">
        <logger message="Get Element 60 details" level="INFO" doc:name="Logger : Element 60 details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload  map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Person__c,Case__r.Determination__c,Case__r.Determination_Status__c from DEL_Person_Cases__c where Case__r.Determination_Status__c ='Completed' and Case__r.Determination__c='Approved' and Case__r.RecordType.DeveloperName='DFS_Adoption_Subsidy_Case' and Person__c in (#[payload])" doc:name="Salesforce : Get Person Case Details"/>
            <dw:transform-message doc:name="Transform Person Case Details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID: $.Id,
      PersonID:$.Person__c,
      Determination:$.Case__r.Determination__c,
      DeterminationStatus:$.Case__r.Determination_Status__c
      
      }]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add Person Case Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element60"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element60 default {}) ++ (payload groupBy $.PersonID default {})]]></dw:set-variable>

            </dw:transform-message>
        </foreach>
        <!-- <logger message="#[flowVars.Element61]" level="INFO" doc:name="Logger"/> -->
    </sub-flow>
    <sub-flow name="afcars-Element61-records-Sub_Flow" doc:description="Flow to determine TANF eligibility for a Person for Element 61">
        <logger level="INFO" doc:name="Logger : Element 61 Details" message="Get Element 61 Details TANF Eligibility for the clients"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload  map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <!-- <logger message="select id,Payment_Month__c,End_Date__c,Start_Date__c,Person_LkID__c from DEL_Income_Eligibility__c Where Payment_Month__c !=null and RecordType.DeveloperName='TANF_Eligibility' and Person_LkID__c in (#[payload]) and  ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt; #[flowVars.extractInfo.ReportStartDate]) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and End_date__c =null) )" level="INFO" doc:name="Logger"/> -->
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Payment_Month__c,End_Date__c,Start_Date__c,Person_LkID__c from DEL_Income_Eligibility__c Where Payment_Month__c !=null and RecordType.DeveloperName='TANF_Eligibility' and Person_LkID__c in (#[payload]) and  ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt; #[flowVars.extractInfo.ReportStartDate]) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and End_date__c =null) )" doc:name="TANF Eligibility Salesforce"/>
            <dw:transform-message doc:name="Transform TANF Eligibility">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID: $.Id,
      Month:$.Payment_Month__c,
      EndDate:$.End_Date__c,
      StartDate:$.Start_Date__c,
      PersonID:$.Person_LkID__c     
      }]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add TANF Eligibility for Element 61">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element61"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element61 default {}) ++ (payload groupBy $.PersonID default {})]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
        <!-- <logger message="#[flowVars.Element61]" level="INFO" doc:name="Logger"/> -->
    </sub-flow>

    <sub-flow name="afcars-Element62-records-Sub_Flow" doc:description="Flow to get Transaction details to calculate element 62">
        <logger message="Get Element 62 Details" level="INFO" doc:name="Logger : Element 62 Details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload  map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Id,Client_Name__c,Trust_Account_Type__c,Transaction_Type__c,Transaction_Date__c,Transaction_Amount__c, Service_Start_Date__c, Service_End_Date__c, FSF_Account_Code__c, FSF_Activity_Code__c from DEL_Transaction__c where Transaction_Type__c='Income' and Transaction_Status__c IN ('Complete', 'Completed','Approved','Sent to Doc') and Client_Name__c in (#[payload]) and Transaction_Date__c  &gt;= #[flowVars.extractInfo.ReportStartDate] and Transaction_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate]" doc:name="Salesforce : Query Transaction Records" doc:description="Query Transaction Records to compute Elements 62,64"/>
            <dw:transform-message doc:name="Transform Transaction Details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID: $.Id,
      PersonID : $.Client_Name__c,
      TrustAccount : $.Trust_Account_Type__c default "",
      TransactionType : $.Transaction_Type__c default "",
      TransactionStatus : $.Transaction_Status__c default "",
      Date: $.Transaction_Date__c as :date,
      DateMonth : ($.Service_Start_Date__c as :date as :string {format:"MM"}) when ($.Service_Start_Date__c != null) otherwise "13",
      DateYear : ($.Service_Start_Date__c as :date as :string {format:"yyyy"}) when ($.Service_Start_Date__c != null) otherwise "1111",      
      ServiceStartDate : ($.Service_Start_Date__c as :date) when ($.Service_Start_Date__c != null) otherwise null,
      ServiceEndDate : $.Service_End_Date__c when ($.Service_End_Date__c != null) otherwise null,
      ActivityCode : $.FSF_Activity_Code__c default "",
      AccountCode : $.FSF_Account_Code__c default ""
}]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add Transaction Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element62"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element62 default []) ++ (payload default [])]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
               
        <dw:transform-message doc:name="Transform Message Group Records for element 62">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element62"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.Element62 default []) distinctBy $.ID ) groupBy ($.PersonID)
]]></dw:set-variable>
        </dw:transform-message>        
        
    </sub-flow>

    <sub-flow name="afcars-Element66-records-Sub_Flow" doc:description="Flow to get Transaction related details for Element 66">
        <logger message="Get Element 66 Details" level="INFO" doc:name="Logger : ELement 66 details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload  map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select Id, FSF_Dept_Code__c, FSF_Account_Code__c, FSF_Activity_Code__c, Service_Start_Date__c, Service_End_Date__c, Client_Name__c,Trust_Account_Type__c,Transaction_Type__c,Transaction_Date__c,Transaction_Amount__c from DEL_Transaction__c where ( Transaction_Type__c='Payment' ) and Client_Name__c in (#[payload]) and ((Service_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and Service_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Service_Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and Service_End_Date__c &gt; #[flowVars.extractInfo.ReportStartDate]) or (Service_Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] and Service_End_Date__c &gt;= #[flowVars.extractInfo.ReportEndDate]) or (Service_Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and Service_End_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ))" doc:name="Salesforce : Query Transaction Records" doc:description="Query Transaction Records to compute Elements 66"/>
            <dw:transform-message doc:name="Transform Transaction Details">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID: $.Id,
      PersonID : $.Client_Name__c,
      TrustAccount : $.Trust_Account_Type__c default "",
      TransactionType : $.Transaction_Type__c default "",
      TransactionStatus : $.Transaction_Status__c default "",
      Date: $.Transaction_Date__c as :date,
      DateMonth : ($.Service_Start_Date__c as :date as :string {format:"MM"}) when ($.Service_Start_Date__c != null) otherwise "13",
      DateYear : ($.Service_Start_Date__c as :date as :string {format:"yyyy"}) when ($.Service_Start_Date__c != null) otherwise "1111",      
      ServiceStartDate : ($.Service_Start_Date__c as :date) when ($.Service_Start_Date__c != null) otherwise null,
      ServiceEndDate : $.Service_End_Date__c when ($.Service_End_Date__c != null) otherwise null,
      ActivityCode : $.FSF_Activity_Code__c default "",
      AccountCode : $.FSF_Account_Code__c default "",
      DeptCode : $.FSF_Dept_Code__c default "",
      
      DoesServiceStartAtMonthStart : ($.Service_Start_Date__c != null) and ( $.Service_Start_Date__c == getFirstDayofMonth($.Service_Start_Date__c) ),
      DoesServiceEndAtMonthEnd : ( $.Service_End_Date__c == getLastDayofMonth($.Service_Start_Date__c) ) when (($.Service_Start_Date__c != null) and ($.Service_End_Date__c != null)  ) otherwise false,      
      Amount: (abs $.Transaction_Amount__c) when ($.Transaction_Amount__c != null) otherwise 0
}]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add Transaction Details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element66"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element66 default []) ++ (payload default [])]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
        <dw:transform-message doc:name="Transform Message Filter Records and Group By Person">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element66"><![CDATA[%dw 1.0
%output application/java
%var transactionCodeList = ["55000", "55100", "55301", "55304", "55305", "55306", "55309", "55310", "55312", "55329", "55337", "55338", "55339", "55341", "55349", "55600"]
%var transactionObjectCodeList = ["3011", "3012", "3013", "3017", "3018", "3019", "3021", "3027", "3043", "3045", "3053", "3054", "3055", "3057", "3066", "5100", "5694", "5695", "5699"]
---
(flowVars.Element66 default []  filter  ( ($.DeptCode == "370640") and ( transactionCodeList contains $.AccountCode )  ) distinctBy $.ID) groupBy ($.PersonID) ]]></dw:set-variable>
        </dw:transform-message> 

        <dw:transform-message doc:name="Transform Message Find Month for Element 66">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element66Month"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element66 default {}) mapObject {
	($$ as :string) : (($ orderBy $.ServiceStartDate)[-1..0])
} ]]></dw:set-variable>
        </dw:transform-message>        
                     
        <dw:transform-message doc:name="Transform Message : Group Records for Element 66">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element66"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element66 default {}) mapObject {
       ($$ as :string) : using (personId = ($$ as :string) ) ( $ filter ( ($.DateMonth as :number == ((12 when (flowVars.Element66Month[personId][0].DateMonth == "01") otherwise (flowVars.Element66Month[personId][0].DateMonth as :number - 1)) default "" )) and ($.DateYear == ( (flowVars.Element66Month[personId][0].DateYear) when ($.DateMonth != "12") otherwise ( flowVars.Element66Month[personId][0].DateYear as :number - 1) default "" )) ) )
}]]></dw:set-variable>
        </dw:transform-message>
        
        <dw:transform-message doc:name="Transform Message : Group and round Records for Element 66">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element66"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element66 default {} ) mapObject {
      ($$ as :string) : (round ( sum ($.Amount default [0])  )) 
} ]]></dw:set-variable>
        </dw:transform-message>

    </sub-flow>


    <sub-flow name="afcars-Element63-records-Sub_Flow" doc:description="Flow to get Element 63 Details Medicaid Eligibility for the clients">
        <logger message="Get Element 63 Details Medicaid Eligibility for the clients" level="INFO" doc:name="Logger : Element 63 Details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload  map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <!-- <logger message="select id,Payment_Month__c,End_Date__c,Start_Date__c,Person_LkID__c from DEL_Income_Eligibility__c Where RecordType.DeveloperName='Medicaid_Eligibility' and Person_LkID__c in (#[payload]) and  ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt; #[flowVars.extractInfo.ReportStartDate]) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and End_date__c =null) )" level="INFO" doc:name="Logger"/> -->
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="select id,Payment_Month__c,End_Date__c,Start_Date__c,Person_LkID__c from DEL_Income_Eligibility__c Where RecordType.DeveloperName='Medicaid_Eligibility' and Person_LkID__c in (#[payload]) and  ((Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt; #[flowVars.extractInfo.ReportStartDate]) or (Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate] and End_date__c&gt;= #[flowVars.extractInfo.ReportEndDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c&lt;= #[flowVars.extractInfo.ReportEndDate] ) or  ( Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and End_date__c =null) )" doc:name="Salesforce Medicaid Eligibility"/>
            <dw:transform-message doc:name="Transform Medicaid Eligibility records">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      ID: $.Id,
      Month:$.Payment_Month__c,
      EndDate:$.End_Date__c,
      StartDate:$.Start_Date__c,
      PersonID:$.Person_LkID__c
      }]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Add and Group Eligibility details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element63"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element63 default {}) ++ (payload groupBy $.PersonID default {})]]></dw:set-variable>
            </dw:transform-message>
        </foreach><!-- <logger message="#[flowVars.Element63]" level="INFO" doc:name="Logger"/> -->
    </sub-flow>
    <sub-flow name="afcars-fostercare-get-ALLAfcarsEpisodes-Sub_Flow" doc:description="Flow to get All AFCARS Episodes details irrespective of the reporting period but before Report end, This is for elements 19 and 20">
        <logger message="Get ALL AFCARS Episodes details irrespective of reporting" level="INFO" doc:name="Logger period: All AFCARS Episodes details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <!-- <logger message="Select Id,Client__c,Client__r.DEL_PID__c,Removal_Reason__c, ( Select Id, Placement_Start_Date__c, Placement_End_date__c,Case_Number__c,Case_Number__r.County__c from Placements__r where Latest_Version_Placement__c=true and Placement_Start_Date__c != null), ( Select Id, Runaway_End_Date_Time__c, Runaway_Start_Date_Time__c from Runaway__r where Runaway_Status__c !='' and Runaway_Start_Date_Time__c != null) from DEL_Placement_Episode__c where Client__c In (#[payload]) and (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt;= #[flowVars.extractInfo.ReportEndDate] ) or (Start_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt;= #[flowVars.extractInfo.ReportStartDate]) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &gt;= #[flowVars.extractInfo.ReportEndDate] ) or (Start_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate] and End_date__c &lt;= #[flowVars.extractInfo.ReportEndDate]  ) " level="INFO" doc:name="Logger"/> -->
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id,Client__c,Client__r.DEL_PID__c,Removal_Reason__c,Episode_Start_Date__c ,Episode_End_Date__c, (  Select Id,Contact__c,Placement_Start_Date__c, Placement_End_date__c,Placement_Reasons__c,Case_Number__c,Case_Number__r.County__c,Service_taxanomy__c,Service_taxanomy__r.Level_One__c,Service_taxanomy__r.Foster_Care_Setting_Type__c,Last_Name_Organization_Name__c,Initial_Placement_Reason_s__c,Family_Structure__c,Case_Number__r.Division__c,Caregiver1_Name__c,Caregiver1_Name__r.DEL_Race_Primary__c,Caregiver1_Name__r.DEL_Race_Secondary__c,Caregiver1_Name__r.DEL_Ethnicity__c,Caregiver1_Name__r.Birthdate,Caregiver2_Name__c,Caregiver2_Name__r.Birthdate,Caregiver2_Name__r.DEL_Race_Primary__c,Caregiver2_Name__r.DEL_Race_Secondary__c,Caregiver2_Name__r.DEL_Ethnicity__c,End_Reason__c,Runaway_Status__c,Home_Placement_Type__c,Facility_Type_Formula__c, Case_Type__c, Is_this_Placement_less_than_24_hours__c, Out_of_State__c,Foster_Care_Setting_Type__c  from Placements__r where (Latest_Version_Placement__c = true) and  Is_this_Placement_less_than_24_hours__c = false and (Placement_Status__c in ('Admitted','Discharged')) and (Placement_Start_Date__c != null) and Service_taxanomy__r.Foster_Care_Setting_Type__c = 'Foster Care' and ( not (Service_taxanomy__r.Level_One__c = 'Foster Care' and Service_taxanomy__r.Level_Two_Services__c = 'Foster Care - DFS Supervision' )) and Placement_Start_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Service_taxanomy__r.Level_One__c not in ('Adoption Pre-Placement Visit','Adoption Pre-placement Visit','Foster Care - Respite','Foster Care Pre-Placement (DFS Foster Family)','Foster Care Pre-Placement (Non-Paid Relative)','Foster Care Pre-Placement (Private Agency)','Foster Care Pre-Placement (Non-Paid Non-Relative )','Trial Reunification' ) order by Placement_Start_date__c), ( Select Id,Client_Name__c,Runaway_End_Date_Time__c, Runaway_Start_Date_Time__c from Runaway__r where Runaway_Status__c !='' and Runaway_Start_Date_Time__c != null and Runaway_Start_Date_Time__c &lt;= #[flowVars.extractInfo.ReportEndDate]T00:00:00Z order by Runaway_Start_Date_Time__c) from DEL_Placement_Episode__c where Client__c In (#[payload]) and (Episode_Start_Date__c &lt; #[flowVars.extractInfo.ReportEndDate])" doc:name="Salesforce : Get All Episode Records"/>
            <dw:transform-message doc:name="Transform Episode Placement Runaway Records">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
      IDEpisode:$.Id,
      PersonID:$.Client__c ,
      PID:$.Client__r.DEL_PID__c,
      EpisodeStartDate:$.Episode_Start_Date__c as :date default '',
      EpisodeEndDate:$.Episode_End_Date__c as :date default '',
      RemovalReason:$.Removal_Reason__c,
      ( Placement:$.Placements__r map {
            PlacementID:$.Id,
            PersonID:$.Contact__c,
            FosterCareSettingType : $.Foster_Care_Setting_Type__c default "",
            StartDate:$.Placement_Start_Date__c as :date default '',
            EndDate:$.Placement_End_date__c as :date default '',
            FacilityType : $.Facility_Type_Formula__c default '',           
	    CaseType : $.Case_Type__c default '',
            Case:$.Case_Number__c,
            CaseCounty:$.Case_Number__r.County__c,
            ServiceFosterCareSettingType : $.Service_taxanomy__r.Foster_Care_Setting_Type__c default "",
            ServiceTaxanomy:$.Service_taxanomy__c,
            ServiceTaxanomyLevel1Code:$.Service_taxanomy__r.Level_One__c,
            ProviderLastName:$.Last_Name_Organization_Name__c,
            FamilyStructure:$.Family_Structure__c,
            Caregiver1Name:$.Caregiver1_Name__c,
            Caregiver1PrimaryRace:$.Caregiver1_Name__r.DEL_Race_Primary__c,
            Caregiver1SecondaryRace:$.Caregiver1_Name__r.DEL_Race_Secondary__c,
            Caregiver1Ethnicity:$.Caregiver1_Name__r.DEL_Ethnicity__c,
            Caregiver1Birthdate:$.Caregiver1_Name__r.Birthdate,
            Caregiver2Name:$.Caregiver2_Name__c,
            Caregiver2Birthdate:$.Caregiver2_Name__r.Birthdate,
            Caregiver2PrimaryRace:$.Caregiver2_Name__r.DEL_Race_Primary__c,
            Caregiver2SecondaryRace:$.Caregiver2_Name__r.DEL_Race_Secondary__c,
            Caregiver2Ethnicity:$.Caregiver2_Name__r.DEL_Ethnicity__c,
            EndReason:$.End_Reason__c,
            RunawayStatus:$.Runaway_Status__c,
            HomePlacement:$.Home_Placement_Type__c,
            OutofState:$.Out_of_State__c default '',
            PlacementLessThan24Hours:$.Is_this_Placement_less_than_24_hours__c,
            Division:$.Case_Number__r.Division__c
      } ) when ($.Placements__r != null) ,
      ( Runaway: $.Runaway__r map {
            RunawayID:$.Id,
            PersonID:$.Client_Name__c,
            EndDate:$.Runaway_End_Date_Time__c, 
            StartDate:$.Runaway_Start_Date_Time__c,
            ProviderLastName:$.Placement__r.Last_Name_Organization_Name__c default ""
      } ) when ($.Runaway__r != null) 
      }  orderBy $.EpisodeStartDate]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Filter records having atleast one Placement with Foster Care Setting">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter ( (  ( $.Placement != null ) and ( ( sizeOf ( ($.Placement default []) filter ( ($.ServiceFosterCareSettingType == "Foster Care") or (($.HomePlacement default "") == "Trial Reunification") ) ) ) > 0 ) ) or ($.Runaway != null ) )]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Add Records to List">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllEpisodeRecords"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AllEpisodeRecords default {}) ++ ((payload ) default {})]]></dw:set-variable>
            </dw:transform-message>
            <!-- <logger message="All Episodes Done" level="INFO" doc:name="Logger"/> -->
        </foreach>
    </sub-flow>
    <sub-flow name="afcars-foster-care-ALLEpisodeList-Sub_Flow" doc:description="Flow to calculate element 19 and 20">
        <logger message="Get all AFCRS Episodes details irrespective of reporting period" level="INFO" doc:name="Logger : All AFCARS Episodes details"/>
        <foreach collection="#[flowVars.AllEpisodeRecords]" doc:name="For Each Episode">
            <message-properties-transformer scope="invocation" doc:name="Message Properties">
                <add-message-property key="StartDate" value="#[payload.EpisodeStartDate]"/>
                <add-message-property key="EndDate" value="#[payload.EpisodeEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):payload.EpisodeEndDate]"/>
                <add-message-property key="AFCARS" value="#[payload]"/>
                <add-message-property key="ID" value="#[payload.PersonID]"/>
                <add-message-property key="PreviousCustody" value="#[dw('flowVars.FinalCustody[payload.PersonID][( sizeOf (flowVars.FinalCustody[payload.PersonID])) - 2]')]"/>
                
            </message-properties-transformer>
   
            <dw:transform-message doc:name="Transform Message : Determine AFCARS Episode">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
flowVars.CustodyList filter (($.PersonID == flowVars.ID) and ( ($.CustodyStartDate >= flowVars.StartDate and $.CustodyStartDate <= flowVars.EndDate) or ($.CustodyEndDate >= flowVars.StartDate and $.CustodyEndDate <= flowVars.EndDate) or ($.CustodyStartDate <= flowVars.StartDate and $.CustodyEndDate >= flowVars.EndDate) ) ) map {
      ID:$.CustodyID,
      CustodyStart:$.CustodyStartDate ,
      PersonID:$.PersonID as :string default '',
      CustodyEnd:$.CustodyEndDate,
      CourtOrderCompletedDate : $.CourtOrderCompletedDate,
      InitialCompletionDate : $.InitialCompletionDate 
} distinctBy $.ID]]></dw:set-payload>
            </dw:transform-message>
            <choice doc:name="Choice">
                <when expression="#[payload.size() &gt; 0]">
                    <dw:transform-message doc:name="Transform Message : AFCARS data">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllAFCUS"><![CDATA[%dw 1.0
%output application/java
---
[{
      IDEpisode:flowVars.AFCARS.IDEpisode,
      PersonID:flowVars.AFCARS.PersonID ,
      PID:flowVars.AFCARS.PID,
      EpisodeStartDate:flowVars.AFCARS.EpisodeStartDate as :date default '',
      EpisodeEndDate:flowVars.AFCARS.EpisodeEndDate as :date default '',
      RemovalReason:flowVars.AFCARS.RemovalReason,
      Placement:flowVars.AFCARS.Placement default {},
      FacilityType : flowVars.AFCARS.Placement map $.FacilityType default "",           
	  CaseType : flowVars.AFCARS.Placement map $.CaseType default "",
	  PlacementLessThan24Hours : flowVars.AFCARS.Placement map $.PlacementLessThan24Hours default "",
      Runaway:flowVars.AFCARS.Runaway default {}      
}]]]></dw:set-variable>
	  <dw:set-variable variableName="PreviousCustodyLatestAfcars"><![CDATA[%dw 1.0
%output application/java
---
[{
      IDEpisode:flowVars.AFCARS.IDEpisode,
      PersonID:flowVars.AFCARS.PersonID ,
      PID:flowVars.AFCARS.PID,
      EpisodeStartDate:flowVars.AFCARS.EpisodeStartDate as :date default '',
      EpisodeEndDate:flowVars.AFCARS.EpisodeEndDate as :date default '',
      CustodyEndDate : flowVars.PreviousCustody.CustodyEndDate,
      RemovalReason:flowVars.AFCARS.RemovalReason,
      Placement:flowVars.AFCARS.Placement default {},
      FacilityType : flowVars.AFCARS.Placement map $.FacilityType default "",           
	  CaseType : flowVars.AFCARS.Placement map $.CaseType default "",
	  PlacementLessThan24Hours : flowVars.AFCARS.Placement map $.PlacementLessThan24Hours default "",
      Runaway:flowVars.AFCARS.Runaway default {}      
}] when ((flowVars.PreviousCustody.PersonID == flowVars.ID) and ( (flowVars.PreviousCustody.CustodyStartDate >= flowVars.StartDate and flowVars.PreviousCustody.CustodyStartDate <= flowVars.EndDate) or (flowVars.PreviousCustody.CustodyEndDate >= flowVars.StartDate and flowVars.PreviousCustody.CustodyEndDate <= flowVars.EndDate) or (flowVars.PreviousCustody.CustodyStartDate <= flowVars.StartDate and flowVars.PreviousCustody.CustodyEndDate >= flowVars.EndDate) ) ) otherwise [] ]]></dw:set-variable>

                    </dw:transform-message>
                    <dw:transform-message doc:name="Transform Message : Add AFCARS Data to List">
                        <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.AllAfcarsEpisodeList default {}) ++ ((flowVars.AllAFCUS ) default {})]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.PrevCustodyEpisodeList default {}) ++ ((flowVars.PreviousCustodyLatestAfcars ) default {})]]></dw:set-variable>

                    </dw:transform-message>
                </when>
                <otherwise>
                    <logger message="Not an AFCARS Episode." level="INFO" doc:name="Logger"/>
                </otherwise>
            </choice>
        </foreach>
        <dw:transform-message doc:name="Transform Message : Sort All AFCARS Episodes">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList default [] orderBy $.EpisodeStartDate]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList default [] orderBy $.EpisodeStartDate]]></dw:set-variable>

        </dw:transform-message>

        <dw:transform-message doc:name="Transform Message : Group All AFCARS Episodes">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="AllAfcarsEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList filter ( ( ( sizeOf ( ($.Placement default []) filter ((($.CaseType default "") != "Detention") and ( not ($.PlacementLessThan24Hours) ) and ($.EndDate != $.StartDate ) ) ) ) > 0 ) ) default [] groupBy $.PersonID
]]></dw:set-variable>
<dw:set-variable variableName="PrevCustodyEpisodeList"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList default [] groupBy $.PersonID
]]></dw:set-variable>


        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Calculate Element 19">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element19Old"><![CDATA[%dw 1.0
%output application/java
---
flowVars.AllAfcarsEpisodeList default [] map {
      Size: ((sizeOf ($) ) default 0)  ,
      PersonID:$.PersonID[0]
            
      }]]></dw:set-variable>
      <dw:set-variable variableName="Element19"><![CDATA[%dw 1.0
%output application/java
---
flowVars.GroupAfcarsCustody default [] map {
      Size: ((sizeOf ($) ) default 0)  ,
      PersonID:$.PersonID[0]
            
      }]]></dw:set-variable>
            <dw:set-variable variableName="LastAfcars"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList map $[(sizeOf ($) ) - 1].Placement default {} ]]></dw:set-variable>

        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Calculate 20">
            
            <dw:set-variable variableName="LastAfcarsPlacement"><![CDATA[%dw 1.0
%output application/java
---
flatten flowVars.LastAfcars filter $.Division == "DFS" default {} ]]></dw:set-variable>
		         <dw:set-variable variableName="PrevCustodyEndDate"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEpisodeList map $[(sizeOf ($) ) - 1] default {} ]]></dw:set-variable>

        </dw:transform-message>
        <dw:transform-message doc:name="Transform Message : Group data">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element19"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.Element19  groupBy $.PersonID) when (flowVars.Element19 != null) otherwise {}]]></dw:set-variable>
            <dw:set-variable variableName="LastAfcarsPlacement"><![CDATA[%dw 1.0
%output application/java
---
flowVars.LastAfcarsPlacement groupBy $.PersonID default []]]></dw:set-variable>
			<dw:set-variable variableName="PrevCustodyEndDate"><![CDATA[%dw 1.0
%output application/java
---
flowVars.PrevCustodyEndDate groupBy $.PersonID default []]]></dw:set-variable>
        </dw:transform-message>
    </sub-flow>
   
    <sub-flow name="afcars-Element24-Sub_Flow" doc:description="Flow to calculate Element 24">
        <logger message="Get Element 24 Details" level="INFO" doc:name="Logger : Element 24 Details"/>
        <foreach collection="#[flowVars.LatestAfcars]" doc:name="For Each">
            <message-properties-transformer scope="invocation" doc:name="Message Properties : Initialize variables">
                <add-message-property key="ID" value="#[payload.PersonID]"/>
                <add-message-property key="Placement" value="#[payload.Placement == null ? {}:payload.Placement]"/>
                <add-message-property key="Runaway" value="#[payload.Runaway == null ? {} :payload.Runaway]"/>
                <add-message-property key="EpEndDate" value="#[payload.LatestCustodyEndDate == ''? dw('&quot;2999-01-01&quot; as :date'):payload.LatestCustodyEndDate]"/>
                <add-message-property key="EpStartDate" value="#[payload.LatestCustodyStartDate]"/>
                <add-message-property key="LatestCustodyStartDate" value="#[payload.LatestCustodyStartDate]"/>            
            </message-properties-transformer>
            <dw:transform-message doc:name="Transform Message : Find Ongoing Placement">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="OngoingPlacement"><![CDATA[%dw 1.0
%output application/java
%var latestEndDate2 = ( ((flowVars.Placement default []) orderBy $.EndDate2)[-1..0])[0].EndDate2 default |2999-01-01|
---
[(
 ( (flowVars.Placement default []) filter ( $.EndDate2 == latestEndDate2 ) )[0] ++ {"isOngoingPlacement" : true}

 )] when ( ( sizeOf (flowVars.Placement default []) ) > 0 ) otherwise []
]]></dw:set-variable>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Filter Placements and Runways">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="24FilterRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
flowVars.Runaway default []  map { //filter (( ($.StartDate >= flowVars.EpStartDate and $.StartDate <= flowVars.EpEndDate) or ($.RunawayEndDate == flowVars.EpStartDate and $.RunawayEndDate == flowVars.EpEndDate) ) )
      ($)
} orderBy $.StartDate
]]></dw:set-variable>
                <dw:set-variable variableName="24FilterPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
((flowVars.Placement default []) ) filter (
(($.StartDate >= flowVars.LatestCustodyStartDate) or (($.EndDate >= flowVars.LatestCustodyStartDate))) and 
($.ServiceTaxanomyLevel1CodeFacts != "Foster Care - Respite") and (($.HomePlacement default "" ) != "Temporary Home Visit" ) and 
(not (($.Division == "DPBHS" or $.Division == "DYRS") and ($.EndDate2 <= flowVars.LatestCustodyStartDate)) ) and 
(not (($.Division == "DPBHS" or $.Division == "DYRS") and (($.EndDate2 - |P14D|) <= flowVars.LatestCustodyStartDate))) ) map { //($.StartDate >= flowVars.LatestCustodyStartDate) and ( ($.StartDate >= flowVars.EpStartDate and $.StartDate <= flowVars.EpEndDate) or ($.StartDate == flowVars.EpStartDate and $.EndDate == flowVars.EpEndDate) )
      ($) 
} orderBy $.StartDate ]]></dw:set-variable>
            </dw:transform-message>
            
            <dw:transform-message doc:name="Transform Message : Add Ongoing Placement to the list of filtered Placements">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="24FilterPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
( (flowVars."24FilterPlacementforE" default []) filter ( not ( (flowVars.OngoingPlacement.PlacementID default []) contains  ($.PlacementID)) ) ) ++ (flowVars.OngoingPlacement default [])  ]]></dw:set-variable>
            </dw:transform-message>            
            
            
            <dw:transform-message doc:name="TM : Get Total Placements Runways For Ep">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="TotalPlacementforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TotalPlacementforE default {}) ++ ((flowVars."24FilterPlacementforE" ) default {})]]></dw:set-variable>
                <dw:set-variable variableName="TotalRunawayforE"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.TotalRunawayforE default {}) ++ ((flowVars."24FilterRunawayforE" ) default {})]]></dw:set-variable>
            </dw:transform-message>
            <!-- <logger message="#[payload]" level="INFO" doc:name="Logger"/> -->
            <dw:transform-message doc:name="Transform Message : Combine Runaways and Placements">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
((flowVars."24FilterRunawayforE" default {}) ++ (flowVars."24FilterPlacementforE" default {})) ]]></dw:set-payload>
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message Order by StartDate">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload filter ((sizeOf $) > 0) orderBy $.StartDate]]></dw:set-payload>
            </dw:transform-message>


        <choice doc:name="Choice : Check Payload Size">
            <when expression="#[payload.size() &gt; 2]">
                <dw:transform-message doc:name="Transform Message : Calculate Element 24">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

%var Hospitalization = {
	"5004-6017-7000" : "true",
	"5004-6402-7003" : "true",
	"5004-6531-7003" : "true",
	"5004-6030-7003" : "true",
	"5004-6282-7003" : "true",
	"5004-6029-7003" : "true",
	"5004-6489-7003" : "true",
	"5054-6536-" : "true",
	"5004-6430-" : "true",
	"5063-6537-" : "true",
	"5004-6030-7001" : "true",
	"5004-6458-7002" : "true",
	"5004-6458-7003" : "true",
	"5004-6030-7002" : "true"	
}

%function isRunaway(placement) (true when (placement.RunawayID != null) otherwise false)
%function isTrialReunification(placement) (true when ((placement.HomePlacement default "") == "Trial Reunification") otherwise false)
%function isJuvenileJustice(placement) (true when (placement.IsFosterCareSettingJ == true) otherwise false)
%function isHospitalizationService(placement) (true when ((placement.IsFosterCareSettingP == true) or (placement.IsFosterCareSettingM == true)) otherwise false )
%function isOngoingPlacement(placement) (true when ( (placement.isOngoingPlacement default false) == true) otherwise false)

%var totalPR = sizeOf payload
%var totalRunAway = sizeOf (flowVars."24FilterRunawayforE")
%var indexAllExcludes = ((payload map ($$))) default [] filter (  (isRunaway(payload[$]) or isTrialReunification(payload[$]) or isHospitalizationService(payload[$]) or isJuvenileJustice(payload[$]) ) )
%var indexBackToBack = ((payload map ($$))[1..-2]) default [] filter (
( ((payload[$ - 1].ProviderLastName default "") != "") and  ((payload[$ - 1].ProviderLastName default "") == (payload[$ + 1].ProviderLastName default "") ) and ((payload[$ - 1].FosterCareSettingType == "Foster Care") and (payload[$ + 1].FosterCareSettingType == "Foster Care") ) ) 
and 
((isRunaway(payload[$]) or isTrialReunification(payload[$]) or isHospitalizationService(payload[$])))
   
) map ([$,$-1,$+1])
---
((totalPR + (sizeOf indexBackToBack) - (sizeOf ((indexAllExcludes default [] ++ (flatten (indexBackToBack default [[]]))) distinctBy $))) )]]></dw:set-payload>
                </dw:transform-message>

            </when>
            <otherwise>
                <dw:transform-message doc:name="Transform Message : Calculate Element 24">
                    <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java

%var Hospitalization = {
	"5004-6017-7000" : "true",
	"5004-6402-7003" : "true",
	"5004-6531-7003" : "true",
	"5004-6030-7003" : "true",
	"5004-6282-7003" : "true",
	"5004-6029-7003" : "true",
	"5004-6489-7003" : "true",
	"5054-6536-" : "true",
	"5004-6430-" : "true",
	"5063-6537-" : "true",
	"5004-6030-7001" : "true",
	"5004-6458-7002" : "true",
	"5004-6458-7003" : "true",
	"5004-6030-7002" : "true"	
}

%function isRunaway(placement) (true when (placement.RunawayID != null) otherwise false)
%function isTrialReunification(placement) (true when ((placement.HomePlacement default "") == "Trial Reunification") otherwise false)
%function isHospitalizationService(placement) ( (placement.IsFosterCareSettingP == true) or (placement.IsFosterCareSettingJ == true) or (placement.IsFosterCareSettingM == true) )
%function isOngoingPlacement(placement) (true when ( (placement.isOngoingPlacement default false) == true) otherwise false)

%var totalPR = sizeOf payload
%var indexAllExcludes = ((payload map ($$))) default [] filter (  (isRunaway(payload[$]) or isTrialReunification(payload[$]) or  isHospitalizationService(payload[$]) ) )

---
(totalPR - (sizeOf ((indexAllExcludes default [] ) distinctBy $)))]]></dw:set-payload>
                </dw:transform-message>
			</otherwise>
</choice>
                <dw:transform-message doc:name="Transform Message : Set Element 24">
                    <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element24"><![CDATA[%dw 1.0
%output application/java
---
[{
      PersonID:flowVars.ID,
      Total:payload
}]]]></dw:set-variable>
                </dw:transform-message>




            <dw:transform-message doc:name="Transform Message : Add to Element24 Array">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element24Array"><![CDATA[%dw 1.0
%output application/java
---
( flowVars.Element24Array default {} ) ++ (flowVars.Element24)]]></dw:set-variable>
            </dw:transform-message>
        </foreach>
        <dw:transform-message doc:name="Transform Message : Group by Person ID">
            <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="Element24"><![CDATA[%dw 1.0
%output application/java
---
flowVars.Element24Array default [] groupBy $.PersonID]]></dw:set-variable>
        </dw:transform-message>

        <!-- <logger message="#[payload]" level="INFO" doc:name="Logger"/> -->

    </sub-flow>
    
    <sub-flow name="afcars-casecounty-Sub_Flow" doc:description="Flow to get casecounty details required for calculation of Element 3">
        <logger message="Get Case Country Details" level="INFO" doc:name="Logger : Case Coutry Details"/>
        <foreach collection="#[flowVars.ClientIDList]" batchSize="150" doc:name="For Each : Iterate over 150 records at a time">
            <dw:transform-message doc:name="Transform Message : Get Comma Separated Person Id List">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
(payload map ("'" ++ $ ++ "'")) joinBy ","]]></dw:set-payload>
            </dw:transform-message>
            <sfdc:query config-ref="Salesforce__Basic_Authentication" query="Select Id, Person__c, Case_Type_Name__c, Case__r.County__c, Case_Open_Date__c, Case_Close_Date__c from DEL_Person_Cases__c  where Person__c IN (#[payload]) and Case__r.County__c != null and Case__r.County__c != null and Case_Open_Date__c!=null and Case_Type_Name__c in ('Family Investigation', 'Treatment','Permanency') and ((Case_Open_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Case_Close_Date__c &gt;=  #[flowVars.extractInfo.ReportEndDate]) or (Case_Open_Date__c &lt;= #[flowVars.extractInfo.ReportStartDate]  and Case_Close_Date__c &gt;  #[flowVars.extractInfo.ReportStartDate] ) or (Case_Open_Date__c &lt; #[flowVars.extractInfo.ReportEndDate]  and Case_Close_Date__c &gt;=  #[flowVars.extractInfo.ReportEndDate]) or (Case_Open_Date__c &gt;= #[flowVars.extractInfo.ReportStartDate]  and Case_Close_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] ) or (Case_Open_Date__c &lt;= #[flowVars.extractInfo.ReportEndDate] and Case_Close_Date__c  = null))" doc:name="Salesforce : Query Person Involvement History" doc:description="Querying Person Involvement history to get County Details from Case"/>			

            <dw:transform-message doc:name="Transform Message : Person Involvement History details" doc:description="Transform data into Canonical format">
                <dw:input-payload mimeType="application/java"/><dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
		ID:$.Id,
		PersonID : 	$.Person__c,
		CaseType : $.Case_Type_Name__c default "",
		County : $.Case__r.County__c,
		StartDate : $.Case_Open_Date__c  as :date,
		EndDate : ($.Case_Close_Date__c  as  :date) when ($.Case_Close_Date__c  != null)  otherwise null,
		Priority : 3 when ($.Case_Type_Name__c == "Family Investigation" ) otherwise ( 2 when ($.Case_Type_Name__c == "Treatment" ) otherwise 1 )
      } ]]></dw:set-payload>	  
            </dw:transform-message>
            <dw:transform-message doc:name="Transform Message : Person Involvement History details" doc:description="Add Person Involvement History details for all Persons">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CaseCountyDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CaseCountyDetails default []) ++ (payload default []) ]]></dw:set-variable>	  
            </dw:transform-message>				

        </foreach>

            <dw:transform-message doc:name="Transform Message : Group Person Involvement History details" doc:description="Group Person Involvement History details">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CaseCountyDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CaseCountyDetails default []) groupBy $.PersonID  ]]></dw:set-variable>	  
            </dw:transform-message>			

            <dw:transform-message doc:name="Transform Message : Prioritize Person Involvement History details by Case Type and Date" doc:description="Prioritize Person Involvement History details by Case Type and Date">
                <dw:input-payload mimeType="application/java"/><dw:set-variable variableName="CaseCountyDetails"><![CDATA[%dw 1.0
%output application/java
---
(flowVars.CaseCountyDetails default {}) mapObject {
	($$ as :string) : using (lowestPriority = min $.Priority ) (( ($ filter ($.Priority == lowestPriority) ) orderBy $.StartDate )[-1..0])
}  ]]></dw:set-variable>	  
            </dw:transform-message>	
			
    </sub-flow>
    
    <sub-flow name="AFCARS_FOSTER_CallLOVflow" doc:description="Flow to pass and obtain the LOV values required for the report from the LOV Framework">
        <set-payload value="{&quot;Direction&quot; : &quot;Outbound&quot;, &quot;LOVNames&quot; : &quot;'TYPE_OF_FILE','ENCRYPTION_MAPPING','AFCARS_FOSTER_FOSTER_RACE','AFCARS_FOSTER_FOSTER_FAMILYSTRUCTURE','AFCARS_FOSTER_DISCHARGE','AFCARS_FOSTER_COUNTY','AFCARS_FOSTER_AGE_ADOPTED_LOC','AFCARS_FOSTER_LOC','AFCARS_FOSTER_ADOPTED_LOC','AFCARS_FOSTER_AGE_ADOPTED_PAC','AFCARS_FOSTER_ADOPTED_PAC','AFCARS_FOSTER_PAC','AFCARS_FOSTER_FAMILYSTRUCTURE','AFCARS_FOSTER_CHILDPLACED_BY','AFCARS_FOSTER_CASEPLAN','AFCARS_FOSTER_SERVICE','AFCARS_FOSTER_ETHNICITY'&quot;}" mimeType="application/json" doc:name="Set Payload" doc:description="Set Payload With Required LOV Attributes"/>
        <flow-ref name="lovquerySub_Flow" doc:name="lovquerySub_Flow"/>
    </sub-flow>

</mule>